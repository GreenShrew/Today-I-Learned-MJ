day 50


※ 오늘부터 JSP(JAVA SERVER PAGE 의 약자이다)에 대한 학습을 시작한다.


※ 간혹 헷갈리는 HTML 태그(예를 들어 Table이라던가)가 있다면 복습하고 오자


※ 확인해야 할 소스코드
07_Calendar, 063_footer




 HTML, CSS를 이용하면 웹을 꾸밀수는 있지만, 그 외의 기능은 뒤떨어진다. DB에서 데이터를 가져와서 화면에 보여준다던지 등등의 동적인 작동이 힘들다.
 간단한 계산 정도는 이전에 배운 jQuery나 JavaScript를 사용할 수 있지만, 복잡한 기능을 수행하기에는 힘들다. (예전에는 DB의 데이터를 가져올 수 있었으나 지금은 발전해서 이것저것 가능하긴 하다.)
 이러한 복잡한 기능을 수행할 수 있는 방법이 JSP이다.







새로운 프로젝트를 만든다
Dynamic web project로 생성
이름은 WEB07_JSP_SERVLET

프로젝트 이름 위에서 우클릭 - properties - project facets - Java 버전 1.8로 설정 - 우측 runtime의 Apache Tomcat 체크박스 클릭

src/main/webapp 에 '01' 폴더를 생성

01 폴더에 JSP 파일 생성 - 01_time.jsp 생성



01_time

- HTML에 JSP 명령을 사용하는 방법
<% %>
<%= %> : 페이지에 출력될 내용을 기술하고자 할 떄 사용



- 주석처리
<!-- 일반 텍스트와 JSP 명령의 주석처리 -->
<%-- --%> : JSP 명령이 섞이면 이런 주석처리를 사용한다.



- JSP 문법의 처리 순서
1. 클라이언트의 요청을 받는다
2. 톰캣 서버에서 요청 받은 파일의 JSP 명령들을 실행시킨다.
3. 실행된 결과를 html 태그와 같이 클라이언트에게 전송한다.

※ 페이지에서 우클릭 - 페이지 소스 보기 를 보면 이미 계산된 결과가 전송되어있음을 볼 수 있다.

웹브라우저는 JSP 문법을 모른다!



02_Sum

※ JSP는 JAVA에서 사용하던 거의 모든 문법이 똑같이 사용된다.

여기서도 페이지 소스를 보면, <% %> 의 내용은 없고 <%= %> 의 내용은 계산된 결과만이 나와있음을 볼 수 있다.

- 중간에 HTML을 끼워넣기도 가능하다!




03_Action

- JSP가 제공하는 기능!

<form> 태그와 JSP의 만남 - https://ofcourse.kr/html-course/form-%ED%83%9C%EA%B7%B8

<form> : 작업단위별로 묶는 역할
 -> <form> 태그의 요소들
name, action, method


회원가입 버튼을 누르면 다음과 같은 주소가 나온다
http://localhost:8090/WEB07_JSP_SERVLET/01/03_Action_to.jsp?name=admin&id=admin&pwd=1234&pwd_re=1234
value와 내가 적은 내용이 주렁주렁 달려서 03_Action_to.jsp 파일로 가는것을 볼 수 있다.


※ 만약 method를 post로 바꾸면,
http://localhost:8090/WEB07_JSP_SERVLET/01/03_Action_to.jsp
이런식으로 보낼 내용이 감춰져서 나온다!


---> 참고로 이렇게 나온 페이지는 03_Action에서 바로 클라이언트에게 넘어온것이 아니라 서버를 한번 거쳐서 03_Action_to 로 넘어온것이다.
서버에서 데이터를 가지고 JSP 문법을 실행한 뒤에 클라이언트에게 넘어가는 것!




03_Action_to

- 03_Action에서 넘어온 요청을 받아 03_Action_to에 포함된 JSP 명령을 수행한 뒤 클라이언트가 이를 다운로드 받아 웹브라우저에 띄우는 것이다.
이 과정에서 전달된 Parameter인 name과 value들이 JSP 명령에서 사용될 수 있다.


※ 해당 jsp를 제작하고 03_Action의 회원가입을 실행하면 03_Action에서 입력했던 내용들이 전달되어 사용된다.




다시 03_Action

- form 태그만 다른 파일로 이동할 수 있는것은 아니다.

<a href="03_Action_to.jsp?useritem=superCar">유저아이템만 보내기</a>
이러한 코드를 통해 직접 useritem이란 이름으로 superCar라는 값을 03_Action_to로 보냈다.
03_Action을 실행하면 '유저아이템만 보내기' 하이퍼링크가 생기고, 이를 누를시 나머지 value는 전송되지 않으며 사용자item만 value를 가진다.

http://localhost:8090/WEB07_JSP_SERVLET/01/03_Action_to.jsp?useritem=superCar



- 결국 <form>과 <a href>(앵커태그)의 차이
한번에 여러 내용이 가는 <form>, 지정된 내용을 직접 링크를 걸어 보내난 <a href>
사용하면서 굳이 <form>이 필요 없는 경우 <a href>를 이용하면 된다.




04_Checkbox

- 체크박스를 이용한 value 전송
textbox와 달리, 텍스트가 전달되는것이 아니라 코딩한 value값이 전달된다.

신발, 가방, 벨트를 선택해서 보내면
http://localhost:8090/WEB07_JSP_SERVLET/01/04_Checkbox_to.jsp?item=shoes&item=bag&item=belt
위와 같은 주소가 전달된다.

근데 name이 item으로 동일한데 어떤 value가 저장되는걸까?

<% String item = request.getParameter("item") %>
여기에 어떤 값이 저장되는거지?



04_Checkbox_to

- 이름이 같은 value를 저장하는 방법

<% String [] item = request.getParameterValues("item"); %>
위와 같이 배열을 이용하여 저장한다!
getParameter가 아닌 getParameterValues를 이용한다.



http://localhost:8090/WEB07_JSP_SERVLET/01/04_Checkbox_to.jsp?item=신발&item=가방&item=벨트
이걸 주소에 넣으면 이대로 나온다.





05_Select

- Select를 이용한 value 전송 방법



05_Select_to

- 어떤 Parameter를 value로 가지는지 확인해!




06_Table - 테이블 사진 이용

- JSP 명령을 이용한 테이블 작성

5행 5열짜리 테이블을 만들었다!
다만, 이를 손수 작업하기 힘들 정도로 많은 행/열이 필요하면 어떻게 할 것인가?

JSP 명령을 이용한다면 반복실행을 이용하여 이를 해결할 수 있다.
30여줄의 코드를 단 9줄로 해결할 수 있다!





07_Calendar

※ 이전달/다음달 작동이 이상한데?

- 달력 만들기

06_Table의 예를 이용해 달력을 만들어본다.

달력 만드는 방법이 헷갈린다면, Java의 Calendar 파트를 다시 복습하면 좋다.

CSS까지 첨가하였다.



01 폴더는 여기까지
==========



02 폴더 제작



01_Operator

- 연산자
Java와는 조금 다른 연산들을 가지고 있다.




02_Declare(선언부)

- 선언부영역

<%! %> 로 선언한다.
선언부 영역의 위치
선언부 영역은 변수, 메소드등이 정의된다.




03_Variable

- 선언부 영역의 변수와 실행부 영역의 변수 차이




04_import

- import 방법
맨 위에 <%@ %>를 이용하여 import가 가능하다.
이렇게 import 시키면 body에서 사용할 때마다 언급하지 않아도 사용할 수 있다.



05_Request

- Request 객체란?
https://pathas.tistory.com/179
https://doozi316.github.io/jsp/2020/01/26/WEB18/

- request 객체가 담고 있는 정보들
실행시키면 정보가 나온다.




061_Include

- import와 비슷한 include

※ 차이점 
api 가져올때 import를 쓰고
옆에 있는 jsp 파일 등을 가져올때 include를 쓴다.

※ 언제 쓸까?
똑같은 내용을 여기저기서 필요로 할 때 쓰인다.
만약 무언가 변경점이 있어도 include 된 파일 하나만 고치면 전부 고쳐지기 때문에 좋다. (유지보수 용이)

include를 이용하여 063_footer을 끌어올 것이다.



063_footer 제작 - 소스코드 보고 주석 마저 써놔

※ 이 파일의 내용은 다른 파일 사이에 끼어들 예정이므로, include 되는 파일에는 head나 html 등등의 양식 태그가 필요 없다.



062_sub 제작

여기에도 include를 이용해 063_footer를 넣는다.





071_loginForm - JSP로 임시변통하였다.

※ 서블릿이란건 아직 배우지 않았다.
원래는 서블릿에서 자바 문법으로 검사한다.
정석대로라면 서블릿에서 데이터베이스와 대조하여 검사하는것.


- 로그인 폼을 제작해본다. 다만 아직 데이터베이스에 연동이 되어있지 않으므로 로그인 폼과 동작만 하도록 만들었다.

여기서 id, password를 적어서 로그인 버튼을 누르면 적은 값이 value가 되어 072_Login_do에 넘어간다.
072_Login_do에서는 받은 value를 검사해서 로그인 여부를 확정짓는다.


072_Login_do 생성

- 잠시 콕 찍고 가는 파일이기 떄문에 별도의 HTML 태그가 필요 없다.


073_loginOK 생성

- 072에서 로그인 성공시 073으로 넘어온다.




※ jsp 파일에서 로그인 절차를 진행하면 안 좋은점

#1 response.sendRedirect 를 사용하게 되면 한글 전달값에 대한 인코딩이 UTR-8이 아니어서 한글이 깨진다. 별도의 URLEncoding 객체를 사용해야한다.
ex) 072에서 로그인 성공시 보내는 value로 '홍길동'을 보내면 ???로 나온다.

072에서
<%@ page import = "java.net.URLEncoder" %>
을 import 해서
response.sendRedirect("073_loginOK.jsp?name=" + URLEncoder.encode("홍길동", "UTF-8"));
와 같이 따로 써줘야한다.




※ 08 - 엄청 이해 안되네...

081_ForwardForm

- ForwardForm 또한 간단하게 입력하고 이동시킬 수 있다.

- Forward 객체란?


082_Forward_do 생성

- 실행만 하고 끝나는 파일이기에 따로 태그들이 필요 없다.



※ request 객체에 있는 Attribute 저장소



083_ForwardResult 생성





※ forward 방식으로 이동된 페이지는 한글에 대한 인코딩 작업이 필요가 없다.







