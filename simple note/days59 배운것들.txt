day 59

※ 저번에는...
 게시판의 게시물 목록을 main 화면에 보이게 만들기까지 하였다.

※ 오늘은...
day 58에서 만들고있던 게시판을 계속해서 만들 예정이다.



※ 다시 봐야할것들..

- 또 중복체크 버튼이 작동을 안 하네..
- 그리고 joinCheck도 동작을 하지 않는다.
--> 아무래도 joinForm에서 script에 연결이 안 되는 것 같은데..
----> 위 추측이 맞다. joinForm 내에서 script를 만들면 제대로 작동하지만, 이를 js 파일로 연결하려고 하니 안 된다..
------> 해결! 인터넷 사용기록 삭제했더니 잘 된다...



- css의 동작도 잘 되지 않는다. 이름은 먹히는데 table 맨 윗 부분 녹색칸으로 만드는 css가 안 먹힌다..
--> 한줄 빼먹은거 추가했는데도 css가 일부 먹히질 않는다..
--> th 태그에 색상이 안 입혀진다.
----> 해결! 인터넷 사용기록 삭제했더니 잘 된다...



- 회원가입 등록 누르면 아래 메세지가 ????로 뜬다..
--> 한글이 깨진 것 같은데.. setCharacterEncoding이 필요
----> 해결! Joinaction에 response.setCharacterEncoding("UTF-8"); 추가함


- editMemberForm의 editCheck가 실행이 안 된다.
--> 절반 해결! script.js 파일에서 "이름은 필수사항입니다." 이 부분을 삭제하면 제대로 실행이 된다. 이게 왜 문제가 되는지 확인한다.








----------------joinForm

- 회원가입 기능을 수행하는 페이지를 제작한다.

main에서 넘어오면 이전과 같이 이름, 비밀번호 등을 입력, 아이디 중복확인, 필수 입력란은 꼭 쓰도록 만드는 기능을 할 수 있도록 한다.

--> 여기서 script는 script.js 파일로 넘겨서 만든다.

----> 아이디 중복체크는 IdCheckAction 클래스로 확인. 전달된 id를 받아서 Dao의 getMember 메소드를 이용하고, 만약 얻어온 데이터가 있다면 '이미 있는 id', 없다면 '사용 가능'의 의미를 담은 -1, 1 데이터를 "result"라는 이름으로 보낸다.
------> 이를 idcheck.jsp로 Forwarding한다.


--------> idcheck, joinCheck
아이디 중복 확인, 빠뜨린 내용 확인


----------> JoinAction
전달인수들을 모두 Dto에 담고, inertMember에 보내주는 역할을 한다.


------------> insertMember
JoinForm에서 받아온 회원 정보를 table에 삽입하는 역할을 한다.





※ Forward의 단점
 이전 페이지의 내용을 다음 페이지로 가져오는 것. 그렇기에 다음 페이지에서 새로고침을 하면 이전 페이지의 request와 response를 가져온다.
 이 경우, 새로고침을 누르면 데이터도 한번 더 추가되려고 시도한다.
 이런 문제가 발생하면 안 되는 경우에는 Forward가 아니라 sendRedirect를 사용한다.




-------------- 회원정보 수정

- 이전처럼 회원 정보를 가져가지 않는다. 왜냐하면 session 정보를 가져다 쓰면 되기 때문이다.

editMemberFom 제작





====================================
여기서부터는 게시글 작성, 열람 등의 내용을 다룬다.

※ board 폴더를 만든다!




- 게시글을 누르면 해당 내용을 담은 페이지로 이동하도록 만든다.

main.jsp에서 
<a href="board.do?command=boardview&num=${board.num}">${board.title}</a>
로 링크를 만든다.
--> boardview로 넘어갈 때 누른 게시물의 번호를 같이 보낸다. 이 번호를 이용해 DB의 내용 하나를 긁어올 수 있도록 만든다.
----> 이 역시 ActionFactory를 이용해 해당 역할을 담당하는 클래스로 보낼 수 있도록 한다.


--------------> BoardViewAction

- 여기서 해야할 일들!

#1. 게시글 클릭시 조회수가 +1이 되어야 한다! 해당 메소드 하나!
--> plusReadCount(num);	// num값에 해당하는 게시글의 조회수 증가

#2. 클릭한 내용물을 긁어오는 메소드 하나!
--> getBoard(num); // num값에 해당하는 게시글의 정보 긁어오기

※ 조회수 +1과 게시글 긁어오는 메소드는 따로 만드는게 더 좋은 방법이다!
 메소드를 하나 만들어서 하나에서 전부 처리하는게 더 좋아보이지만, 게시글은 불러오지만 조회수는 늘어나지 않는 경우도 있어야 하기 때문이다.
예를들어, 게시글을 수정하고 다시 게시글을 나타내는 페이지로 넘어올 때, 메소드가 하나로 이루어져있으면 조회수도 +1이 또 되기 때문이다.

-----------> BoardDao 에서 두 메소드를 작성한다.

------------> board 폴더에 boardView.jsp를 만든다.


-------------------boardView

- 게시글을 클릭하면 게시물 내용이 나타나고, 아래 리스트로 돌아가는 버튼, 수정하는 버튼, 삭제하는 버튼을 만든다.

※ 게시글을 누를 때마다, 새로고침을 누를 때마다 조회수가 늘어난다!
--> 이걸 해결할 수 있는 방법은 쿠키를 이용하는 방법이 있다.
----> 서버에 유저가 무엇을 읽었는지 기록을 저장할 수 있지만, 이건 서버에 과부하를 일으킨다.
------> 쿠키를 주면 해당 유저는 같은 게시판을 눌렀을 때 조회수가 늘지 않는다!
--------> 다만, 다른 pc에서 접속시 조회수가 늘어난다. 이건 나중에 Spring Framework를 이용해 해결할것이다.




----------------------게시글 등록

- command는 main의 boardWriteForm임을 확인.
--> BoardWriteFormAction 클래스 생성


- BoardWriteFormAction
 게시글 작성 페이지(boardWriteForm.jsp)로 넘겨주는 역할.

- boardWrite.jsp
 게시글 작성을 위한 Form 제작

--> '등록' 버튼을 눌렀을 때 비어있는 칸이 있으면 안 되니 이걸 또 체크해주도록 만든다.

----> script.js에 boardCheck() 제작


- 작성을 다 했으면 실제 DB에 이를 저장하여 게시판에 노출되도록 만든다.
 command boardWrite로 보내서 BoardWriteAction으로 데이터를 넘기도록 한다.


----- BoardWriteAction

- 전송된 내용을 받아 Dao의 insertBoard에 보내고, 이를 insertBoard 메소드에서 DB에 넣고 BoardWriteAction으로 돌아와 다시 메인 페이지로 화면을 넘기는 역할


※ 주의!
여기서도 sendRedirect를 사용한다.
Forwarding을 사용하면 게시글을 작성하고 새로고침을 할 때마다 똑같은 게시글이 추가되는 현상이 나타난다!





























































































































