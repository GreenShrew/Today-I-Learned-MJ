days101 배운것들 - 영상 있음

※ 시작하기 전에
문서의 처음에 SET SERVEROUTPUT ON 를 한번 실행시켜주어야 스크립트 출력이 가능하다!


※ 에러
1. 04에서 매개변수 인수 전달시, 순서변경 에러난다.
2. IN 변수와 OUT 변수와 IN OUT 변수 내용 못 썼다... 완료






02_PLSQL제어문
==================================
- 새로운 sql 파일을 만든다.
-> 경로는 C:\Users\Onion\Desktop\TIL\Today-I-Learned-MJ\PLSQL
-> 이름은 02_PLSQL제어문

--> 여기서 제어문은 if문, 반복실행문을 말한다.



## if문
- if, if~else, if~else if~else 의 사용 방법.
-> 중괄호가 없고 조건과 명령문을 구분하기 위해 'then' 으로 구분한다.
--> 마무리는 end if 로 끝낸다.

---> 아래 간단한 예시와 문제가 있다.

※ 몇가지 사용 함수
- DBMS_RANDOM.VALUE(시작숫자, 끝숫자) : 시작 숫자부터 끝 숫자 사이의 임의 숫자를 발생한다.
- ROUND( 숫자, 반올림자리수 ) : 숫자를 지정된 반올림 자리에서 반올림한다.


## 중첩 IF 문
-- if문을 중첩하여 사용하는 방법이다.



## CASE 문
- CASE WHEN ~ THEN
-> 사이의 ~ 에 조건을 넣는다.

- CASE에는 유형이 두가지가 있다.
1. if 문처럼 when 뒤에 조건식 넣기
2. switch문처럼 case:(조건식 또는 표현식 또는 변수), case:(조건식 또는 표현식 또는 변수), .... 이렇게 쓰는 법



## 반복실행문 (각각 예시로 설명)

# 반복실행 유형1 (LOOP 문)
- 반복 실행될 실행문은 LOOP로 시작해서 EXIT로 끝난다.
-> EXIT 뒤에 'WHEN 조건' 을 달아서 반복 실행이 '끝날 조건' 을 설정한다.


# 반복실행 유형2 (WHILE 문)
- WHILE을 사용하여 반복 실행이 '실행될 조건' 을 설정한다.


# WHELE 과 EXIT WHEN 의 혼합사용
- 중간에 EXIT WHEN을 사용하여 종료 시점을 정할수도 있다.


# 반복실행 유형3 (FOR 문)
- FOR 변수명 IN [REVERSE]시작값..끝값
-> 시작값부터 끝값까지 반복실행한다. REVERSE가 쓰여진 경우, 반대방향의 숫자 진행으로 반복실행한다.


# CONTINUE 문
- 조건이 충족하면 반복실행 영역중 나머지 명령을 실행하지 않고 다음 반복으로 진행한다.


# GOTO 문 (프로그래밍 언어에서 쓰지 말라고 권장되는 문법이다...)
- 이유 : GOTO 문으로 강제로 위치를 이동시키면 이후 반복문의 흐름을 놓친다... 어느순간 제어가 불가능할 정도가 된다고 한다!
※ 인터넷 검색으로 이유 찾아봐도 좋을듯


# NULL 문
- if 문 또는 case when 등에서 해당 경우에 실행해야 할 명령이 하나도 없을때 쓰는 구문이다.







03_PLSQL_Function.sql
===============================
- 01, 02에서 사용하는 익명블럭은 잘 사용하지 않는다. 일반적으로 이름이 있는 서브 프로그램(함수) 또는 프로시저를 사용하는 것이 대부분이다.
-> 익명 블럭은 한번 사용하고 나면 없어져버리는 휘발성 블럭!
--> 함수 또는 프로시저는 컴파일을 거쳐 데이터베이스에 저장되어 재사용이 가능한 구조이다.



## 함수의 형태 (함수를 컴파일해서 두고두고 쓴다!)
- CREATE OR REPLACE FUNCTION 함수이름(매개변수1, 매개변수2 ... ) 로 만든다.
-> RETURN 데이터타입; 으로 return될 데이터타입도 써준다.
--> DECLARE 가 아니라 IS[AS] 에 변수, 상수를 선언한다!

※ 상세 내용 설명은 주석으로!

※ 예시도 있다.
- 두개의 정수를 전달해서 첫번쨰 값을 두번째 값으로 나눈 나머지를 구해서 리턴해주는 함수를 만들었다.

---> 함수의 컴파일 후에는 SQL문으로 이를 활용할 수 있다.

# 두번째 예시 참고
----> 함수 내에 SQL 문을 사용할 수도 있다!


# 매개변수가 없는 함수
- 매개변수가 없는 함수는 괄호 없이 정의하고, 괄호 없이 호출한다.


# 연습문제
- employees 테이블에서 각 부서번호를 입력받아서 급여의 평균을 계산하는 함수를 생성하자.
-> 부서의 인원이 없으면 평균값은 0으로 출력한다.






프로시져 사용 방법!
04_PROCEDURE.sql
================================
## 프로시져? 사용방법
- 함수와 비슷한 구조이다.
-> 함수는 결과 리턴이 있지만, 프로시져는 결과 리턴이 없는것이 특징이다. (리턴을 위한 별도의 코드(변수)가 있다.)

※ 주석에 설명...

--> JOBS 테이블에 레코드를 추가하는 프로시져를 만드는 예시가 있다.
---> 프로시저를 호출하려면 'EXEC' 명령을 이용한다.

※ EXEC my_new_job_proc ('SM_JOB1', 'Sample JOB1', 1000, 5000);


# 예제 2
- IF문과 섞은 예제이다.



## OUT, IN OUT 매개변수 사용 - 잘 모르겠다면 영상 ㄱ
※ 앞서 사용한 프로시져를 복사해서 가져왔다.
- OUT 변수에 값을 저장해서, 다른 익명 함수에서 가져다 쓰는 모습을 볼 수 있다.



## 디폴트 밸류
- Procedure 안에서 미리 기본값(Default Value)를 정의하고 시작
-> 프로시져를 불러와서 사용할때 만약 따로 값을 안 넣으면 기본값이 들어간다.




## 매개변수 인수 전달시, 순서 변경




## IN 변수와 OUT 변수와 IN OUT 변수의 차이


## 프로시져의 RETURN 문
- 프로시져에서 RETURN은 값을 리턴하겠다는 명령이 아니고, 현 시점에서 프로시져를 끝내겠다는 뜻이다.
-> 자바에서 void 메서드 실행중에, return 명령으로 중간에 메소드를 종료하는것과 비슷하다.










05_CURSOR.sql  <- day 102에 계속
=====================================
## CURSOR?
- 주로 프로시져 내부의 SQL 명령중 SELECT 명령의 결과가 다수의 행으로 얻어졌을 때 사용하는, 결과를 저장하는 메모리 영역을 지칭한다.

# CURSOR를 사용하는 이유...
- 예시1에서 부서번호가 30인 부서에는 여러 사원이 있는데, 여러 사원의 결과(job_id)를 하나의 변수 vs_job_id에 넣으려고 하니 에러가 발생한다.

-> 즉, select 명령의 결과가 2행 이상이라면 이를 변수 하나에 담으려 할때 에러가 발생한다.
-> 2행 이상의 결과를 담을 수 있는 메모리영역(또는 변수)으로 사용하는 것이 CURSOR이며, 자바의 리스트와 비슷한 구조를 갖고 있다.



## CURSOR가 실행되는 실행단계.
- 정의->호출->처리->커서닫기 순이다.