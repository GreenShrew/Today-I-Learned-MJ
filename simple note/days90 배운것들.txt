day 90 배운것들

※ 프로젝트가 끝나고 다시 수업이 재개되었다. 이전에 Spring에 대하여 학습하였지만, 잊은 부분이 있을것을 예상해 어느정도 기초부터 다시 학습하기 시작한다.

※ 다시 환경설정 설치부터 다시 한다.


※ 한번 찾아봐야 할것들
@Autowired란? 그 원리는?
Service단을 만드는 이유는?


※ 참고
 HttpServletRequest이나 Model같은 것이 필요할 때 마다 매개변수로 넣어준다!
public String firstRequest(HttpServletRequest request, Model model){ }
 이런식으로!


※ 오류 및 덜 쓴 내용
loginForm.jsp 하단의 EL문 메세지 나오는 부분




----------------------------------------------------

이클립스 삭제/재설치 방법
=============================

c: - 사용자 - 사용자이름 폴더에서

.eclipse, .m2, .p2, eclipse 폴더를 완전 삭제한다.

workspace로 쓰던 프로젝트를 삭제한다. (나는 경로를 바꾸었다.)



※ 옛날 기술로 프로젝트를 진행할 예정이므로 옛 버전의 이클립스를 설치

https://www.eclipse.org/ 접속
다운로드 버튼 클릭
Download Packages 선택
MORE DOWNLOADS의 Older Versions으로 들어가서 2020년 3월 버전 다운로드
R Packages 클릭
window용으로 다운로드




Tool 설치
==================================

※ 이클립스 설치가 완료되었다면 sts 설치부터 한다.

Help - Marketplace 선택
sts 검색하면 Spring Tools 3 (Standalone Edition) 설치




※ 서버 설치와 오라클 셋팅도 마무리하자.




프로젝트 시작
===================================
 위의 설치가 끝나면 프로젝트를 시작한다.

file - new - other - Spring - Spring Legacy Project (이 항목이 없다면 이클립스 재설치부터 해야한다)

프로젝트 이름은 SpringWeb01 (§ 사진 01)
Spring mvc project 선택


※ 제일 먼저 해야할것은 pom.xml을 수정해야한다.

properties 태그의 java 버전을 1.6에서 1.8로 수정

springframework-version의 버전을 3.1.1.RELEASE에서 4.0.2.RELEASE로 변경

plugin 태그에서 maven-compiler-plugin의 버전을 1.6에서 1.8로 바꾼다.
source와 target 태그를 바꾸면 된다.


※ pom.xml 설정사항이 바뀌면 프로젝트 우클릭 - maven - update project를 실행한다.



여기까지가 프로젝트를 준비하는 내용이다.

----------------------------------------------------





프로젝트 실행 방법(§ 사진 02)
=======================================
 프로젝트 우클릭 - run as - run on server 를 눌러야 실행된다.
만약 프로젝트 실행이 정상적으로 된다면 Home 페이지가 나오고 Hello World! 가 출력된다.

※ 화면의 글자가 깨지는 이유는 옛 기술의 프로젝트이기 때문이다.(Legacy)
이를 해결하려면 src - main - webapp - WEB-INF - web.xml 파일
여기서 web-app 태그 안에 아래의 코드를 삽입해준다. (오타가 있을 경우 에러 발생)

	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

그리고 실행하면 정상작동됨을 볼 수 있다.




Hello world!가 나오기까지의 과정 (HomeController.java)
===================================
- com.ezen.springmvc 패키지에 들어가면 HomeController.java 파일이 있다.
이 파일은 서버에 요청되는 리퀘스트를 다루는 클래스이다.

여기서 클래스이름 위에 @Controller라는 어노테이션을 표시하면 그 안에 사용되는 @RequestMapping에서 요청 리퀘스트가 검색되고 선택되어 실행된다.

첫 페이지의 주소 http://localhost:8090/springmvc/ 는 localhost의 8090 포트중 springmvc 로 대표되는 프로젝트에 요청을 보낸 상태이며, 요청의 키워드는 '/' 이다.
이는 클래스안에 있는 메소드들 중 @RequestMapping('/') 을 찾아서 실행하고 리턴하라는 뜻이다.
-> @RequestMapping(value = "/", method = RequestMethod.GET) 확인.
-> method = RequestMethod.GET 생략 가능하다. 단, POST 방식은 반드시 써야한다.




- model 객체
request.setAttribute를 대신할 정보 전달 객체이다. addAttribute로 저장만 하면 목적지에 자동 전달된다.



- return "home";
 String 형 리턴.
 리턴된 String은 appServlet 폴더의 servlet-context.xml에 정의된 경로와 파일 확장자가 조립된다.
 "/WEB-INF/views/" + "home" + ".jsp" 이 파일을 찾아서 웹브라우저에 표시되도록 응답한다.





- @RequestMapping 만들기 1 (§ 사진 03)
 HomeController 클래스에 새로운 메소드를 만들면 해당 페이지로 이동시킬수도 있다.

@RequestMapping("/main") 를 달고 main 메소드를 만들어 return "main"; 을 리턴시킨다.
그리고 view 폴더에 main.jsp 파일을 만들고 프로젝트를 실행한다.
그리고 주소의 뒤에 "/main" 을 추가하면 § 사진 03 페이지로 넘어간다.



- @RequestMapping 만들기 2(§ 사진 04)
 이번에는 Dao를 만들어서 메소드를 실행시키고, 이 데이터를 model 객체에 담아 전송시킨다.

 com.ezen.springmvc 패키지에 HomeDao.java 클래스를 생성한다.
 그리고 HomeController 에 @RequestMapping("/other") 로 메소드를 만들고 HomeDao의 getMessage의 메소드를 실행해서 model에 담아 보낸다.
 view 폴더에 other.jsp 파일을 만들고 서버를 실행시킨다.
그럼 § 사진 04 페이지로 넘어간다.



※ 참고로 view 안의 폴더의 경로는 감추어진다.



1. 여기까지 보면 예전에 했던 내용과 비슷하다. 하지만 서비스단을 만들지 않은 상황.
없어도 되지만 있으면 장점들이 있다.

2. 또한 Dao를 만들면서 new로 객체를 만들었다. 사이트에 접속하는 사람마다 객체가 만들어지므로 서버에 부담이 생긴다.
 이전에 배웠던 자동주입, 의존주입을 이용하여 new를 만들지 않도록 할 것이다.
 HomeDao 클래스를 스프링 컨테이너에 넣을 것이다.
 만들어진 클래스를 스프링 컨테이너(스프링 프레임워크에서 제공)에 넣으려면 어노테이션 @Repository 를 사용한다.



@Repository로 Dao 를 스프링 컨테이너에 넣어 쓰기
===================================
 이전 Sp01 ~ 07 프로젝트에서는 스프링 컨테이너에 무언가를 넣기 위해서 bean 파일에 뭐 이것저것 했다!
 하지만, @Repository 하나면 이를 전부 자동으로 넣어준다!


--> HomeDao 위에 @Repository 를 넣고 import를 하면 HomeDao는 스프링 컨테이너에 들어가게 된다.
 이렇게 컨테이너에 넣어두고 다시 HomeController로 돌아와서 new HomeDao(); 를 제거하고 전역변수로 @Autowired 어노테이션을 추가한다.

 이렇게 만들면 싱글턴으로 만들고 뭐 그런식으로 만들지 않고도 이를 공통으로 사용할 수 있다.




@Service로 HomeService.java 를 스프링 컨테이너에 넣어 쓰기
==========================================
 이번에는 Service단을 스프링 컨테이너에 넣는다.
 Service 클래스를 스프링 컨테이너에 넣기 위한 어노테이션으로는 @Service를 사용한다.
 @Repository 를 사용해도 크게 무리는 없으나, 실행 시점과 기타등등의 이유로 구분하여 사용하는게 보통이다. 이에 대해서는 별도 학습이 예정되어있다.


--> com.ezen.springmvc 패키지에 HomeService 클래스를 생성하고 어노테이션으로 @Service를 추가하면 끝!

이제 HomeController에 @Autowired를 추가하면 끝.




Service단을 이용하여 Dao를 감추기 (감춘다고 하는게 맞는건가)
==========================================

※ Service단의 역할은 Dao를 직접 호출하지 않고 해당 Service단을 거쳐 Dao를 호출하도록 만든다.
 지금은 이런 방식으로 호출하도록 만드는데에 큰 이유가 없지만, 앞으로는 이렇게 만드는 이유가 생긴다.


- HomeController.java에서 Dao의 @Autowired를 제거하고 service @Autowired를 넣는다.
 그리고 HomeService.java에다가 Dao의 @Autowired를 넣고, 여기서 HomeDao의 getMessage의 메소드를 실행하도록 만든다.
 그 결과를 HomeController에 리턴하도록 만들고, 리턴된 값을 받아 other로 리턴시킨다.



----------------------------------------------------



답변형 게시판 제작
====================
 새로운 프로젝트를 만든다.
 이름은 SpringWeb02_Board
 Spring mvc project 선택


pom.xml에서 자바 버전이라던가 기타등등을 변경해준다.
그리고 추가적으로 Oracle DB을 사용하기 위해 아래 repositories 태그를 추가해준다.

	<repositories>
		<repository>
			<id>oracle</id>
			<name>ORACLE JDBC Repository</name>
			<url>http://maven.jahia.org/maven2</url>
		</repository>
	</repositories>

그리고 DB를 사용하기 위해 dependencies 태그 안에 아래 <!-- DataBase --> 내용을 넣는다. 

		<!-- DataBase -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.1.6.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>com.oracle</groupId>
			<artifactId>ojdbc6</artifactId>
			<version>12.1.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5</version>
		</dependency>

그리고 파일 업로드 기능을 위한 cos.jar 파일을 받기 위한 내용도 필요하다.
아래의 <!-- fileUpload --> 내용을 넣는다.

		<!-- fileUpload -->
		<dependency>
			<groupId>servlets.com</groupId>
			<artifactId>cos</artifactId>
			<version>05Nov2002</version>
		</dependency>


-> pom.xml을 저장하고 maven update

--> web.xml에 이전에 넣었던 filter 태그 내용을 넣는다. 이전 프로젝트에서 복사붙여넣기 해도 된다.

---> 그리고 board 패키지의 HomeController 삭제, views 폴더의 home.jsp 제거




############# 본격 시작

com.ezen.board.controller 
com.ezen.board.service
com.ezen.board.dao
com.ezen.board.dto
com.ezen.board.util
다섯개의 패키지를 더 만든다.

- controller 패키지에 MemberController 클래스를 생성한다.
-> 패키지에 @Controller 를 붙여준다.

- dao 패키지에 MemberDao 클래스 생성.
-> 패키지에 @Repository를 붙여준다

- dto 패키지에 MemberDto 클래스 생성.
-> 얘는 스프링 컨테이너에 넣지 않아도 된다.

- service 패키지에 MemberService 클래스 생성.
-> 패키지에 @Service를 붙여준다


### DB를 만든다.
 views 폴더에 sql.sql 파일 생성, board, member, reply 테이블을 만든다.
(단, 이전에 만든 테이블과 레코드가 있다면 이걸 쓰자.)

그리고 board와 reply에 대한 시퀀스도 만든다.




메인 페이지 만들기 (§ 사진 05)
======================================
- MemberController에 메인페이지로 보내는 역할을 할 @RequestMapping("/")를 만든다.

- firstRequest() 메소드 작성
-> 로그인 되어있는지 확인. 로그인 되어있다면 main으로 보낸다.
--> 아니라면 member/loginForm으로 보낸다.

- views 폴더에 member 폴더를 만들고 loginForm.jsp 파일을 만든다.
-> resources 폴더에 있는 css와 script 파일을 연결시킨다.
-> 참고로 resources 폴더는 webapp 아래에 있는 것을 말한다.
--> resources 폴더 아래 각각 css/board.css, script/board.js 를 만들어준다.
---> loginForm.jsp도 작성해준다. (실행하면 § 사진 05 가 나온다)

----> js 파일에 loginCheck() 함수도 만들어준다.



로그인 기능 만들기
===========================================
※ 스프링 컨테이너에 넣은 클래스는 new로 새 객체를 만들 필요 없이 @Autowired를 이용하여 사용할 수 있다.


- MemberController에 로그인 역할을 할 @RequestMapping(value="/login", method=RequestMethod.POST)를 만든다.
-> post로 날아왔기 때문에 생략 없이 다 써야한다.

--> 여기에 필요한게 dto, service, dao 를 만들어야한다.

--> dto를 작성한다.
--> @Autowired로 MemberService ms; 를 전역변수로 만든다.
--> getMember 메소드를 제작한다.
---> MemberService 클래스에 getMember 메소드가 만들어지고, MemberService에서는 @Autowired로 MemberDao mdao;를 전역변수로 만든다.
----> MemberDao 에 getMember 메소드가 만들어지고, Dao에 회원정보를 조회하는 기능을 만든다.

-----> Dao가 DB에 접근하기 위해 연결해야한다.
-----> util 패키지에 DataBaseManager 클래스를 만든다. 다만 이것도 @Repository를 통해 스프링 컨테이너에 넣는다.
------> util 패키지에 접속자의 아이디, 드라이버 등등이 들어가는 DataBaseUserInfo 클래스를 만든다. 다만 이것도 @Repository를 통해 스프링 컨테이너에 넣는다.


※ 즉, Controller -> Service -> Dao -> Service -> Controller로 전달된다. 


- 어쨌든 조회한 내용에 따른 로그인 여부를 가르는 동작을 하도록 만든다.





메인 페이지 만들기 (§ 사진 06)
==================================================
- 메인 페이지로 갈 때 메인페이지에 표시할 데이터들을 가지고 가야한다.
(따라서 위에 작성하며 main 페이지로 바로 보내는 동작을 수정해야한다.)
-> controller 패키지에 이러한 정보들을 다룰 BoardController.java 클래스를 만든다.
-> 어노테이션 @Controller을 추가한다.



- MemberController의 url 에 boardList라고 쓰면 안된다. 왜냐하면 컨테이너에서 조합이 되어 "boardList.jsp"라는 파일로 보내기 때문이다.
-> jsp 파일이 아니라 다른 클래스로 넘기고 싶다면 "redirect:/(mapping 이름)"을 쓰면 된다. 여기서는 redirect:/boardList 을 쓰면 된다.

--> BoardController에서 쓰일 Dao, Dto, Service를 만들고 어노테이션을 추가한다.



- BoardController에 @Autowired로 Service를 연결하고, 사용자가 로그인 된 경우 게시물들을 조회해오는 동작을 한다.
-> 그리고 실행하면 (§ 사진 06) 이 나온다.































