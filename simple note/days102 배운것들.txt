days102 배운것들 - 녹화 있다.

==> 오늘은 PL/SQL 의 05_CURSOR를 마무리하고 이전에 만들었던 ShoppingMall을 Spring Boot로 구현하기 시작했다. + PL/SQL에서 배운 프로시저를 사용할 것이다.



※ 다시 볼것들
- 조금 더 간결한 FOR 문과 커서의 사용 <- 여기 예시에서 선언부에 변수 없나 확인좀








05_CURSOR
=======================================
- select의 결과로 얻어지는 결과가 1개가 아니라 2개 이상일 때!
-> select로 가져오는 레코드가 두개 이상이면? 이 레코드들이 다 필요하면?
--> 이때 사용하는게 CURSOR 이다.



## CURSOR의 실행단계 (주석으로 설명)

## CURSOR의 사용
- 아래에 cursor 사용 예시...
결과값으로는 
100 - Steven King
101 - Neena Kochhar
102 - Lex De Haan
이렇게 나온다.
 select로 가져온 내용 3개가 cursor에 저장되고, 이를 반복 실행문으로 데이터를 꺼내서 원하는대로 사용 가능하다.




## CURSOR와 for 문

- 기존의 FOR 문과 커서와 함께 사용하는 FOR 문의 비교!
-> for문을 이용하면 cursor의 사용이 기존보다 더 쉬워진다!
--> OPEN과 FETCH를 for 문에 하나로 합친 모습...
--> Close도 사라졌다.



## 조금 더 간결한 FOR 문과 커서의 사용
-> 선언부(declare) 의 커서 내용이 for문의 커서 이름이 들어가는 부분(IN 뒷쪽)에 들어갔다!



## 연습문제
- 



## 커서 변수
- 커서 변수란?
- 커서 변수의 선언 방법
- 강한 커서 타입, 약한 커서 타입

# 커서 변수를 만들어서 필요할때마다 커서 내용을 저장하고 호출해서 그 결과를 사용하려고 변수를 만든다.
 아래에 그 예시가 있다.


# 시스템에서 제공해주는 커서 타입 ( 앞의 내용을 싹 까먹어도 된다고 한다.. 이것만 사용할 수 있으면 된다!)
- 앞으로 가장 많이 사용하게 될 커서이다.
-> 이를 이용하면 커서 타입을 따로 선언할 필요 없이 'emp_dep_curvar SYS_REFCURSOR;' 이런식으로 커서변수를 선언할 수 있다.

# 순서 정리!
 1. SYS_REFCURSOR 변수 생성
 2. 변수에 select를 연결
 3. FETCH로 꺼내서 처리(반복실행)




## 프로시져에서의 커서 사용 예
- testCursorArg 라는 프로시져를 통해 out 변수로 select 결과를 내보낸다.
-> 그리고 프로시져를 호출하여 반복 실행문을 통해 사용한다.

※ mybatis에서 사용하기 딱 좋은 형식! 따라서 이를 중요한 예제로 기억해두고 필요시 참고하는것이 좋다.










이제부터 프로시저, SpringBoot를 이용해 Shopingmall을 만들것이다.
기존 파일은 거의 그대로 쓰인다! action, controller, dao가 좀 바뀐다!

그 전에 G15의 프로젝트를 프로시져를 사용한 Board를 만들어본다.
===========================
- PL/SQL에서 BOARD_PROCEDURE.sql 생성

-> 이클립스에서 SpringBoot_G16_Board_UseProcedure 프로젝트를 생성한다.
--> build.gradle의 dependencies에 jstl을 사용하겠다는 코드 두줄, libs 폴더에서 .jar 파일을 사용하겠다는 코드 1줄을 넣는다.
--> 그리고 application.properties에 사용할 서버, JSP, 파일 업로드를 위한 mulit-part Form 비활성화, oracle 셋팅, mybatis 셋팅을 한다.
---> 그리고 refresh gradle project 한다.

----> resources 아래에 mybatis.mapper 패키지를 생성한다.
----> com.ezen.spg16 에 controller, dao, dto, service 패키지 생성
----> src 폴더에 webapp/WEB-INF/views 폴더를 생성한다
----> 프로젝트 바로 아래에 libs 폴더를 만들고, cos.jar 파일을 넣는다.

§ 사진 01 : 셋팅 완료된 사진

-----> static 폴더에 G15 프로젝트의 static 폴더에 있는 css, script, upload를 긁어온다.




## 로그인 화면
- MemberController 생성.	@Controller 어노테이션
-> @RequestMapping("/") 제작

- views에 member 폴더 생성, loginForm.jsp 생성

-> 여기까지 하면 프로젝트 열자마자 loginForm 이 나온다.



## 로그인 기능
- MemberVO를 복사해온다.
-> MemberController의 @RequestMapping(value="login", method=RequestMethod.POST)를 복사해온다.

--> mapper 폴더에 MemberDao.xml 파일을 만든다.
--> dao 패키지 안에 IMemberDao 인터페이스를 만든다.	@Mapper 어노테이션
--> service 패키지 안에 MemberService 클래스를 만든다.	@Service 어노테이션

# 이제부터 mybatis에서 프로시져를 쓰는 방법을 볼 수 있다.
- 프로시져에 필요한 매개변수를 주고받고자 HashMap을 이용한다.

-> 기존에 id값을 받아 이를 DB에서 select하여 한 회원의 데이터를 받아오는 동작을 아래와 같이 바뀐 형식으로 한다.

--> 프로시져에 보낼 HashMap에 id 값을 넣어 보낼 것이다.
--> 프로시져에서 select 된 결과를 받아올 공간을 "ref_cursor"라는 이름으로 만든다. (어떤 형식을 받을지 모르므로 null을 넣는다.)
--> return 값이 "ref_cursor"에 담기므로 getMember() 메소드는 mvo에 담기지 않으며, id 값도 HashMap에 넣어서 보내므로 paramMap을 전달인자로 사용한다.

---> 오라클 프로시져에서 커서에 담겨오는 자료형은 한개 이상의 레코드들이다.
---> 따라서 위 getMember의 결과는 아이디로 검색한 한명의 데이터이지만, 결과는 리스트 형태로 담겨온다.
---> 그 중 첫번째를 MemberVO에 꺼내어 담아서 사용한다.

---> 순서는 다음과 같다.
#1. 리스트부터 꺼낸다.
#2. 리스트의 첫번째 항목을 mvo에 담는다.





























































