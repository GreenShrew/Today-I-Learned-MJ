days135 배운것들 영상 있음

※ CH06은 복붙해야한다.

※ CH09 Ex 복붙해

※ CH10_Class 복붙해


kotlin
====================================
새로운 패키지를 만든다. 이름은 day02.





CH03_Operator
=====================================
New Kotlin Class/File 을 선택해서 CH03_Operator 이라는 이름의 파일을 만든다.

- 연산자에 대해 학습한다.

->






CH04_IF
=========================================
코틀린의 if문에 대해 학습한다.

- 기본적인 if, else if, else 에 대한 내용

- 자바와의 차이

- 자바에서만, 그리고 코틀린에서만 사용 가능한 if문의 변형






CH05_When
=======================================
코틀린의 When에 대해 학습한다.

- 자바에는 switch라는게 있는데 코틀린에는 없다.
-> 대신 When이라는게 있다.


- when 문법은 코틀린에서 사용하는 자바의 switch 에 해당하는 문법이다.
-> 각 case를 -> 로 표시한다. break를 쓰지 않아도 된다.

--> 컴마로 구분하여 두가지 이상의 경우를 하나의 case로 처리할 수 있다.
--> in 키워드와 .. 연산자를 이용하여 범위를 골라는 case를 제작할 수 있다.

---> 또한, 각 케이스에서 선택된 값을 결과로 반환하여 변수의 값으로 활용할 수 있다.


- 이번에는 따로 함수를 만들어서 when을 따로 뺄 것이다.
-> 함수의 몸체가 when으로 대체되어 선택된 데이터가 함수의 리턴값으로 사용된다.








CH06_FunctionProgram
=============================================
- 코틀린에서는 변수를 선언하면 보통 변수 이름 옆에 콜론(:)과 함께 자료형을 기술한다.
-> 하지만 변수를 선언하고 초기화되는 값의 자료형이 명확하다면, 변수 선언의 자료형 부분은 생략이 가능하다.

--> 이는 함수에도 적용되는 사항이다!
--> 리턴값이 간단하거나, 그 값의 자료형이 정확하게 결정 되어있는 경우 간단하게 표현할 수 있다.


#1. 함수의 리턴값이 호출된곳에서 리턴값을 받는 변수의 자료형을 결정한다.

#2. 함수의 리턴값이 간단한 수식으로 해결된다면 = 과 함께 연결하여 return 명령을 대신한다.

#3. 리턴값의 자료형이 아래와 같이 정수와 정수의 연산이어서 그 결과도 정수라면, 그리고 그 정수가 리턴될 것이라면 함수의 리턴 자료형도 생략가능하다.



- 람다 함수 : 함수의 초간단 간략형 표현으로, 함수의 몸체를 변수에 담아 사용하도록 변형한 형태이다.

-> 람다함수를 풀 버전으로 만드는 방법

-> 그리고 람다함수를 생략 가능한 내용을 생략하며 만드는 방법








CH07_NonameFunction
=========================================
익명함수에 대해 알아본다.

- 익명함수를 만드는 방법
- 익명함수를 전달인수로 전달하는 방법
- 전달인수로 직접 익명함수를 기술하는 방법
- 전달인수로 람다함수를 보내는 방법


- 리턴값이 함수인 함수의 정의...
-> 그리고 함수가 리턴값으로 리턴되어 변수에 저장된다.

--> 그리고 리턴값으로 람다함수가 들어갈수도 있다!









CH08_Loop (별거 없다)
===========================================
이번에는 코틀린에서의 반복실행문에 대하여 학습한다.

※ 코틀린의 for문은 자바에서처럼 시작 값 끝값 증감량 등을 사용하지 않고, 범위데이터만 사용한다.

- 1부터 10까지...
- 1부터 10까지인데 2씩 증가...
- 10부터 1까지...
- 10부터 1까지인데 2씩 감소...


- 코틀린에서의 while, do while문도 자바와 큰 차이는 없다.






CH09_Array
===========================================
코틀린에서의 배열에 대하여 학습한다.

- 배열의 생성 arrayOf

- 배열 요소 출력 contentToString() 함수


- 코틀린의 배열은 일단 자료형의 제약이 없어서, 자바의 리스트 등 처럼 여러 자료형 데이터를 하나의 배열에 넣어서 사용할 수 있다.
 다만, 그것이 권장할만한 동작은 아니기 때문에 자료형을 제한하는 코드가 제공되어 사용된다.

-> 하나의 자료로 제한하여 사용하는 방법

- 배열 생성 초기에 크기와 초기값 설정하는 방법

- 배열의 요소를 이용하는 방법
-> 첫번째값, 마지막 값, 특정 요소의 위치, 평균, 포함여부 등...








CH10_Class
==========================================
코틀린에서 사용하는 Class에 대하여 학습한다.

- 코틀린에서 클래스를 만들고, 해당 클래스의 객체를 생성하는 방법

-> Class 내에서 val로 만든건 수정 불가능, var로 만들면 수정 가능










CH11_Constructor
===========================================
코틀린에서의 생성자에 대하여 학습한다.


- init 블럭
- 생성자, 그리고 생성자의 오버로딩

- 코틀린의 생성자를 만드는 독특한 방법 (TestClass13 참고)
-> 코틀린에는 주생성자(또는 대표생성자, 디폴트)와 보조생성자가 있다.
--> 자바에는 없는 독특한 생성자!

---> 참고로 클래스에 쓸 내용이 없으니 중괄호 생략도 가능하다!

- 주 생성자를 만들고 보조생성자를 사용하고 싶을때...







CH12_Extends
============================================
코틀린의 상속에 대해 학습한다.


- 클래스를 상속하는 방법...
-> class ~~ 로 클래스를 만들면, 자바에서 final로 만들어지는것과 같다.
-> 따라서 클래스 앞에 open이라는 키워드를 이용한다!


- 부모클래스에 대표생성자가 있는 경우의 상속 방법

- 자식 클래스에도 대표생성자가 있는 경우

































































