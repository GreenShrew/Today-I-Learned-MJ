day 66


오늘은 day 65에 이어 정보수정 파트부터 진행한다.


※ 봐야할것
 mypage 폴더의 mypage.js의 go_cart_delete() 함수
--> 체크박스 처리하는 것 주석내용 봐!



※ 에러
- 페이지 첫 시작시 New Item, Best Item 부분이 안 보인다.
--> 해결! index.jsp 가 시작이 아니라 index.html이 시작이다!

- ProductDao의 getProduct 메소드 SyntaxError 나온다.
-> pseq가 문제인가?
--> 해결! product 테이블을 조회해야 하는 데 member 테이블을 조회하고 있었다!

- ProductDetail의 css가 좀 이상한 것 같은데? 사진이 너무 작게 나온다.
--> 해결!


- 메인 페이지에 New Item 부분 링크 안 걸려있다.
-> 내가 쓰다가 누락한거일듯.
-> index.jsp 파일을 참고하자.


----------------------------------- 정보수정 시키기

- updateForm에서 정보수정 버튼을 누르면 go_update() 스크립트로 이동, 비밀번호는 적었는지 등을 확인하고 스크립트 내에서 shop.do command memberUpdate로 submit 한다.

--> 위 커맨드를 받아서 MemberUpdateAction 클래스로 이동

--> MemberUpdateAction 클래스 작성
역할은 전달된 모든 parameter들을 Dto 에 넣고, Dao의 updateMember 메소드를 이용하여 DB에 저장
--> 정보가 수정되었다면 현재의 session 값을 수정된 내용으로 면경시킨다.






-------------------------------------- 상품에 정보 넣기 

§ 사진 14

- 메인 페이지에 나열된 상품의 사진을 누르면 해당 상품의 정보를 나타내는 페이지를 제작한다.

--> 이미지에 링크를 건다. 클릭시 shop.do의 command productDetail로 이동하는데, 이동하면서 해당 상품의 상품번호를 함께 가지고 이동한다.
--> 왜냐하면 해당 상품의 정보를 긁어와서 웹 페이지에 표시해야하기 때문에.

----> ProductDetailAction 클래스 생성
 역할은
1. 전달된 상품번호로 상품 내역을 조회한다. Dao의 getProduct 메소드 이용.
2. 조회된 상품 정보를 request에 담고, productDetail.jsp로 이동시킨다.



------> product 폴더에 productDetail.jsp 생성
 역할은 ProductDetailAction에서 받아온 상품 내역을 웹에 출력.
------> 다만, 이번에는 sub_img와 sub_menu를 member 폴더에서 끌어와서 쓰지 않고 새로 만들어 새로운 이미지가 출력되도록 만든다.





----------------------------------- 상품 페이지의 좌측의 메뉴 동작시키기

§ 사진 15
상품등을 보는 화면의 상단 카테고리 메뉴와 좌측 서브메뉴에는 몇가지 선택 가능한 메뉴들이 생긴다. header.jsp를 보면 command category로 이루어진 내용이다.
 이걸 클릭하면 해당 상품종류의 상품들이 나열되고, 클릭하면 상세 정보로 넘어가도록 만든다.

--> 보내진 kind에 따라 어떤 상품의 페이지로 이동할지 결정하도록 만든다. 그리고 페이지로 이동했을 때 해당 상품이 나오도록 데이터를 DB에서 조회하여 가져올 수 있도록 한다.
--> ProductDao의 메소드 selectKindProductList를 이용한다.

----> 가져온 데이터를 가지고 productKind.jsp로 이동시킨다.


----> productKind.jsp 제작
 리스트를 주루룩 쓰고 리스트에 shop.do로 command  productDetail과 상품번호 pseq를 가져가는 링크를 건다.
 클릭하면 상품 상세정보로 이동하도록 만들었다.




-------------------- 상품 상세정보에서 장바구니 담기


※ 주의! 장바구니 추가(insert)의 대상은 cart 테이블, 장바구니 조회(select)의 대상은 cart_view이다!



- productDetail.jsp에서 장바구니 담기 버튼을 누르면 go_cart() 스크립트가 실행된다.
--> 버튼을 누르면 상품 번호와 수량이 같이 간다.
--> 구매자 정보는 로그인된 세션을 이용하면 된다.

----> 장바구니 정보를 저장하기 위한 Dto 파일을 만들어야한다!
----> Dto 패키지에 CartVO를 만든다!
※ 단, cart 테이블이 아니라 cart_view 테이블을 기준으로 변수를 지정해야한다! cart_view에는 cart 테이블에 있는 변수들도 포함하므로 문제 없다!

----> 또한, 장바구니 페이지에서 필요한 동작들을 제작하기 위한 Dao도 생성한다.


------> mypage.js에 go_cart 스크립트 제작
 수량 입력 확인, 그리고 확인 되었다면 shop.do 로 command cartInsert로 보낸다.

------> CartInsertAction 클래스 제작
 역할은 
1. cartVO에 전달 파라미터를 넣고, cart에 레코드를 추가한다.
2. 추가한 후에, 카트 리스트를 조회해서 cartList.jsp로 이동하도록 shop.do?command=cartList로 forwarding한다.

장바구니 추가 버튼을 누를때와, 내 장바구니 보기 버튼을 누를 때 장바구니 페이지로 이동할 수 있도록 만든다.

------> insertCart 메소드를 이용해 CartInsertAction에서 보내진 카트 리스트 페이지에 보여줄 내용을 DB에 저장한다.


--------> 그리고 shop.do에 command cartList 로 CartListAction클래스로 보낸다.

--------> CartListAction 클래스 제작
 역할은 로그인 유저의 아이디로 미처리된 카트 테이블의 내용을 조회해서 리퀘스트에 담고 cartList.jsp로 forwarding한다.

--------> Dao의 selectCart 메소드를 이용하여 id로 조회하여 해당 회원이 미처리한 장바구니 내용을 조회해 가져온다.

----------> cartList.jsp로 가져갈 내용은 유저의 카트 물건들과 이것들을 모두 구매했을 때 총 구매 금액이다.



§ 사진 16

--> mypage 폴더에 cartList.jsp 제작
--> mypage 폴더 안에 들어갈 웹 페이지에 include 될 새로운 sub_img.html과 sub_menu.jsp를 만든다.
--> sub_menu.jsp로 만든 이유는, 내용에 한글이 들어가 meta태그를 이용해 인코딩을 해야하기 때문이다.
----> sub_menu.jsp 에 <meta charset="UTF-8"> 를 사용한다.

------> cartList.jsp에 상품명, 수량 등의 내용이 나오도록 하고, 체크박스를 이용해 체크한 내용들을 삭제하거나 구매 가능하도록 만들게 한다.
------> 장바구니에서 삭제하는 스크립트 : go_cart_delete()
------> 장바구니 내용을 구매하는 스크립트 : go_order_insert()

※ 체크박스에는 각 상품마다의 번호가 걸려있다. 삭제하기 버튼을 누르면 체크된 번호만 배열의 형태로 스크립트에 보내진다.
자바스크립트에서 jsp 페이지 내에 있는 같은 name의 두개이상의 입력란들은 모두 배열로 인식된다.
※ submit은 주문하기 버튼에 반응한다.


--------> go_cart_delete() 체크박스 처리하는 것 주석내용 봐!
--------> 스크립트에서 shop.do command cartDelete로 CartDeleteAction클래스로 보낸다.



--> CartDeleteAction 클래스 제작







































































