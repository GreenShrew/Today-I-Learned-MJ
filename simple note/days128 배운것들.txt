days128 배운것들

node.js에 mysql을 연동하는 법에 대해 다루고 sns 프로젝트를 시작한다.


※ templet 에러 뜨는데 뭐지?
app.js의 상단에 nunjucks 사용환경 구성 이게 문제인가?
-> 아니면 routers에 users.js 가 문제인가? 여기서 에러 루틴이 있는 라우터로 이동시키는 것 같은데..
--> router.get('/', async (req, res)=> 여기의 문제인가?
---> 내 생각에는 위에 있는 라우터 내부에 findAll을 전부 작성을 안 해서 인 것 같기도 하고...



npm12 - DB에 연결하기!
게시글과 코멘트를 달 수 있는 페이지 제작
===========================================
시퀄라이즈 = sql 문을 넣어서 DB와 연결하는 모듈
mysql2 = mysql과 연결하기 위한 모듈


- config 폴더에 config.json 폴더를 오픈한다.
-> DB의 연결 상태를 개발, 테스트, 배포 셋으로 구분한다.

--> 여기서 development 를 건드린다!
password와 database를 mysql에 맞추어 adminuser과 어제 만든 스키마 이름인 nodejs 로 변경한다.



- models 폴더의 indes.js 파일을 열어본다.
-> 개발하면서 필요할 것 같은 것들을 미리 준비해준 파일이다...
--> 당장 지금 필요 없는건 주석처리 했다
---> 설명을 주석으로 조금 달아두었다.



- 게시글과 코멘트를 달 수 있는 페이지를 제작할것이다.
-> 앞서 배운 내용을 잘 생각하자!

- 라우터들을 종류별로 분류할 routers, html 파일을 모아둘 views, 업로드될 이미지나 내용을 넣을 public
-> 셋의 폴더를 만든다.



- models 폴더 아래에 user.js 파일을 만든다.
-> 여기서는 데이터베이스의 환경 구성, 테이블 모델을 제작한다.
--> 그리고 제작한 내용을 exports 해서 index.js에서 사용한다.



- user.js (user 모델을 설정할 js)
-> User 클래스를 만든다. 데이터베이스의 테이블을 만들기 위한 클래스이다!
--> 주석 보고 쭉 봐! 클래스를 만드는 구조, 함수엔 뭐가 들어가는지, 테이블의 필드는 어떻게 나열하는지 알려준다.

※ 첫번째 필드 : id 필드는 따로 기술하지 않아도 자동 증가 필드로 추가된다.


- comment.js (comment 모델을 설정할 js)
-> user.js와 같이 만든다.

※ 정리!
1. 클래스가 만들어진다.
2. 그 안에 init, associate 두개의 static 메서드가 만들어진다.
3. init 메서드에는 테이블의 각 필드 내용과 테이블의 옵션들이 멤버 형식으로 정의된다.
4. associate에는 테이블간 관계 설정이 쓰인다.



※ 참고로 외래키 설정시 필드는 따로 기술하지 않고, 외래키에서 설정함과 동시에 자동 생성되도록 한다!
-> Sequelize의 편리성!!


# user, comment 간의 설정을 하는 방법! 을 주석으로 써놨다..





- indes.js 로 돌아와서..
-> 만들어둔 모델을 require 하고, 
-> require 한 user 모델과 comment 모델도 db에 담는다.
-> 그리고 모델 객체를 초기화하는 함수와 관계 형성 함수를 실행한다.
-> 마지막으로 정보를 담은 db를 exports 한다.





- 이제 이들을 사용할 app.js를 만든다.
-> 데이터 베이스를 연결할것이다!
--> 역시 주석과 코드를 잘 보자.

sequelize.sync({force:false})
.then(()=>{console.log('데이터베이스 연결 성공')})
.catch((err)=>{console.error(err);});

---> 그리고 npm start로 서버를 시작해보자
---> 연결이 잘 됐다면 터미널에 찍어둔 사진처럼 나올 것이다.
---> 테이블이 만들어짐!


- mysql workbench로 가보자!
-> comment 와 users 테이블이 만들어진것을 확인할 수 있다. (사진 있다.)
--> 만약 여기서 테이블을 drop 하고 다시 app.js에서 서버를 실행시키면 새로이 만들어진다.
sequelize.sync({force:false})
---> 다만 테이블이 있는 상태에서 실행시 위 코드에서 force:false로 설정했으므로 강제로 다시 생성하지는 않고 있던 테이블을 쓴다.




- routers 폴더에 index.js, users.js, comments.js 파일을 제작한다
-> 그리고 app.js로 돌아가서 위에 만든 라우터 파일 셋을 require 한다.
--> app.js에서 에러처리 미들웨어도 제작한다.



§ 사진 03
- index.js에 라우터를 만든다.
-> 데이터베이스 조작(insert, update, delete, select)를 위해 위에서 만든 User와 Comment를 require 한다.

-> 이 작업을 users.js, comments.js에도 해준다.
-> 그러면 데이터베이스 연결에 성공한다!

--> 사진 03은, index, users, commens 에 내용이 없는데 require을 해서 에러가 나는 모습이다. 이 셋에 내용을 추가하고 서버를 다시 실행시켰더니 에러가 사라졌다.





- 다시 index.js
-> 최초 페이지 라우터 '/' 를 제작한다.

--> views 폴더에 index.html 파일을 만든다.
--> index.html 에 DB의 내용을 조회해서 출력할것이다.

---> Spring에서는 해당 데이터를 조회해서 보내주는 방식으로 띄웠다.
---> 하지만 Node.js에서는 axios가 있다! 이를 이용하여 웹을 띄운 상태에서 데이터를 조회하고, 이 데이터를 웹에 불러올 수 있다!



- index.html에 사용자 내용, 댓글을 표시하는 페이지를 만든다.
-> 그리고 아래 script를 추가한다. (axios와 sequelize.js)
--> 이 스크립트는 sequelize.js에 연결되어있다. (주석 확인)


- sequelize.js
-> 여기에서는 index.html에서 submit 버튼을 누르면 form의 id가 user-form 인 내용이 넘어오는 것과, 역시나 submit 버튼을 누르면 form의 id가 comment-form 인 내용이 넘어오는 것을 처리해야 한다!

--> 해당 내용에 대해서는 차례대로 보며 주석 확인

---> app.js에서 '/users'는 usersRouter, 즉, ./routers/users, routers 폴더 아래의 users.js로 이동한다.


※ 현재까지의 이동 경로
index.html의 스크립트 -> sequelize.js의 회원추가 이벤트 실행 -> app.js의 post의 '/users' -> routers 폴더의 users.js


- routers의 users.js
-> sequelize.js에서 전달된 데이터를 이용해 레코드로 추가
--> router.post('/', async (req, res, next)=>{ } 회원을 추가하는 라우터이다

---> 작업이 끝나면 sequelize.js로 되돌아가게 만들었다.



- 다시 sequelize.js에서
-> 레코드에 회원을 추가했으니, 페이지에 회원 목록을 전부 띄울 수 있도록 모든 user 를 조회하는 getUsers() 메서드를 제작한다.
--> 아래쪽에 getUsers() 함수 제작함...

---> get 방식으로 '/users' 라우터를 통해 모든 사용자 정보 조회 후 저장
const res = axios.get('/users');
---> 결과를 사용하기 위하여 변수를 만들고 데이터를 추출
const users = res.data;

----> users에 있는 user들을 하나씩 user 변수(함수의 매개변수)에 넣으면서 인원수만큼 괄호 안의 익명함수를 반복실행한다.
users.map(function(user){ }


- 다시 router의 users.js로!
-> get 방식의 '/'을 만든다! 모든 user를 조회하는 라우터를 만든다.

--> 그 전에 아래쪽에 주석으로...

#2. 일반 조회 (모든 필드, 모든 레코드)
#3. 일부 필드만 조회 (select name, married form users)
#4. 일부 필드 & 일부 레코드(where 조건) 조회
#5. 레코드 정렬 방법!

에 대해 주석으로 정리해놨다!





- 이제 sequelize.js에 가서 댓글 추가를 만들어본다.
-> 근데 이번에는 댓글 작성자에 대한 정보를 User 테이블에서 가져와야한다!
-> comments.js에서 그냥 조회해서 보내면 숫자번호 id가 나와버린다!
--> Join을 이용한다!


- routers에 comments.js
-> 조인 방법 주석으로!


































































































































































































































