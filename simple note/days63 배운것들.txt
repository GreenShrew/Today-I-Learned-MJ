day 63

오늘은 WEB10 프로젝트에 파일 업로드 기능을 추가했다.
그리고 작은 쇼핑몰을 만들기 위한 준비를 하였다. (DB 구축)



※ 궁금한거!

- sql에서 cascade은 무엇까지 지우는걸까?
--> 무엇을 삭제하고, 무엇까지 삭제하는지 sql 명령들을 찾아보자.









※ 확인할거

- WEB10에서 게시글 등록 페이지 가운데 정렬 안 되어있고, 등록 후 메인 페이지로 돌아가지 않는다.
--> 다만 글의 등록과 이미지는 잘 추가된다.
----> 해결! 메인 페이지로 돌아가는건 순전히 렉 때문이었다!
------> 정렬 문제는 어떻게 해결하지?



- 게시글의 수정시 사진이 수정되지 않는다!
--> dao의 updateBoard 메소드의 sql 문제인 것 같다.
--> java.sql.SQLSyntaxErrorException: ORA-00933: SQL command not properly ended










※ WEB 10의 프로젝트에도 파일을 업로드를 추가


------------ 업로드 기능 만들 준비

우선 WEB11의 lib 폴더 안의 cos.jar 파일을 복사해온다.
--> 파일을 업로드 하기 위해 필요한 요소

----> 그리고 webapp 폴더에 images 폴더를 생성한다.

------> board 테이블에 이미지파일의 제목을 저장할 컬럼을 추가한다. 만들면 전부 null로 채워진다.

--------> dto 파일에서 위에 만든 컬럼에 대한 변수를 getter setter 생성한다.






------------ 게시물에 사진 칸 만들기

- 우선 게시물을 누르면 사진이 나오도록 만든다.
--> 다만 아직 업로드된 사진이 없는 게시글은 noname.jpg 파일이 웹에 출력되도록 한다.
----> images 폴더 안에 noname.jpg 파일을 넣는다

------> boardView.jpg에서 내용이 적히는 칸 옆에 이미지를 넣을 자리를 만든다.





------------ 게시글 쓸때 이미지 업로드 기능 넣기

- 우선 boardWriteForm.jsp 에서 form 태그 안에 enctype="multipart/form-data" 를 꼭 넣어주자!

--> 내용이 들어가는 tr태그 아래 파일을 업로드 하는 버튼을 넣을 공간을 만드는 tr 태그를 만든다.

----> 실제 이미지 업로드를 하는 내용은 Action 패키지 폴더의 BoardWriteAction을 통해 작동하도록 만든다.

------> 파일이 저장될 서버 내의 경로(이미지의 실제 경로)를 얻는 동작이 필요하다.

--------> request로 처리하던걸 MultipartRequest로 만든 객체 multi로 처리한다.




----- BoardDao의 메소드들 수정

-(필수) BoardDao의 insertBoard 메소드를 수정한다.
--> sql문에 ?를 하나 더 추가하고 필드명을 늘린다. 추가한 자리에는 getImgfilename을 넣을 수 있도록 한다.


-(필수) getBoard로 데이터를 가져올때도 이미지파일의 제목을 가져오도록 해야하기 때문에 이 또한 수정한다.


- selectBoard에도 getBoard와 같이 데이터를 가져올 수 있도록 수정한다.
 다만 굳이 없어도 될 수 있다.


------- boardUpdate 수정

※ form 태그에 enctype="multipart/form-data" 필수로 추가!

- 게시글을 수정할때도 사진을 업로드할 수 있도록 만든다.
--> 내용 아래 이미지 파일을 업로드 할 수 있는 공간을 만든다.

----> BoardViewAction 클래스 수정



WEB10은 여기서 종료

===========================



새로운 Dynamic Web Project를 생성한다.
이름은 WEB12_ShoppingMall.
--> 지금까지 배웠던 내용을 총 망라해서 만들 것이다.
----> 어것저것 하면서 어느 부분에서 배웠던 내용인지 확인하자!

※ 쇼핑몰 페이지는 대략 이러한 구성과 DB를 가지고 있다는것을 파악하자.




※ 이번에는 header.jsp, footer.jsp를 따로 만들어서 include를 사용하서 페이지를 만들것이다.
footer와 include에 대해 다시 한번 보자!



- 쇼핑몰을 만들 것이다. 다만, 단일 상품 하나(신발)만 파는 쇼핑몰이다.
 신발의 종류(부츠, 힐, 스니커즈 등등의 카테고리 대여섯개를 나눠서 만들 예정)

--> 필요한 reference, liberary 파일 (jar 파일)을 lib 폴더로 복사해온다.

----> 프로젝트의 properties - project facets로 가서 자바 버전과 톰캣 서버를 설정한다.




------> sql.sql 로 DB를 구축한다. 근데 이번에는 이것저것 많기 때문에 간단하지 않다! 우선 테이블만 여러개를 만들어야 한다!
확실하게 만들고 넘어가야한다!!!!!!!
※ sql 파일에 주석들을 잘 보자.


#1. member 테이블 : 상품을 구매하기 위해서 회원으로 가입한 구매자들 테이블.
#2. product 테이블 : 판매할 상품 테이블.
#3. worker : 쇼핑몰 관리자 테이블.
#4. cart : 장바구니 테이블.
#5-1. orders : 주문자 아이디, 주문번호, 주문일자를 담은 테이블.
#5-2. order_detail : 무엇을, 몇개를 주문했는지 자세한 내용을 담은 테이블. orders 하나에 여러 order_detail이 만들어질 수 있다.
#6. address : 상세 주소를 담은 테이블. 옛 주소를 나타낼 수 있는 테이블이다. <- 카페에서 데이터를 받아 DB에 저장
#7 qna : QnA 게시판의 테이블. 질문 한번에 답변 한번.

큰 대형사이트가 아니므로 이정도만 만든다.
이하 샘플 데이터를 추가해준다.
또한 cart 테이블과 상품을 엮는 view와 같은 view도 여럿 만들어준다.
※ view는 미리 안 만들어두면 길고 복잡한 명령을 계속 써야한다!


※ 테이블을 만들고 조회까지 한번 해주자! 간혹 테이블을 안 만들고 진행할 수도 있으니깐!

※ address 테이블
-> 현재 도로명주소가 생겼는데, 이건 옛날 주소의 10배정도 이상 데이터가 늘어나서 다운로드 하기 힘들어졌다.

※ 신상품과 best 상품 메인진열을 위한 view에서...
 best 상품을 보여주는 view는 조건을 걸어서 이 조건을 만족하는 몇가지 상품을 보여주도록 갱신하게 만든다.




초반 DB의 구성은 여기까지이다.

--------------------------------------------------

하지만 아직 DB 설정은 끝나지 않았어.



- 주소명(구 주소) 데이터 얻기

 츄리닝 카페에서 '주소 목록'이라는 게시물의 zip.sql을 다운로드 받는다. 다운로드 받은 파일은
--> 학원에서는 d 드라이브에 넣는다.
--> 내 컴퓨터에는 바탕화면에 넣는다. (아래 cmd에서 명령이 안 먹혀서 d 드라이브에 넣어서 진행했다.)
----> 참고로 이 파일의 내용은 죄다 insert 문이다!
----> 이걸 이클립스에서 열어서 적용하면 하루죙일 걸린다! 따라서 cmd를 이용한다.



- cmd창 오픈 - sqlplus - scott -tiger - (여기는 저장한 드라이브에 따라 다르다) @d:\zip.sql

--> 이 후에 select * from address; 명령을 이용해 결과를 보면 500개의 레코드를 볼 수 있다. 이클립스의 SQL Results가 나타낼 수 있는 Result의 갯수는 500개이다.
----> select count(*) from address; 명령을 사용해서 확인하면 26455개의 레코드를 가지고 있다고 나온다.




-----------------------------------------------------

※ 앞선 예제에서는 Dbman이라는 클래스를 만들고 로그인을 하거나 글을 수정하거나 등등의 메소드를 작동시킬때마다 DB에 연결하고 끊고 동작을 반복했다.
 한사람만 이 동작을 하면 무리가 없지만, 여러명이 동시에 DB에 연결하고 끊고를 반복하면 DB에 과부하가 생긴다!

--> 따라서 이를 가볍게 만들어보자! 명령은 줄일 수 없다! 차라리 미리 일정 갯수의 연결 객체를 만들어놓고 가져다가 쓰도록 한다!
----> 연결 객체는 서버에 저장한다! 


- 서버에 미리 연결 객체 만들기

 Server 폴더 - Tomcat v9.0 Server at.... 폴더 - server.xml 파일 오픈 - 하단에 Design, Source 탭에서 Source를 선택

--> 소스코드의 맨 아래로 가면 현재 tomcat이 운영하는 서버들이 나온다. 여기서 WEB12의 정보가 담긴 Context 태그를 수정한다.

----> Context태그의 닫힘 태그를 수정한다.
----><Context .... /> 에서 / 삭제 후 </Context> 생성
------> 츄리닝 카페에서 하단의 코드를 Context 태그 안에 넣는다.
------> day 64 의 게시글 이름 'DBCP Resource 내용' 이다.

<Resource auth="Container" driverClassName="oracle.jdbc.OracleDriver" maxIdle="10" maxTotal="20" maxWaitMillis="-1" name="jdbc/myoracle" password="tiger" type="javax.sql.DataSource" url="jdbc:oracle:thin:@127.0.0.1:1521:xe" username="scott" />

--------> 이 안에 속성 'maxTotal="20" ' 는 20개의 객체를 미리 만들겠다는 의미! 이걸 수정하면 미리 만들 객체의 갯수를 수정하는 것이다!

※ 참고 : Ctrl + shift + f : 이클립스 자동줄바꿈 단축키


server.xml은 닫기.

------------------------------



이번에는 페이지의 시작(index)를 html으로 만들 것이다.

그런데 html은 jsp가 아니므로 request를 보낼 수 없는데?
--> meta 태그를 추가함으로서 이를 해결한다.

※ 예전에 html4 에서 사용한 방식이다. 다만 요즘에는 그냥 jsp파일을 만들어 sendRedirect로 보내주는게 더 좋긴 하다.




---------------------------------- 이런저런 패키지와 서블릿 생성



src/main/java에 com.ezenac.controller 패키지 생성
--> 패키지 안에 ShoppingMallServlet 서블릿 생성. mapping은 shop.do














