days130 배운것들 영상 있음...
실행 시키면서 사진 찍어가면서 하자!


오늘은 day129에 이어 기본적인 게시판을 만든다


※ day 129 에서 임시로 insert 하는 아이디가 insert가 되지 않는다...
insert into nodejs.member(userid, pwd, name, phone) values('scott', '1234', '홍길동', '010-1234-1234');

※ 참고로 created_at 필드에 default값을 now()를 넣어주어야 한다! 다른 테이블도 동일!





npm13
==============================================
- CSS를 첨가한다.

-> public 폴더 아래에 board.css 파일 생성



- 회원가입 기능을 제작할것이다.
-> routers의 members.js에 /joinform 을 만든다.

--> 해당 라우터에서는 memberInsert.html로 이동시킨다.

---> html을 만들면 회원가입 페이지를 볼 수 있다.


- memberInsert.html에서 쓸 javascript 파일을 만든다.
-> public 폴더에 insertmember.js 파일을 만든다.

--> 그리고 회원가입 페이지에서 전달된 정보를 받아 members 라우터 파일에서 /insertMember로 레코드 삽입을 요청한다.





- 회원 정보수정 기능을 만든다.
-> 여기서는 로그인하고 있는 회원의 정보를 가져와서 이를 value 값으로 깔고 들어간다!

--> main.html에서 회원수정 버튼을 보면, /updateForm 으로 요청하면서 id값을 가져간다.
--> 여기서 id값은 언제나 바뀔 수 있으니 이를 와일드카드로 받아야한다.

---> member.js에 '/updateForm/:userid' 요청의 라우터를 만든다.
---> 여기서 userid로 검색해서 검색결과를 member 라는 이름으로 같이 memberUpdateForm.html로 이동 전송 시킨다.

----> 그리고 memberUpdateForm.html에서 사용할 스크립트인 updatemember.js를 public 폴더에 제작한다.
----> 여기서 /update 요청을 통해 회원의 정보를 수정하게 한다.
----> 그리고 /boards 요청으로 보내 게시판으로 돌아가게 만든다.


- routers의 /update
-> 전송된 값으로 회원 정보 수정
->수정된 회원을 다시 검색 저장
-> 저장된 값으로 세션값 갱신
-> 라우터 종료

--> 이렇게 만든다.




- 로그아웃 라우터 /logout 도 만든다.





- 게시물을 읽어오고, 쓰는 기능을 제작한다.
-> 레코드를 하나 미리 넣어둔다.
insert nodejs.boards(subject, content, writer) values('게시판 오픈!', '많은 이용 바랍니다', 'scott');

--> 아래 명령은 레코드 삭제 명령
delete form nodejs.boards where id=1;

---> boards.js 에 /boardList 요청을 만든다. 이는 테이블의 모든 내용을 id로 내림차순 조회해서 json으로 보내는 라우터이다.

그러면 게시판 메인 화면에 작성한 게시물이 보인다.




- 파일 업로드 기능을 만들것이다.
-> 근데 multer를 app.js에서 설정하지 않고, routers의 boards.js 에서 설정한다!
-> app.js에서는 사용하지 않기 때문이다. 직접 multer를 사용할 라우터 파일에서 필요한 모듈을 require하는게 효율적일수도 있다!

--> boards.js에서 multer를 설정할 때, 파일의 업로드를 위해 public 폴더 아래에 upload 폴더를 만들도록 설정한다.
--> public 폴더 안에 만드는 이유는, static 폴더(public 폴더) 안에서 이미지를 로딩하기 위해서이다.
--> 만약 public 폴더가 아니라 별도의 위치에 upload 폴더를 위치시칸다면, static 폴더 설정이 하나 더 추가되어야 하기 때문이다!



- 이번에는 게시글 작성 기능을 만든다.
-> boards.js에서 /writeForm 요청을 만든다. 이는 게시글 작성 페이지로 이동시키는 라우터이다.
--> 근데 글을 쓰는 대상은 현재 로그인한 유저이다. 따라서 session에서 loginUser를 불러와서 저장하고, 이를 writeForm.html로 전송한다.

---> views 폴더에 writeForm.html을 생성한다.
---> 그러면 글쓰기 화면이 나온다.

----> writeForm.html에서 쓸 javascript 파일을 만든다.
----> public 폴더에 boardWrite.js 를 만든다.

-----> 여기서는 writeForm.html에서 form 태그의 id가 write-form인 태그의 submit이 눌리면 이벤트리스너가 실행된다.
-----> formData에 image, subject, writer, text 데이터가 들어가고, 이를 post 방식의 /writeBoard로 보내서 레코드를 추가하게 만든다.
-----> 그리고 /boards 요청으로 게시글 목록으로 이동시킨다.

------> 그리고 routers의 boards.js에서 /writeBoard 라우터를 만든다.
------> 여기서는 파일 업로드, 게시글 레코드의 insert 기능을 만든다.
------> 만들어둔 upload 라는 객체에 파일을 업로드하고, 함수 내에서 board 변수에 넘어온 데이터를 이용해 Board.create로 레코드를 생성하여 insert 한다.

-------> 여기까지 하면 게시글 쓰기와 upload 폴더에서 업로드된 파일을 확인할 수 있다.




- 게시글 상세보기 기능을 만든다.
-> main.js에서 tr 태그를 만드는 map 사이에 이벤트 리스너를 추가한다.
-> 해당 tr 태그를 클릭시 boards의 /boardView 요청으로 해당 게시글의 id를 가지고 이동한다.

--> boards.js 에서 /boardView/:id 라우터를 만든다. 게시물의 id값은 어느 값이 들어올지 모르니 와일드카드를 사용한다.
--> 여기에서는....
1. 게시물 검색을 하고
2. 검색한 게시물의 조회수를 추출해서 +1 연산을 하고
3. 연산 결과를 게시물에 update 한다.
4. 그리고 다시 게시물을 검색해서
5. render로 전송한다(로그인 유저 정보와 현재 시간)

---> 그리고 views 폴더에 boardView.html을 만든다.




- 이제 게시글 상세 페이지에 댓글이 나오도록 한다.
-> boardView.html의 하단에 댓글 자리 만든다.
--> 그리고 이번에는 스크립트를 js 파일에 따로 빼지 말고 아래에 작성해보았다.

---> mysql을 이용하여 댓글 레코드를 하나 생성한다.
※ 참고로 created_at 필드에 default값을 now()를 넣어주어야 한다! 다른 테이블도 동일!
insert into nodejs.replys(writer, content, boardnum) values('scott', '댓글내용', '3); 이게 맞나? 영상 찾아봐.. 

----> 이제 boards.js에 /replyList/:boardnum 라우터를 만든다.
findAll로 해당 게시물 번호의 모든 댓글을 조회해서 보낸다.



-----> 그리고 댓글 추가삭제를 만든다.
-----> 댓글 추가삭제에 대한 스크립트도 boardView.html의 하단에 만든다.
-----> /addReply 로 요청을 보낸다.


------> 댓글의 추가, 삭제 한 뒤에 다시 댓글을 조회해서 게시글 상세 페이지에 보여주어야 한다.
------> 게시글을 조회하는 getReplys 메서드를 boardView.html의 스크립트 부분에 만든다.

-------> 그리고 댓글의 삭제 기능을 만든다.
-------> /deleteReply 요청으로 보낸다.




- 게시글 제목 옆에 댓글 갯수를 나타내도록 한다.
-> main.js에 작성한다.








