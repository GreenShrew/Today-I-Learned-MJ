day 64


※ 주의사항
1. shoppingmall 사진들 폴더 확인해가면서 작성

2. header, footer를 만들면 jsp 파일 내의 모든 태그를 밀어버리고 내용을 추가하게 된다.


 오늘은 쇼핑몰 계속


※ 궁금한것
- nav 태그는 뭐였지?
- clear:both : float의 left right 요소를 싹 지운다.
- fmt:formatNumber : ?


※ 봐야할것

- 로그인 창에 css 잘못 썼는지 회원가입 버튼이 하얗다?
--> 해결! css 이름을 잘못 써서 css 적용이 안 됐던 것




------------------------------------- 서블릿 제작

- ShoppingMallServlet 내용 제작
예전에 했던것처럼 ActionFactory 만들어서 객체를 조합하고, Action(인터페이스) 만들어서 execute 메소드 제작.


--> com.ezenac.controller.action 패키지에 Action 인터페이스 제작. 추상 메소드 execute를 만든다.

--> com.ezenac.controller 패키지에 ActionFactory 클래스 제작. 싱글톤으로 만들어 getInstance() 메소드 제작.
그리고 Servlet에서부터 command를 받아 알맞은 동작을 시켜주기 위한 getAction() 메소드 제작.

----> IndexAction 클래스 제작.
 index.jsp로 이동시키는 동작. 신상품과 베스트상품 4개씩을 조회하고, 이를 request에 담아서 index.jsp로 이동시킨다.


------> index.jsp 제작 (day63에서 만들었던 index는 html이다.)
웹 페이지의 상단에는 내용이, 아랫쪽에는 사업자등록번호라던지 회사 전화번호라던지의 footer가 들어간다.
------> 따라서 모든 태그를 지우고 include를 이용하여 제작한다.


--------> index.jsp의 상단 메뉴를 구성할 header.jsp와 하단의 회사정보를 구성할 footer.jsp 제작

--------> header.jsp는 하단의 </body></html> 태그 삭제
--------> index.jsp는 모든 태그를 삭제
--------> footer.jsp는 하단의 </body></html>를 제외한 모든 태그 삭제
세 파일이 한몸인 것 처럼 생각해보자.



※ 즉, header.jsp와 index.jsp, footer.jsp 셋을 위에서부터 순서대로 쭈루룩 이어보면 <html>....</html> 태그로 둘러싸인 하나의 HTML 문서가 완성된다!
--> header에서 시작한 div 태그를 footer에서 닫을 수 있다!



※ include를 쓰면 좋은점
1. 무언가 메뉴판을 바꿀 때 header.jsp 파일만 바꾸면 싹 바꿀 수 있다.
2. 매번 상단에 써야했던 taglib이나 head 태그 사이의 script, link 태그를 상단에 붙일 header.jsp에 단 한번만 쓰면 include를 했을 때 전부 적용된다!
3. 웹 페이지에 같은 내용이 반복되는 경우, 이를 이용하면 매번 해당 동작을 하도록 코딩하지 않아도 된다!



------------> header.jsp 에서 taglib과 script, link 태그를 추가한다.

--------------> wepapp 폴더에 css, member, mypage 폴더를 만들고 각각 shopping.css, member.js, mypage.js 를 만든다.(js 파일을 File을 선택하여 만든다)



---------------------- 페이지에 언제나 들어가는 상단메뉴 만들기

- header.jsp에 만들어서 모든 페이지에 include 시킬 예정이다.

--> 웹 페이지의 상단에는 로고, 주상단메뉴, 카테고리 메뉴 등이 표시된다.

※ 츄리닝 카페에 [days 64] 쇼핑몰 이미지의 두 폴더를 다운로드 받아서 webapp에 각각 폴더를 붙여넣는다.

----> 상단메뉴에서 LOGIN과 JOIN 버튼은 회원이 로그인 했다면 보일 필요가 없는 메뉴이다. 따라서 if문으로 세션이 없으면 보이고, 세션이 있으면 정보수정, LOGOUT 메뉴가 보이도록 한다.


----> 상단 메뉴에서 Heels, Boots 등은 누르면 해당 상품을 나열하는 페이지로 이동한다. 링크로 만들고, command는 여섯 항목 모두 같지만 kind 값을 만들어 그 값을 서로 다르게 지정하여 구분하도록 만든다.



------> 구성이 끝났다면 css를 만든다.
logo와 top_menu가 float로 수평나열되도록 만든다.



- footer.jsp를 작성한다.
--> 그리고 footer.jsp에 적용할 css도 작성한다. 


여기까지가 header와 footer

----------------------------------------------

※ DB의 연결방식이 조금 달라졌다.



 이제 메인 페이지의 내용을 추가한다.
--> 우선 Dao, Dto 클래스를 만들 것이다.
--> 또한 DB에 연결해줄 클래스도 만들 것이다.

--> 상품 하나의 정보를 가지는 객체를 만들어주는 Dto
--> com.ezenac.dto 패키지에 클래스를 만든다. 이름은 ProductVo.
--> Timestamp의 경우 java.sql.Timestamp 를 import 시켜주어야 한다.

--> DB에 접근해 테이블을 수정 및 삭제, 조회 등을 해주는 Dao
--> com.ezenac.dao 패키지에 클래스를 만든다. 이름은 ProductDao
--> 싱글톤 방식

-->DB에 연결해줄 클래스 제작
--> com.ezenac.util 패키지에 클래스를 만든다. 이름은 DBman.
----> 이번에는 day 63에서 server.xml에서 이미 20개의 연결 객체를 만들어두었다.
----> 따라서 이 연결을 얻어와서 사용하도록 한다!
----> 예전에는 Connection 연결하고 driver에 아이디 비번 넣어서 직접 연결했지만, 이제는 이미 연결된 연결객체 하나를 얻어온다!




- index.jpg에서 메인 이미지 시작, 신상품, 베스트 상품을 나열할것이다.
--> IndexAction.jsp에서 신상품과 베스트상품 4개씩을 조회하고, 이를 request에 담아서 index.jsp로 이동시킨다.
----> 이름, 가격, 이미지만 필요하므로 3가지 내용만 가져와서 담는다.

------> 이렇게 dto에 데이터를 저장했으면 웹페이지에 이를 나타내도록 한다.



- index.jpg에서 신상품 항목과 베스트상품 항목을 만들자.

§ 만든 결과는 사진 04




----------------------------------------------------------


이제 로그인 페이지와 기능을 만든다.


- LoginFormAction 생성
--> 역할은 member폴더의 login.jsp로 이동시키는 것.
--> 필요하다면 로그인된 유저는 다시 메인 페이지도 돌아가는 코드를 추가할 수 있다.

- login.jsp 생성
--> 로그인 기능을 가지는 페이지를 만든다.

§ 그림 5번




----------------- 
추가
-----------------

member 폴더에 sub_img.html, sub_menu.html 파일을 만든다.
이 두 파일은 login.jsp 에 include 하는 용도로 사용할 것이다.
따라서 모든 태그를 지워버리고 include될 내용만 쓴다.


sub_img는 로그인 웹 페이지 가운데에 나올 그림
sub_menu는 로그인 웹 페이지 왼쪽에 나올 메뉴들



------------------

이것들을 추가해주고 loginForm에 대한 css를 추가한다.

그리고 member.js에 로그인페이지에서 사용하는 script function들을 작성한다.



-----------------

 아이디 비밀번호 넣고 로그인 누르면 DB에서 정보를 대조하여 회원이 맞는지 확인하고 회원이면 메인 페이지로 보내거나 안 되면 로그인 Form으로 되돌아가게 만든다.

