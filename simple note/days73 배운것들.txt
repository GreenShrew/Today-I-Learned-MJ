day 73


※ 오늘 배운것
day 72에서는 select, insert 기능을 스프링 컨테이너 장치를 이용하는 방법으로 만들었다.
오늘은 지난번에 만든 프로젝트 Sp05의 내용에서 update 기능을 만들것이다.

그리고 Sp06에서 Application Context XML 을 이용해서 Sp5에서 만든 기능을 만들것이다.

-> Sp05에서는 Container에서 미리 인스턴스를 만들어두고, 이를 getter로 인스턴스를 꺼내쓰는 방식을 사용했었다.
--> Sp04에서 배운 방법인가?


※ 에러
Sp06에서 MainClass에서 학생 하나만 검색하는게 작동 안된다.
Dao의 selectOneStudent 메소드에 문제가 있는듯.
왜 null이 나오지?
--> 해결! 테이블을 조회하기만 하고 std에 값을 아예 안 넣고 있었다!


xml 파일에 윗쪽 DB 연결하는 bean 태그 확인해...
뭘 바꾸셨는데 내가 확인을 못 했다..
--> 해결! name을 내가 이상하게 썼었다!


Sp07의 DataBaseManager 에서 close() 메소드에 문제 생긴다.
그냥 Sp07 부분을 전부 한번씩 확인하자.





※ 의문! Service 단계를 왜 넣는가? 이유는 나중에 나올 것이다.




스프링으로 만드는 update 기능
========================= 

☆ MainClass에서 StudentUpdateService.java 클래스의 인스턴스를 얻어서 그 안에서 수정 메소드를 호출하는 방법으로 만든다.


- StudentUpdateService.java 클래스 생성

-> updateStudent(Student std) 메소드를 만든다. 다만 여기서 직접 DB에 연결해서 데이터를 Update를 하는것은 아니다.
-> Dao 클래스에다가 메소드를 만들어서 위의 동작을 할 것.

--> 따라서 StudentDao의 인스턴스를 얻고 Dao의 메소드 updateStudent를 불러온다.

---> 다만, StudentDao sdao = new StudentDao(); 방식으로 Dao를 불러오지 않는다.(이유는 주석에)
---> StudentUpdateService의 생성자를 만들고, SpringContainerClass.java 클래스에서 StudentUpdateService에 대한 인스턴스를 만들고 이를 getter로 불러올 수 있도록 만든다.

----> 만들어진 getter는 MainClass에서 컨테이너 안의 인스턴스를 불러오는 scc.getSus(); 명령에서 사용된다!


-----> 그리고 Dao에 테이블의 레코드를 수정하는 updateStudent 메소드를 완성한다.


여기까지가 Sp05







Application Context XML을 스프링 컨테이너로 사용하기
============================================

☆ Application Context XML 파일을 이용해서 Sp05의 기능을 만들 것이다.
 앞으로 주로 사용하게 될 방법이다.

※ 이전에는 java 클래스로 만든 Container에서 인스턴스를 꺼내쓰는 방식을 사용했었다.


- maven project로 Sp06 프로젝트를 만든다.
- pom.xml에 내용을 추가하고 maven update를 한다.

-> src/main/java에 ezen.student.service 패키지를 만든다. (클래스들이 들어갈 예정)
-> src/main/java에 ezen.student.dto 패키지를 만든다.
-> src/main/java에 ezen.student.dao 패키지를 만든다.
-> src/main/java에 ezen.student.main 패키지를 만든다.
※ 이번에는 container 클래스가 없다! 여기서 했던 기능을 Application.Context.XML 패키지의 xml 파일에서 만들것이기 때문이다!




§ 우선 Sp05와 같은 동작을 하도록 Service 클래스들과 기타 등등의 내용부터 만든다.

--> service에 이전에 만들었던 클래스들을 만든다.
--> service 패키지에 InsertService 클래스 생성. (테이블에 학생 레코드 삽입)
--> dao 패키지에 StudentDao 클래스 생성.
--> dto 패키지에 Student 클래스 생성.
※ 우클릭 - Source - Generate Constructor using Fields 를 사용하면 변수들을 전부 사용하는 생성자를 만든다.
--> dao에 insertStudent 메소드 생성.

--> service에 selectAllStudent 클래스 생성 및 dao에 selectAllStudent() 메소드 생성.

--> SelectOneService 클래스 생성 및 dao에 selectOneStudent(sNum) 메소드 생성.

--> UpdateService 클래스 생성 및 dao에 updateStudent() 메소드 생성.



여기까지 구색은 만들었다.
이제 이를 Spring Container를 이용하여 인스턴스를 꺼내쓰도록 할건데, 이를 xml 파일을 이용하여 만들것이다.


-> src/main/resources 에 xml 파일을 만든다. 이름은 applicationContext. 의존주입!

--> 이제 MainClass에서 이들을 꺼내쓰면 된다!
--> 그 전에 sql 파일 만들어서 실습에 사용할 table 생성하자.
--> Sp05에서 사용한 student 테이블의 레코드를 모두 지운다.


---> main 패키지에 MainClass 클래스를 만든다.
---> 배열로 9명의 학생 레코드를 작성한다.
---> 그리고 xml의 bean 파일을 꺼내쓰기 위해 GenericXmlApplicationContext 인스턴스를 만든다.(이하 ctx)
---> ctx 인스턴스를 이용하여 insertService 인스턴스(is)를 만들고, 이를 이용하여 배열로 만든 내용을 테이블에 insert하도록 만든다.


----> 그리고 MainClass 클래스를 아래로 쭉 따라가며 select, update, insert, delete 기능을 만들었다.





DB의 연결정보를 유동적으로 바꾸기
=====================================

Dao의 상단에서 만든
String driver = "oracle.jdbc.driver.OracleDriver";
String url = "jdbc:oracle:thin:@localhost:1521:xe";
String id = "scott";
String pw = "tiger";
이것들은 위의 내용대로 고정이지만, 이를 다 null로 바꾸고 유동적인 DB 연결을 할 수 있도록 만들것이다.


-> StudentDao의 생성자를 만든다.
--> 생성자에 의존주입할 DataBaseConnectionInfo 클래스를 dto 패키지에 만든다.

---> applicationContext.xml 에 DataBaseConnectionInfo에 대한 bean을 추가한다.
---> 그리고 Dao bean에 constructor-arg 태그에 DataBaseConnectionInfo의 id값을 넣는다.







----> EMSInformationService 클래스를 만든다.
----> 그리고 이를 이용하기 위해 필요한 컨테이너를 xml 파일에 만든다.
----> 주목해야할것은, 컨테이너에 어떻게 넣어야 사용 가능한지이다.

----> property 태그를 이용해 각 멤버변수에 초기값을 넣었다.

-----> 이제 만든걸 꺼내 써본다.
-----> MainClass.jave에서 ctx 인스턴스를 이용해 EMSInformationService의 인스턴스 eis를 만들고, eis의 내장 메소드를 실행시켜본다.





다른 예제로 한번만 더 연습
=============================
Sp07 프로젝트를 만든다.


- 실습용 sql 파일 만들기
wordset 테이블을 만든다.

-> com.ezen.word.dao, com.ezen.word.dto, com.ezen.word.service, com.ezen.word.util 패키지 생성


--> Dto 파일인 WordSet 클래스 생성
--> WordInsertService 클래스 생성
--> Dao 파일은 WordDao 클래스 생성. 다만 이번에는 driver나 url 같은 정보는 쓰지 않는다. DataBaseManager 라는 클래스를 만들면서 이 안에다가 적을것이고, 이전에 만들었던 getConnection, close 메소드 또한 여기에다가 만들 것이다.

---> util 패키지에 DataBaseManager 클래스 생성.
---> 여기서는 또 DataBaseUserinfo라는 클래스를 만들어서, 이 클래스 형태의 변수 dbi를 만들고, 이 클래스에서 db에 연결할 정보를 가져오도록 만든다.
---> 그리고 util 패키지에 DataBaseUserinfo 클래스를 생성한다.

---> 의존하고 의존하고 의존하는 형태를 만들었다.














































































































