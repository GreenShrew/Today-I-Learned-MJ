days136 배운것들 영상 있음




days03 패키지를 만든다


CH13_Override
===============================================
상속이 될 클래스의 메서드를 오버라이드 하는 방법

- 상속할 부모클래스는 open으로 만들어야 한다.
-> 상속할 부모클래스의 멤버메서드를 오버라이드 하기 위해서는, 메서드도 open으로 만들어주어야 한다!
--> 그냥 만들면 final 메서드가 되어버려 오버라이드를 할 수 없다!

---> 상속받는 클래스에서는 메서드 이름 앞에 override 를 붙인다.




CH14_Any
================================================
자바의 Object 클래스와 같은 역할을 하는 Any에 대하여 학습해본다.

-> 기본적으로 클래스는 Any 클래스를 상속받고 있다!





CH15_this_super
=================================================
코틀린에서의 this와 super의 용도에 대하여 학습하였다.






CH16_Abstract
===================================================
코틀린의 추상 클래스에 대하여 학습한다.

-> 멤버 메서드의 override에 강제성을 부여하기 위해 사용된다.
--> 물론, 강제성이 있는 메서드와 없는 메서드를 동시에 사용할 수 있다.


- 추상 클래스를 사용하는 방법





CH17_Interface
===================================================
코틀린의 인터페이스에 대해 학습한다.
※ 참고로 인터페이스는, 추상클래스가 할 수 없는 다중 상속이 가능하다!
-> 자바 버전이 높아지면서, 인터페이스에도 override에 강제성이 부여되지 않은 일반 변수와 메서드 선언도 가능해졌다.

- 인터페이스 구현 방법, 사용 방법

-> (영상) 인터페이스를 여럿 상속 받았을때, 여러 메서드를 한꺼번에 오버라이드 하는 법






CH18_Companion
================================================
Companion에 대하여 학습한다.

- 자바에서 static이라는 키워드로 사용되던 것을, 코틀린에서는 companion이라고 한다.

- static과 companion의 차이







CH19_TypeCasting
================================================
타입캐스팅에 대해 학습한다
※ 부모클래스 - 자식클래스간의 타입캐스팅은 앞에서 학습...이라기 보다는 사용했다.

- 자료형의 타입캐스탕

- 부모클래스타입 참조변수에 자식 인스턴스를 담을 수 있다.
-> 이를 '스마트 캐스팅' 이라고 한다.


- 자식 인터페이스가 부모 레퍼런스에 저장되었다가, 다시 자식 레퍼런스에 옮겨지는 경우... 강제캐스팅이 필요!
-> 이는 자바와 코틀린 둘 다 같은 내용!
--> 다만 문법상 표현 방법이 다르다.

---> 코틀린의 경우 옮기려는 자식클래스 자료형의 "다른 변수에 형변환과 함께 옮기는 것" 이 아니다.
---> 자식 클래스의 레퍼런스 변수로 변경시킨다.
---> 자식 클래스 레퍼런스 변수로 값을 옮겨 담는것이 아니라, 저장된 참조값을 놔두고 변수 자료형을 변경해버린다는 뜻이다.



- 코틀린의 강제 형변환 명령 as
- 형변환시 안전한 실행을 위해 형변환 가능 여부를 점검하는 명령 is
※ 참고로 자바에서도 instanceof 라는 코드로 이를 점검했었다.




CH20_List
===============================================
List, Map, Set 에 대한 학습을 한다.









Card, CardDeck - class로 제작한다.
CH21_PlayingCard - 위 두개 클래스를 사용할 메인 함수
===============================================
이번에는 지금까지 배운 내용을 토대로 진행하는 예제이다.
-> 과거 day 14에서 만들었던 내용을 만드는 것이다!








