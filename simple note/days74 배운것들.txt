day 74


§ 오늘 배운것

오늘은 Sp07 프로젝트를 이용하여 Spring Container 연습을 했다.

Spring Container란 무엇인가?
Bean이란 무엇인가?
왜 이것들이 필요한가?

SpringFramework를 사용하는 이유?
1. 인수인계






========================= Sp07 계속

- DB에 실제로 데이터를 넣고 빼고 삭제하는 역할은 Dao에서 진행한다.
-> 의존주입에 의해 DataBaseManager클래스에서 정보를 받아서 연결
--> DataBaseManager에서도 의존주입에 의해서 DataBaseUserinfo 클래스에서 연결정보를 받는다.



시작!

- resource 파일에 appCtx.xml 파일을 만든다.
-> beans 태그에 몇가지 요소가 추가되었다.
--> DataBaseUserinfo 클래스가 bean으로 들어간다. 그리고 property 태그로 초기값을 설정한다.

--> DataBaseUserinfo는 DataBaseManager 클래스에 주입된다
--> DataBaseManager 클래스도 bean에 넣는다.
--> constructor-arg 태그로 생성자에 방금 만든 dbuserinfo(만든 bean의 이름) 데이터를 넣는다.

--> DataBaseManager는 또 WordDao 클래스에 주입된다
--> WordDao 클래스도 bean에 넣는다.
--> constructor-arg 태그로 생성자에 방금 만든 dbmanager(만든 bean의 이름) 데이터를 넣는다.

--> WordDao는 또 WordInsertService 클래스에 주입된다
--> 따라서 WordInsertService 클래스도 bean에 넣는다.
--> constructor-arg 태그로 생성자에 방금 만든 worddao(만든 bean의 이름) 데이터를 넣는다.

--> 이제 ctx로 insertService를 꺼내다 쓰면 된다!




§ 같은 방식으로 글자를 찾아주는 서비스인 WordSearchService 클래스를 만든다.

-> 이 역시 생성자에 WordDao 클래스의 의존주입 받고있다.
--> 따라서 appCtx.xml 파일에 bean을 만든다.




※ 여기까지가 이전에 했던 Sp06 프로젝트까지의 내용이다.
아무것도 의존주입받지 않는 클래스는 property로 초기값을 넣고, 의존 받는 클래스는 주입을 한다.





annotation 을 이용한 bean 자동주입!
==================================================


§ 이번에는 생성자에 자동주입을 시켜주는 constructor-arg 태그를 쓰지 않는다!
 이 경우 주입을 받는 클래스의 생성자 또한 지워야한다!
-> 생성자가 없는데 생성자에 데이터를 주입한다? 에러가 나온다.

--> 그럼 어떻게 Spring Container에 있는 property 태그 안의 DB 데이터는 어떻게 가져오는가?


☆ 자동주입 ☆ -> DataBaseManager.java 에 주석으로 작은 설명이 있다.
 appCtx.xml의 beans 태그의 xsi:schemaLocation 속성에 http://www.springframework.org/schema/context, http://www.springframework.org/schema/context/spring-context.xsd 를 추가한다.
-> 그리고 <context:annotation-config/> 태그를 추가한다.

--> DataBaseManager.java 클래스에서 생성자를 주석처리하고 위에 @Autowired를 쓴다. 그리고 import!
---> 그럼 해당 클래스의 bean을 스프링 컨테이너에서 검색하여, 꺼내다가 자동주입을 진행한다.

☆ 이를 '자동주입'이라고 부른다!





====== 이제 이를 사용해보자!
- com.ezen.word 패키지에 MainClass 클래스를 생성한다.

레코드 삽입 동작
-> 배열을 작성하고, 이를 wordset 테이블에 넣는 insert 동작을 시킨다. 그리고 이를 주석처리한다.

레코드 검색 동작
--> insert된 레코드를 검색해서 해당하는 정보를 출력한다.



★ 여기까지가 annotation 을 이용한 bean 자동주입 방법이였다.








Spring을 이용한 Web 만들기...전에 이클립스 재설치 및 환경설정!
Spring legacy project!
================================
 이제부터는 Spring을 이용하여 Web 페이지를 만들것이다!

※ Legacy : 옛날것의...지금은 사용하지 않는... 이런 의미를 가지고 있다.


- TIL 폴더에 springweb 폴더를 만든다. 그리고 이클립스 workspace를 springweb 폴더로 옮긴다.

-> 다만, 이번에는 이클립스 버전을 좀 낮출것이다. 왜냐하면 예전에 사용된 '레거시 스프링?' 을 사용하면서 문제가 생긴다. 따라서 이클립스를 삭제하고 2020년 이클립스를 재설치할 예정이다.

--> 이전에 사용했던 프로젝트의 workspace를 보호하기 위해 이클립스를 삭제하기 전에 workspace를 바꾸었다.


☆ 삭제 순서

c드라이브 - 사용자 - 사용자이름(Onion) - .eclipse, .m2, .p2, eclipse, eclipse-workspace 폴더를 지운다! 다만, 이중에 하나는 없을 수는 있어도 eclipse 폴더가 없을수는 없다! 아마 다른데에 설치되어있을 확률이 높다.



☆ 다운로드 순서

https://www.eclipse.org/ 접속 - download 버튼 클릭 - 나오는 페이지에서 Download Packages 버튼 클릭 - MORE DOWNLOADS 항목에서 Older Versions 클릭 - 2020-03 클릭 - R Packages 클릭 - Windows x86_64 다운로드


eclipse-inst-win64.exe 실행 - Eclipse IDE for Enterprise Java and Web Developers - install 클릭


- 이클립스에 추가 설치할 것이 있다. Spring 개발에 필요한 도구들을 다운로드 한다.
Help 탭에서 Eclipse Marketplace 선택 - 검색란에 STS 검색 - Spring Tools 3 (Standalone Edition)을 install 한다. - confirm - accpet 버튼 누르고 finish - 우하단에 버튼을 누르면 무언가 다운로드 하고있음을 알 수 있다 - 다운로드가 끝나면 restart 버튼을 눌러 이클립스를 재시작한다.




- 설치가 다 되었다면
file - new - other를 누르고, 나오는 창에서 Spring에 Spring Legacy Project가 있는지 확인한다. 있다면 설치 완료!


- 환경설정을 해야한다!
1. 폰트는 verdana, workspace에서 인코딩 방식을 UTF-8로, WEB 에서 CSS, HTML, JSP 의 인코딩 방식을 UTF-8로 변경한다.
 general - web browser에서 chrome을 기본 브라우저로 설정하고 use external web browser를 선택해놓자

2. 하단의 data source explorer에서 Database Connections에서 우클릭 - new
우상단 버튼 눌러서 new driver definition 진입 - 오라클 11버전 - Jar List에서 기존 14버전 삭제 후 C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib에서 ojdbc6 선택 - Properties에서 
url은 jdbc:oracle:thin:@localhost:1521:xe
Service Name은 xe
비번 tiger
아이디 scott
test connection에서 ping success 나오면 save password 체크해주고 apply

3. 하단의 Servers에서 링크 클릭 - Tomcat 9.0버전 선택 - browse에서 C:\Program Files\Apache Software Foundation\Tomcat 9.0 폴더 선택(내가 설치한 톰캣)
 Servers 탭에 생성된 tomcat 더블클릭 - Port name에서 Tomcat admin port의 Port Number를 9005로 바꾼다




프로젝트 시작!
=============================================
file - new - Spring - Spring Legacy Project 선택한다.

-> 프로젝트 이름은 SpringWeb
-> Templats(어떤 형식을 쓸건지 선택하는 란)에서 Spring MVC Project 선택
-> next를 누르면 기본 패키지를 만들게 된다. com.ezen.springmvc 패키지를 생성
※ 패키지 생성은 보통 3단계 이상의 패키지를 만든다.
-> finish를 누르면 필요한 파일들을 다운로드한다. 최초에만 다운로드 하고 이후에는 바로 프로젝트가 생성되어 사용할 수 있다.


--> 생성된 프로젝트 우클릭 - properties - Project Facets - java 버전을 1.8, 우측 runtimes의 tomcat 9.0 체크박스 체크



---> 생성된 프로젝트 안에 있는 pom.xml 파일에서 plugin 태그중에서 org.apache.maven.plugins 를 찾고, source와 target 태그 사이의 1.6을 1.8로 바꿔준다.
---> 프로젝트 우클릭 - maven - maven update를 해준다.


☆ Spring Legacy 프로젝트의 실행방식은 조금 특이하다.
프로젝트를 우클릭 - Run As - Run on Server를 눌러줘야 한다.




@RequestMapping 이용하기
============================

§ 사진 1
프로젝트를 만들고 첫 실행시 사진1과 같이 나온다.
페이지 주소에 마지막에 '/'만 있다. 이를 Java Resource의 src/main/java의 com.ezen.springmvc 패키지의 HomeController 클래스로 가면...
-> @Controller, @RequestMapping 라는 이름으로 annotation이 되어있다.
--> 주소의 끝에 '/'가 있다면, date형 자료를 받아서 'home'이라는 이름의 jsp로 보낸다.

※ 대충 흐름은..
주소의 끝에 /가 있다 
-> HomeController에서 '/'를 검색하고, 해당하는 @RequestMapping을 찾는다 
-> 찾은 @RequestMapping 실행한다. 
-> 실행하면 해당 클래스의 동작을 하고 return값을 return한다.
-> home이 return되었다면, src-main-webapp-WEBINF-view에서 home이라는 파일을 찾아서 웹에 나타낸다.

※ 자세한 흐름은..
-> home을 return받으면 WEB-INF 폴더 아래 spring-appServlet의 beans 태그를 통한다.
<beans:property name="prefix" value="/WEB-INF/views/" /> 태그로 인해 return값 앞에 /WEB-INF/views/가 붙는다.
<beans:property name="suffix" value=".jsp" /> 태그로 인해 return값 뒤에 .jsp가 붙는다.
---> 따라서 home이 return되면 /WEB-INF/views/home.jsp 가 완성되는것이다!
---> 그렇기 때문에 해당 폴더의 home.jsp가 실행되는것!



※ HttpServletRequest의 request를 쓰지 않고, Model이라는 자료 전송용 전용 객체를 사용한다.


☆ 배운 내용을 토대로 'abcd'라는 값을 가지는 @RequestMapping을 만들었다.
§ 사진 1.1
HomeController 클래스에 새로운 @RequestMapping을 만들고, views 폴더에 abcd.jsp 파일을 만든다. 그리고 사진1.1과 같이 주소를 쓰면 abcd.jsp가 실행된다!



※ 웹에서 한글이 깨져보이는 현상 해결방법

WEB-INF 폴더에서 web.xml 파일을 연다. 여기에 한글 인코딩을 위한 필터 하나를 추가한다. filter, filter-mapping 태그를 하나 추가!






Model2에서 만들었던 게시판 만들기
====================================

새로운 Spring Legacy Project를 만든다.
이름은 SpringWeb_Board
기본 패키지는 com.ezen.board로 생성한다.


☆ pom.xml 환경변경
pom.xml 파일을 필요한 환경으로 변경한 뒤 mavenupdate를 진행한다.
java-version 태그를 1.8로 변경
properties 태그의 org.springframework-version 버전을 4.0.2.RELEASE로 변경한다.
properties와 dependencies 태그 사이에 repositories 태그를 삽입한다.


dependencies 태그가 끝나는 시점 이전의 부분에 DataBase와 관련된 dependency 태그를 추가
그리고 추가적으로 Spring에서 쓰이는 jdbc를 추가하는 dependency 태그를 추가한다.
그리고 추가적으로 c3p0 jdbc를 추가하는 dependency 태그를 추가한다.

그리고 FileUpload에 관한 dependency 태그를 추가한다.

※ 참고로 위의 dependency들은 maven repository 라는 웹 사이트에서 검색해서 어떤식으로 써야하는지 찾을 수 있다!

maven-compiler-plugin를 찾아서 버전을 1.8로 바꾼다.


----> 수정이 완료되었다면 maven - updateProject를 한다.
그러면 Libraries의 Maven Dependencies에 ojdbc, spring jdbc 등이 저절로 설치되어 장착된다!

----> properties - project facets에 가서 java 버전을 1.8로 바꿔준다.

------> 이전 SpringWeb 프로젝트에서 봤었던 기본적으로 생기는 HomeController와 home.jsp를 삭제한다!



☆ 시작! 사진은 SpringWeb_Board 폴더로

### 로그인 화면을 만들것이다.
com.ezen.board.controller 패키지에 MemberController 클래스를 생성!

-> 클래스를 만들고 제일 먼저 해야할것! RequestMapping을 검색할 클래스이기 떄문에 맨 위에 @Controller를 넣고 import 해준다.
--> 값이 '/'인 @RequestMapping를 만들고, loginForm() 메소드를 만든다. 역할은 member/loginForm를 return하는 것 뿐이다.

---> 그리고 views 폴더에 member 폴더를 만들고, 그 안에 loginForm.jsp 파일을 만든다.

----> css, script 파일을 참조할 resources 폴더가 둘인데, webapp의 resources 폴더를 사용하는것이다!
----> 그 안에 css, script 폴더를 만들고, 각각 board.css, board.js 파일을 만든다.

§ 사진 01
-----> css를 전부 적용했다면, 사진01과 같은 결과가 나온다.




### DB 만들기
views 폴더에 sql.sql 파일을 만든다.
board의 테이블, 시퀀스를 만든다! (기존에 있던 테이블이 있다.)
reply의 테이블, 시퀀스를 만든다! (기존에 있던 테이블이 있다.)
member의 테이블을 만든다! (기존에 있던 테이블이 있다.)




### 로그인 기능 만들기
loginForm에서 action을 보면 action="login" 이다. 이는 MemberController 클래스의 @RequestMapping의 value값이 "login"이라는 의미이다.

- MemberController 에서 value="/login"인 @RequestMapping를 만든다. 목적지는 board/main.jsp
-> loginForm.jsp에서 전달되는 값은 name이 id, pwd인 값이 전달된다.

--> 이 동작을 위해서는 dao, dto, service 파일이 필요하다.
--> com.ezen.board.service 패키지에 MemberService 클래스 생성
--> com.ezen.board.dao 패키지에 MemberDao 클래스 생성
--> com.ezen.board.dto 패키지에 MemberDto 클래스 생성

---> Dto부터 제작한다.




- 이제 MemberController에서 MemberDao를 호출해야하는데...인스턴스를 만드는게 아니라 MemberService를 거쳐서 Dao를 호출할 것이다.
-> 그럼 MemberService도 new MemberService(); 로 호출하는가? 아니다! annotation인 @Autowired를 붙이고 import 한다!
--> 하지만 에러가 나온다. 왜냐하면 @Autowired를 쓰기 위해서는 Spring Container에 MemberService 클래스의 bean이 담겨있어야 하기 때문이다.
---> 그럼 Spring Container에 MemberService의 bean을 담으러 갈 것인가? 아니다! 가장 위에 annotation @Controller를 붙여준다!
---> 그리고 MemberService 클래스의 상단에 annotation @Service를 붙여주면, 내가 보지 못하는 어딘가에서 저절로 Spring Container에 MemberService bean이 추가된다!
---> 다만 Dao에는 상단에 @Repository를 붙인다! (왜지?)





★ DB에 연결을 관리하는 클래스를 만든다.
- com.ezen.board.util 패키지에 DataBaseManager 클래스를 만든다.
-> 여기에도 @Repository를 넣는다.

- com.ezen.board.util 패키지에 DataBaseUserInfo 클래스를 만든다.


