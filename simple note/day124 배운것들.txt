day124 배운것들

- 터미널 cmd 에서 출력하기
해당 폴더로 넘어가기 : cd xxxx
상위 폴더로 넘어가기 : cd ..
nodejs로 실행하기 : node 파일이름



03_OS.js - 운영체제와 관련된 Module을 require 할 것이다.
(언젠가는 쓰게 될 내용이다)
============================================
- 자바에서 import 해서 쓰던 클래스를, 자바스크립트에서는 Module 을 require 한다고 표현한다.


-> 아래는 node.js에 내장된 os에 관련된 module을 쓰기 위해 require 하는 코드이다.
const os = require('os');
-> 기존에 있던 module 이던, 내가 만들던, 내가 가져와서 쓴다!
-> 마치 자바에서 클래스를 만들고 가져다 쓰는 것 처럼..



- os와 관련된 명령들





이번에는 내가 모듈을 만들어서 export 한 뒤, 이것을 require 해볼 것이다.
02 폴더 아래에 03_UserModule 폴더 생성
Var.js
======================================
※ 03_OS.js에서 봤던것처럼, node.js에 내장되어있는 'os' 모듈을 require 해서 그 내부의 변수나 함수를 사용할 수 있었다면, 이번엔 내가 만든 객체를 export 해두고서 이를 require 해서 사용하는 예를 살펴볼 예정이다.


module.exports = { odd:odd, even:even, };
- 두개의 변수를 하나의 객체에 넣고 exports 한 것이다.
-> 그리고 이를 하단 터미널 cmd에서 실행시킨다.
--> 이러면 파일 이름(Var) 으로 exports 된다!
---> 이를 사용하는 예시를 func01.js 파일에서 확인한다.



func01.js
==========================
- const value = require('./Var'); 로 방금 exports 한 Var를 require 하고 console에 출력해본다.

{ odd: '홀수입니다.', even: '짝수입니다.' } 가 나온다.


func02.js
===================================
require 된 객체를 객체분리 시켜보았다.


func03.js
- 여기서는 함수를 exports 하는 것도 들어있다.
=====================================
이번엔 require 자체를 구조분해 시켜보았다.
- require 하는 단계에서 구조를 분해하였다.

- 그리고 require 한 객체를 사용하는 함수를 만들고, 이를 exports 해보았다. 그리고 이 함수를 다른 파일(index.js)에서 require 해서 사용할것이다.


index.js
======================================
- 앞서 exports 한 var와 func03를 require 해서 사용하였다.






다시 02_Internal_Module 에서 작업한다.
04_Path.js - path 모듈
=======================================
- Path 라는 Module 은 경로와 관련된 module이다.
- path는 경로와 파일 관련 모듈이다.


#1. path 가 아니어도 사용 가능한 경로와 파일 관련 상수
console.log(__filename); : 현재 사용중인 파일의 이름
console.log(__dirname); : 현재 파일이 위치한 경로

-> 굉장히 많이 쓰이는 키워드라고 한다!




#2. path를 사용하는 것들

path.seq : 경로 내부의 폴더들 구분 문자 출력 -  \(백슬래쉬)
path.delimiter : 환경변수 내에서 서로 다른 경로를 같이 나타낼때 구분해주는 구분 문자 출력 - ;

path.dirname() : 파일이 위치한 폴더 경로를 보여준다.
path.extname() : 파일의 확장자(.js)를 보여준다.
path.basename() : 파일의 이름+확장자를 보여준다.
path.basename(extname 제외) : 이건.....?

path.parse() : 파일의 경로를 root, dir, base, ext, name으로 분리한다.
path.format() : 파일의 경로와 이름, 확장자를 제공하고, 경로-파일이름-확장자로 조합한다.
path.normalize() : 파일 경로를 사용하던 중 \ 나 / 를 실수로 여러번 쓴것을 수정한다.


path.isAbsolute(C:\\) : 파일의 경로가 절대 경로인지 상대경로인지 true false 로 표시한다. 
해당 예시는 true 출력
path.relative('C:\\TIL\\nodejs', 'C:\\') : 인수로 나오는 경로와 경로 사이에 이동 경로를 표시한다.
해당 예시는 ..\.. 즉, 세번 부모 폴더로 이동했다고 출력
path.join(__dirname, '..', '/TIL', '.', 'node_js') : 처음 경로부터 이후 나오는 경로로 이동한 폴더를 표시한다.
path.resolve(__dirname, '..', '/TIL', '.', 'node_js') : resolve 와 join 은 비슷하지만, '/' 표시를 절대경로인지, 상대경로인지 어떻게 보는지가 다르다.








05_Url.js
==========================================
- 이번엔 Url 이라는 Module 에 대해 학습한다.


-> 주어지는 url 주소를 분해...파싱해서 나열해준다.
-> 인터넷 주소를 parse 함수로 분해해서 각각의 요소들을 따로 분리하고 사용할 수 있다.

--> url.parse 로 query와 pathname 을 파싱해서 얻을 수 있다는 것을 알아두자. 나중에 이러한 정보들을 사용해야 할 경우가 생길수도 있다.

--> console.log(parsedUrl.query); 이렇게 parsedUrl 로 파싱한 내용중에 query 만 출력하도록 만든다!

---> 자바에서 request.getParameter로 파라미터를 받듯이, 여기도 이런 방식으로 파라미터를 받는 것이다!
그래서 중요한것!





06_readFile.js
==============================================
- fs 라는 모듈은 파일 읽기 쓰기를 위한 모듈이다.

- 우선 같은 폴더 안에 readMe.txt 파일을 제작하고, 아무 정보나 써둔다.
-> 그리고 이 파일에 읽기 쓰기를 할 것이다.


fs.readFile(경로, 옵션) : 파일을 읽어온다. 옵션 부분에는 함수나 문자열 등이 들어간다.




07_readFilePromise.js
============================================
※ 에러가 발생하면 throw err; 로 끝내도록 했다. 다만 이렇게 하면 이후 작업들이 전부 멈춰버린다!
자바에서는 Exception 처리로 이를 방지했으나, 자바스크립트에서는 비동기 방식으로 이를 처리한다.

- Promise 는 비동기 실행이므로, 아래의 명령이 나중에 실행되도록 뒤에 기술하여도 실행속도가 빠른 명령은 먼저 실행 후, promise 결과가 출력된다.









08_WriteMe.js
============================================
이번에는 파일에 쓰기를 한다.

- writeFile(경로, 쓸 내용, 옵션) : 파일에 쓰기 동작을 한다. 옵션에는 함수나 문자열 등이 들어간다.

-> writeMe.txt 파일을 명령을 통해 생성하였다!




09_WriteAndRead.js (연습)
============================================
wirteem2.txt 에 '안녕하세요, 반갑습니다!' 를 쓰고, 바로 읽어서 콘솔창에 출력하는 연습을 하였다.






10_WriteFilePromise.js
=================================================
- Promise를 이용해서 파일 쓰기 동작을 하는 방법이다.






























































