day 72

 오늘은 조별 프로젝트 이전에 스프링에 대한 학습을 하루 진행한다.

ShoppingMall은 MVC패턴, Model2 방식이였다.

지금부터는 SpringFramework을 공부할것이다.
-> 물론, SpringFramework가 점점 기본화 되어가는 추세이므로, Node.js, react 등등을 더 가지고 가야한다!


※ 참고
 @Microsoft YaHei 폰트를 사용해봣는데 꽤 깔끔하고 좋다.









##### SpringFramework 개발환경 구축

※ Maven과 Gradle 두개가 있는데, 둘 다 쓰게 될 것이다.

-> 파일 다운로드

1. https://maven.apache.org/ 페이지 접속

2. 왼쪽 메뉴에서 Download 선택

3. Binary zip archive의 링크 apache-maven-3.8.4-bin.zip 다운로드

4. C드라이브(학원에서는 D드라이브)에 zip 파일을 넣고 '여기에 압축풀기'


--> 환경변수 셋팅(어떤 경로에서든 bin 폴더의 mvn.cmd 를 사용할 수 있도록 만든다.)

§ 사진 1
5. 제어판 - 시스템 - 고급시스템 설정 - 환경변수 - 시스템변수에 새로만들기 - 변수이름을 지정하고(M2_HOME) apache-maven-3.8.4 를 선택한다. - 시스템변수 내의 path 더블클릭 - 환경변수편집 창에 %M2_HOME%\bin를 새로 만들거나 apache-maven-3.8.4 경로를 설정

§ 사진 1.2
6. cmd 창에서 mvn을 입력해보고, 사진 1.2와 같은 결과가 나오면 성공.
6.1 § 사진 1.3처럼 나오는 경우 환경변수의 시스템변수에 JAVA_HOME 변수가 없는 경우이다.
 이 경우 § 사진 1.4처럼 환경변수를 만들어준다.




---> 이클립스가 없을 경우 설정하기.

7. Today-I-Learned-MJ 폴더(학원에서는 D드라이브)에 'spring'폴더를 생성한다.
 이제 새 프로젝트를 진행할때마다 여기에서 진행할 것이다.

8. Sp01 폴더를 만든다. (아마 프로젝트 이름인듯?)

9. Sp01 폴더 아래에 src 폴더 생성, 그 아래에 main 폴더 생성, 그 아래에 java, resources 폴더 생성

10. 카페에서 pom.xml 파일을 다운로드 받아 Sp01 폴더 아래에 붙여넣는다.
※ xml 파일은 환경구성파일이다.
※ 본래는 손으로 직접 타이핑해서 쓰는게 맞지만, 많은 사람들이 이미 만들어진 파일을 가져다 쓴다.

10.1 <dependency> 태그는 필요한 환경을 써넣는 태그. 여러개가 들어갈수 있다.
<plugin> 태그 안에는 잠정적으로 필요한 java 버전 등이 들어간다.

§ 사진 2
11. cmd 창을 열고, Sp01 폴더를 찾아간다.
※ 참고로 'cd 경로' 명령을 차례대로 넣는다. 'cd ..' 명령은 윗 단계의 파일로 돌아가는 명령이다.

11.1 찾아갔다면 mvn compile 명령을 한다.

§ 사진 2.1
11.2 명령이 수행되었다면 사진과 같이 Build Success 가 나오면 성공이다.
※ 환경변수, 파일 다운로드를 잘 했다면 성공한다.



----> 이클립스 workspace 위치 바꾸기

12. 상단 메뉴바의 file - Switch 


13. 상단 메뉴바의 window - preferences에서 General - workspace 에서 text file encoding 메뉴에서 Other 선택 후 UTF-8 로 바꾼다.

§ 사진 3
14. 프로젝트 import. file - import - Maven - Existing Maven Projects - Sp01 폴더를 선택한다.

§ 사진 3.1
 Maven Dependencies를 보면 spring-context-4.1.0..... 이외에도 여러 jar 파일이 만들어져있는걸 확인할 수 있다.
 필요한 파일을 가져오면 이것에 필요한 파일들이 딸려와서 설치된다.
 훗날 또다른 필요한 파일을 넣을때도 이렇게 다른 파일들이 딸려온다.



-----> 이클립스로 프로젝트 만들기
§ 사진 4
1. file - new - Maven Project 를 만들고 프로젝트를 만든다.

§ 사진 4.2
2. simple 프로젝트로 만들면 사진 4.2 처럼 프로젝트가 만들어진다.

§ 사진 4.3, 사진 4.4
3. 생성된 pom.xml 파일을 열어보면 Sp01의 pom.xml과는 달리 텅 비어있다.
 Sp01의 pom.xml의 <dependency> 태그와 <build> 태그의 내용을 긁어다가 넣으면 프로젝트에 Maven Dependencies 가 생기고, 사진 4.4처럼 그 안에 파일들이 다운로드 된다.

§ 사진 4.5
4. 프로젝트에 붉은 엑스표가 있는데, 이는 pom.xml에 입력된 자바 버전과 프로젝트 생성시 설정된 자바 버전이 1.8, 1.5 로 다르기 때문이다.
 사진 4.5와 같이 프로젝트 위에서 우클릭 - Maven - Update Project 를 누르면 자바 버전이 update 된다.




여기까지 하면 개발 환경 셋팅은 완료하게 된다.


##### 자바 파일 만들기(스프링워크 프레임에서도 자바와 같이 자바 클래스, 레퍼런스, 메소드 등을 실행할 수 있다! 를 보여주는 과정)

셋팅이 완료된 프로젝트를 이용해보자.
사칙연산을 할 수 있는 계산기를 만들어보자.

- src/main/java에 first 패키지를 만든다.

-> 그 안에 이름이 Calculator 인 Interface 파일을 만든다.
--> cal이라는 추상 메소드를 만든다. 사칙연산을 하는 각각의 클래스는 Calculator를 implements 받는다.
 이를 상속받는 클래스는 cal 메소드를 오버라이딩 하게 된다!

---> 덧셈, 뺼셈, 곱셈을 할 Sum, Sub, Mul 클래스를 만든다. 이 클래스들에 Calculator interface를 implements 한다.

----> 이들을 이용할 메인 클래스를 만든다. 이름은 MainClass




##### 스프링 프레임워크에서의 자바클래스의 특징!
일반 자바 프로그램과는 어떻게 다른가.
스프링프레임워크에서 자바 클래스를 특별하게 운영하는 방법에 대해 학습한다.


- Sp03 프로젝트를 만든다.




























































