day 72

 오늘은 조별 프로젝트 이전에 스프링에 대한 학습을 하루 진행한다.

ShoppingMall은 MVC패턴, Model2 방식이였다.

지금부터는 SpringFramework을 공부할것이다.
-> 물론, SpringFramework가 점점 기본화 되어가는 추세이므로, Node.js, react 등등을 더 가지고 가야한다!


※ 참고
 @Microsoft YaHei 폰트를 사용해봣는데 꽤 깔끔하고 좋다.



※ 에러
Sp05 에러난다!
-> 에러 안 나긴 하는데 확인해봐!
StudentInsertService, StudentSelectService 다 못썼다!
-> 쓰긴 썼는데 맞는지 확인해



※ 다운로드 툴
이클립스 툴 마켓에서 sts 검색하면 나오는 Spring tool 3 를 받아서 썼다.
3.9....







##### SpringFramework 개발환경 구축

※ Maven과 Gradle 두개가 있는데, 둘 다 쓰게 될 것이다.

-> 파일 다운로드

1. https://maven.apache.org/ 페이지 접속

2. 왼쪽 메뉴에서 Download 선택

3. Binary zip archive의 링크 apache-maven-3.8.4-bin.zip 다운로드

4. C드라이브(학원에서는 D드라이브)에 zip 파일을 넣고 '여기에 압축풀기'


--> 환경변수 셋팅(어떤 경로에서든 bin 폴더의 mvn.cmd 를 사용할 수 있도록 만든다.)

§ 사진 1
5. 제어판 - 시스템 - 고급시스템 설정 - 환경변수 - 시스템변수에 새로만들기 - 변수이름을 지정하고(M2_HOME) apache-maven-3.8.4 를 선택한다. - 시스템변수 내의 path 더블클릭 - 환경변수편집 창에 %M2_HOME%\bin를 새로 만들거나 apache-maven-3.8.4 경로를 설정

§ 사진 1.2
6. cmd 창에서 mvn을 입력해보고, 사진 1.2와 같은 결과가 나오면 성공.
6.1 § 사진 1.3처럼 나오는 경우 환경변수의 시스템변수에 JAVA_HOME 변수가 없는 경우이다.
 이 경우 § 사진 1.4처럼 환경변수를 만들어준다.




---> 이클립스가 없을 경우 설정하기.

7. Today-I-Learned-MJ 폴더(학원에서는 D드라이브)에 'spring'폴더를 생성한다.
 이제 새 프로젝트를 진행할때마다 여기에서 진행할 것이다.

8. Sp01 폴더를 만든다. (아마 프로젝트 이름인듯?)

9. Sp01 폴더 아래에 src 폴더 생성, 그 아래에 main 폴더 생성, 그 아래에 java, resources 폴더 생성

10. 카페에서 pom.xml 파일을 다운로드 받아 Sp01 폴더 아래에 붙여넣는다.
※ xml 파일은 환경구성파일이다.
※ 본래는 손으로 직접 타이핑해서 쓰는게 맞지만, 많은 사람들이 이미 만들어진 파일을 가져다 쓴다.

10.1 <dependency> 태그는 필요한 환경을 써넣는 태그. 여러개가 들어갈수 있다.
<plugin> 태그 안에는 잠정적으로 필요한 java 버전 등이 들어간다.

§ 사진 2
11. cmd 창을 열고, Sp01 폴더를 찾아간다.
※ 참고로 'cd 경로' 명령을 차례대로 넣는다. 'cd ..' 명령은 윗 단계의 파일로 돌아가는 명령이다.

11.1 찾아갔다면 mvn compile 명령을 한다.

§ 사진 2.1
11.2 명령이 수행되었다면 사진과 같이 Build Success 가 나오면 성공이다.
※ 환경변수, 파일 다운로드를 잘 했다면 성공한다.



----> 이클립스 workspace 위치 바꾸기

12. 상단 메뉴바의 file - Switch 


13. 상단 메뉴바의 window - preferences에서 General - workspace 에서 text file encoding 메뉴에서 Other 선택 후 UTF-8 로 바꾼다.

§ 사진 3
14. 프로젝트 import. file - import - Maven - Existing Maven Projects - Sp01 폴더를 선택한다.

§ 사진 3.1
 Maven Dependencies를 보면 spring-context-4.1.0..... 이외에도 여러 jar 파일이 만들어져있는걸 확인할 수 있다.
 필요한 파일을 가져오면 이것에 필요한 파일들이 딸려와서 설치된다.
 훗날 또다른 필요한 파일을 넣을때도 이렇게 다른 파일들이 딸려온다.



-----> 이클립스로 프로젝트 만들기
§ 사진 4
1. file - new - Maven Project 를 만들고 프로젝트를 만든다.

§ 사진 4.2
2. simple 프로젝트로 만들면 사진 4.2 처럼 프로젝트가 만들어진다.

§ 사진 4.3, 사진 4.4
3. 생성된 pom.xml 파일을 열어보면 Sp01의 pom.xml과는 달리 텅 비어있다.
 Sp01의 pom.xml의 <dependency> 태그와 <build> 태그의 내용을 긁어다가 넣으면 프로젝트에 Maven Dependencies 가 생기고, 사진 4.4처럼 그 안에 파일들이 다운로드 된다.

§ 사진 4.5
4. 프로젝트에 붉은 엑스표가 있는데, 이는 pom.xml에 입력된 자바 버전과 프로젝트 생성시 설정된 자바 버전이 1.8, 1.5 로 다르기 때문이다.
 사진 4.5와 같이 프로젝트 위에서 우클릭 - Maven - Update Project 를 누르면 자바 버전이 update 된다.




여기까지 하면 개발 환경 셋팅은 완료하게 된다.


##### 자바 파일 만들기(스프링워크 프레임에서도 자바와 같이 자바 클래스, 레퍼런스, 메소드 등을 실행할 수 있다! 를 보여주는 과정)

셋팅이 완료된 프로젝트를 이용해보자.
사칙연산을 할 수 있는 계산기를 만들어보자.

- src/main/java에 first 패키지를 만든다.

-> 그 안에 이름이 Calculator 인 Interface 파일을 만든다.
--> cal이라는 추상 메소드를 만든다. 사칙연산을 하는 각각의 클래스는 Calculator를 implements 받는다.
 이를 상속받는 클래스는 cal 메소드를 오버라이딩 하게 된다!

---> 덧셈, 뺼셈, 곱셈을 할 Sum, Sub, Mul 클래스를 만든다. 이 클래스들에 Calculator interface를 implements 한다.

----> 이들을 이용할 메인 클래스를 만든다. 이름은 MainClass




##### 스프링 프레임워크에서의 자바클래스의 특징! - 인스턴스 꺼내쓰기
일반 자바 프로그램과는 어떻게 다른가.
스프링프레임워크에서 자바 클래스를 특별하게 운영하는 방법에 대해 학습한다.

※ new 인스턴스를 만드는 방법이 살짝 다르다.


§ 스프링프레임워크 컨테이너에서 인스턴스 꺼내 쓰는 방법

- Sp03 프로젝트를 만든다.
-> 이번에는 패키지를 조금 제대로 만든다.
-> com.ezen.sp03 패키지 제작
-> 그 아래에 WalkClass 클래스 제작

--> 단순히 문장을 출력하는 move() 라는 멤버메소드를 만든다.

---> MainClass를 제작한다.

§ 사진 5
---> 일반적으로 클래스의 객체 생성 및 사용은 사진 5처럼 한다.


----> 스프링 프레임워크에서는 클래스의 객체 생성 및 운영이 다르게 운영된다.
필요할때 new 인스턴스를 생성하지 않고, 미리 생성&보관하고 있다가 필요할때 꺼내쓰는 방법을 사용한다.

----> 만들어진 인스턴스의 보관장소를 스프링 컨테이너라고 부른다.
----> 참고로 현재 프로젝트에서 사용할 스프링 컨테이너는 applicationContext.xml이다.

----> applicationContext.xml의 기본 위치는 src-main-resources 폴더가 된다.

-----> applicationContext.xml 를 작성한다. 여기서 <beans> 태그는, 현재 폴더는 스프링 컨테이너로 사용되고 있음을 알리고 있는 태그이다. 


------> 다시 MainClass로 돌아와서, 스프링 컨테이너에 담겨있는 객체들을 꺼내쓰기 위한 방법을 주석 따라 확인한다.

※ 아직까지는 SpringFramework의 인스턴스 사용 방법이 더 귀찮다.





##### 인스턴스 꺼내쓰기 2

§ SpringFramework의 컨테이너를 사용하지 않을때와 사용할때를 비교하기 위한 프로젝트


- Sp04 프로젝트를 만든다.
이번에는 클래스를 여럿 만든다.

-> com.ezen.bettery 패키지 생성
-> com.ezen.toy 패키지 생성

※ toy 패키지 안의 클래스에서 사용될 클래스들
--> battery 패키지에 Battery 인터페이스 생성. getBatteryValue() 메소드를 만든다.
--> battery 패키지에 NormalBattery 클래스 생성 후 Battery를 implements한다.
--> battery 패키지에 ChargeBattery 클래스 생성 후 Battery를 implements한다. charge(int value) 메소드를 추가로 만든다.


---> toy 패키지에 ElectronicCar 클래스 생성.
---> 이 장난감은 배터리가 출시 당시 탑재(내장)되어, 교체가 불가능한 상태로 판매되는 형태이다.

---> toy 패키지에 ElectronicRadio 클래스 생성.


----> 이제 com.ezen 패키지에 위의 클래스들을 사용할 MainClass를 만든다.

-----> resources 폴더에 applicationContext.xml을 만들고 작성한다.

------> MainClass 에서 GenericXmlApplicationContext를 이용해 객체를 생성

-------> ElectronicRadio를 SpringFramework 방식대로 인스턴스를 만드는건 에러가 나오지 않지만, 실행할경우 에러가 생긴다.

--------> 다시 applicationContext.xml 로 가서, battery 관련 bean을 작성하고, ElectronicRadio Bean에 대한 의존 주입 태그와 내용을 넣는다.

----------> 다시 돌아와서 사용해보면 에러가 나오지 않는다!


 이렇게 applicationContext.xml 에서 미리 조립해놓고 불러다 쓰는 것이다.
 스프링 프레임워크에서의 클래스 사용이 약간 업그레이드되어 사용하기 간편해졌다.




##### 오라클 DB에 연결하기!

- 오라클 DB에 접근하려면, ODBC jar 파일을 받고 넣어야하는데...
 이전에는 직접 ojdbc.jar 파일을 다운받아 직접 lib 파일에 추가했었다.
- SpringFramework에서는 그럴 필요 없이 pom.xml 파일에 내용을 작성하여 자동으로 필요한 파일들을 다운로드 받을 수 있다!


# 오라클을 이용하기 위한 작업
-> pom.xml 파일에 <repositories> 태그 내용을 추가한다.
-> 그리고 <dependencies> 태그 안에 <dependency> 태그 내용을 추가한다.
그럼 사진 6처럼 ojdbc6이 저절로 추가되는걸 확인할 수 있다.

§ 사진 6.1
--> 파일을 추가했다면, 하단의 Data Source Explorer 탭에서 Database Connections 우클릭 - new를 누른다.

§ 사진 6.2~6.5
--> Connectiomn Profile에서 사용할 DB를 선택(Oracle 사용할 예정) - 사진 6.2
--> Next 누르면 나오는 창에서 우상단 버튼 클릭하면 나오는 Specify a Driver Remplate and Definition Name의 Name/Type 탭에서 오라클 버전 선택(버전 11 사용할 예정) - 사진  6.3
--> JAR List 탭에서 ojdbc14.jar은 지우고, 사진의 경로에 저장된 ojdbc6.jar을 add - 사진 6.4
--> Properties 에서 Connection URL, Database Name 을 바꾸고, ID는 scott, Password는 tiger 설정한다. - 사진 6.5

※ 참고!
pom.xml 에 repository를 모를 때 어떻게 해야하는가?

-> 구글에 maven repository를 검색해보면 Maven Repository: Search/Browse/Explore 페이지가 나온다.
 여기에서 필요한 내용을 검색해보면 어떻게 코드를 써야하는지 나온다!






##### 오라클 DB에 테이블 만들기 (일반적인 방법 - java 프로그래밍)
프로젝트명 : Sp05
§ 사진 7


- src 폴더에 sql.sql 파일을 만들고 실습에 사용할 student 테이블을 만든다.
 
--> 이전에 인스턴스를 미리 만들어서 필요할때마다 컨테이너에서 꺼내 쓸 수 있도록 만든 applicationContext.xml를 이용해서 DB 또한 다룰 수 있도록 만들 것이다.


-> com.ezen.member, com.ezen.member.dao, com.ezen.member.dto, com.ezen.member.main, com.ezen.member.service 5개의 패키지를 생성

--> dto 패키지에 Student 클래스 생성
 각 변수에 대한 getter, setter 를 만들고, 마우스 우클릭 Source - Generate Constructor using Field를 눌러 클래스 내의 모든 변수를 매개변수로 가지는 생성자를 만든다.


--> dao 패키지에 StudentDao 클래스 생성
 DB 연결정보를 적고 DB에 연결하는 메소드 getConnection과 끊는 객체 close 를 만든다.
 어차피 한번 쓰고 말거 이전처럼 Dbman 클래스를 따로 만들던가 그런 작업은 안 한다.


--> service 패키지에 StudentInsertService 클래스 생성
StudentDao의 메소드 insertStudent를 실행하는 insertStudent(Student std) 메소드를 제작한다.
이 메소드는 MainClass에서 사용할것이다.


--> main 패키지에 MainClass 클래스 생성
 StudentInsertService의 객체 sis를 만들고, Student 클래스의 객체 std를 만들며 내용을 저장한뒤, sis에 있는 메소드 insertStudent(std);로 DB에 내용을 저장한다.


--> Dao 에서 DB에 데이터를 insert하는 insertStudent 메소드를 제작한다.

※ 거꾸로 만들었지만, 어쨌든 일반적으로는 이런식이다.



---> MainClass.java 를 실행하면 두 학생이 DB에 저장되게 된다.
(한번 실행하고 나면 학생 추가하는 코드는 주석처리 해놓자... 또 실행하면 중복으로 DB에 들어가게 된다.)


----> 이제 DB에 저장된 학생들의 정보를 전부 출력하는 코드를 만든다.

----> service 패키지에 StudentSelectService 클래스를 만든다.
----> 그리고 MainClass.java에 만들어두었던 selectStudent() 메소드를 StudentSelectService에 만든다.
----> StudentSelectService 클래스에서는 Dao에 있는 selectStudent 메소드를 사용한다. 따라서 Dao에 학생들의 정보를 조회하는 selectStudent 메소드를 만든다.


이게 일반적인 java 프로그래밍 방법으로 만든 DB 사용법이다.

이제 SpringFramework으로 위의 동작을 어떻게 만드는지 배울것이다.




※ 여기 복습 다시 꼭!!!!
##### 오라클 DB에 테이블 만들기 (SpringFramework)


- 우선 StudentSelectService sss = new StudentSelectService(); 를 호출하지 않을것이다!

- service 패키지에 SpringContainerClass 클래스를 만든
여기에 모든 클래스의 객체가 하나씩 담길것이다!

--> SpringContainerClass에 StudentSelectService, StudentInsertService의 객체를 만들고, 해당 클래스들의 new 인스턴스를 생성하는 기능을 가지는 SpringContainerClass 생성자를 만든다.
그리고 각 객체의 getter를 만들어주면 끝!(setter는 만들 필요가 없다!)

※ 이게 뭔 소리지?
--> StudentSelectService와 StudentInsertService 에서는 기존에 new 로 인스턴스를 만들던 것을 생성자를 이용하여 만든다...


--> 이제 MainClass.java에서 SpringContainerClass 객체를 만든 뒤 이 객체를 이용해서 StudentSelectService, StudentInsertService의 객체를 만들 수 있다!
--> SpringContainerClass scc = new SpringContainerClass();
--> StudentInsertService sis = scc.getIs();




----> 한명의 학생의 정보를 가져오는 클래스를 예시로 만들어본다.
StudentSelectOneService

