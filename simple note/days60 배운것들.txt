day 60


※ 확인할 내용...

- 수정 비밀번호 확인 팝업창이 엄청 크게 나온다...

- 수정 비밀번호 확인 에서 확인버튼 누르면 하얀 화면만 나온다..
--> 근데 페이지는 게시글 수정 페이지로 바뀐다...?
----> 해결! checkSuccess 파일에 self.close();를 넣어주어 클릭시 닫게 만들었다!

- 수정 페이지에서 수정 버튼을 누르면 하얀 화면만 나온다
--> 근데 게시물 내용은 바뀐다.
----> 해결! 아직 boardViewWithoutCountAction 페이지를 안 만들어서 그랬던것.

- 댓글이 안 달린다..
--> java.sql.SQLSyntaxErrorException: ORA-00917: missing comma
콤마를 어디서 빼먹었지?
spl 문이 잘못된 것 같은데..?
----> sql 문은 해결했는데 또다른 문제가 생김!

- 위에서 이어지는 에러
boardView의 58번째 줄에 문제가 생겼다.
--> onClick 속성값에 뭔가 따옴표 잘못 쓴 것 같다.
----> 해결! ${reply.num} 이 아니라 ${reply.replynum}이다.


- 삭제 버튼을 누르면 java.lang.NumberFormatException: Cannot parse null string 에러가 나온다.
--> 뭐 어디 형태가 틀린 것 같은데...
DeleteReplyAction과 BoardDao의 deleteReply 메소드 확인



※ 오늘은 게시글 수정 및 삭제 버튼을 작동시킬 예정

그리고 댓글을 추가할 수 있다.



------------------------------------- 게시글 수정 삭제
※ boardView 페이지에서 num과 update 혹은 delete 를 쭉 넘긴다!


- open_win이라는 스크립트를 만든다.
--> 이 open_win은 게시물의 번호 num과 update 혹은 delete의 문자를 매개변수로 받는다.
※ 이것들은 수정 or 삭제할 페이지를 선택하고, 수정할지 삭제할지를 결정할 것이다.

----> 게시글의 수정or삭제를 위해서는 비밀번호가 필요하다. 이를 위해 비밀번호를 작성할 팝업 페이지를 하나 나오게 만든다.

------> actionFactory에서 command를 boardPassForm을 가지는 BoardPassFormAction 클래스를 만든다.


---------- BoardPassFormAction
- 하는 역할은 boardCheckPass.jsp로 보내는 역할 뿐이다.
비밀번호를 입력할 수 있는 팝업창으로 보낸다.


---------- boardCheckPass.jsp

- 여기서는 게시글의 비밀번호를 작성하고, 선택한 게시물의 num과 작성한 비밀번호를 command boardCheckPass로 넘긴다

--> 넘어간 command를 바탕으로 BoardCheckPassAction 클래스로 페이지를 넘기도록 한다.


----------- BoardCheckPassAction

- 여기서는 할 일은

1. 게시물 번호와 비밀번호를 전달받는다. 전달받은 파라미터들을 변수에 저장한다.

2. 파라미터로 전달된 게시물 번호로 게시물을 조회하고, dto에 저장한다.

3. 파라미터로 전달된 입력 패스워드와 조회된 게시물의 패스워드와 비교한다.

4. 비교하여 비번이 틀리거나 없다면 boardCheckPass.jsp 페이지로, 비번이 맞다면 checkSuccess.jsp 페이지로 넘긴다.


---------------board/checkSuccess.jsp

- 여기서는 javascript를 통해 해야할 작업이 수정인지 삭제인지 구분할것.
이번에는 script 파일로 가는게 아니라 여기서 스크립트를 실행할것이다.

수정이라면 command=boardUpdateForm
삭제라면 command=boardDelete



---------------- 수정

ActionFactiory에서 BoardUpdateFormAction 클래스로 넘어간다.

--- BoardUpdateFormAction

여기서 해야할 일은

1. 전달된 게시물 번호로 게시물을 조회한 후

2. request에 담아서 게시물 수정 Form으로 이동. (board/boardUpdate.jsp)

※ 조회하는 이유는 수정 페이지에 내용물을 넣기 위해서이다.


------- board 폴더에 boardUpdate

- 여기서는 게시글을 수정하고, submit 버튼을 누르면 이를 boardCheck 스크립트를 통해 빈칸체크 후 command boardUpdate로 보낸다.
그리고 여기에서 BoardUpdateAction 클래스로 넘긴다.


돌아가기 버튼을 누르면 command boardViewWithoutCount로 보내는 역할을 한다.
※ 그냥 기존에 만들었던 boardView로 가도 되지만, 이 경우에는 조회수가 +1 되기 때문이다.


-------- BoardUpdateAction

- 여기서 해야할 일은

1. 전달된 수정 데이터를 Bto에 넣고
2. bao의 메소드를 이용해서 table 수정을 하고
3. 조회수가 올라가지 않도록 만든 클래스로 페이지를 넘긴다.
command는 boardViewWithoutCount와 게시물 번호 num을 보낸다.

----> Dao에서 updateBoard 메소드 제작

------> 다시 BoardUpdateAction에서 command boardViewWithoutCount를 ActionFactory로 보낸다.

--------> boardViewWithoutCountAction 로 넘어간다!



---- boardViewWithoutCountAction

- 여기서는 BoardViewAction 에서 코드를 긁어와서 조회수 증가시키는 부분만 빼면 된다!
그럼 조회수는 올리가지 않고 수정버튼을 누르면 해당 페이지로 다시 간다!




----------------------------이번에는 삭제를 만들 것.

checkSuccess.jsp에서
command boardDelete 로 BoardDeleteAction 클래스로 넘긴다.
--> 다만 삭제 전에 삭제 할까말까를 한번 물어보도록 만든다.
----> 예를 누르면 command= boardDelete로,
----> 아니오를 누르면 command=boardViewWithdoutCount 로 보낸다.


- BoardDeleteAction

여기서 할 일은 

1. checkSuccess에서 지울 게시물의 num값을 받는다.

2. 받은 num 값을 이용해 Dao의 deleteBoard 메소드로 테이블에서 num값에 해당하는 값을 삭제한다.

3. 메인 페이지로 이동시킨다.






여기까지가 수정 및 삭제 부분
뭔가 복잡하고 할게 많아보이는데, 그렇다.
몇번 더 만들어서 익숙해지는게 답인 것 같다



.
-------------------------------------댓글 만들기


지금부터는 댓글 기능을 만들것이다.


댓글의 데이터를 어디에 저장해야할까?
board 테이블에 필드 하나를 만들어서 저장하기에는 저장할 요소(작성자, 날짜, 내용 등...)가 많기도 하고, 한 게시물에 하나의 댓글 이상이 달리거나 아예 달리지 않기 때문이다.

--> 따라서 댓글 테이블을 하나 따로 만든다.
----> 그리고 그 댓글 테이블은 게시물 번호, 글쓴이, 시간, 내용이 들어갈 것이다.



※ 댓글의 데이터를 받고 내보낼 Dto가 따로 필요하다!
ReplyDto를 제작한다.


댓글은 어디에 쓰는가?
--> boardView에다가 그 자리를 만든다!


boardView의 하단에 댓글 작성 영역을 만든다.

--> 작성자, 날짜시간, 작성란, 버튼을 제작했다.

----> ActionFactory를 이용해 AddReplyAction 클래스 제작


----------AddReplyAction

- boardView에서 전달받은 userid와 reply 파라미터를 rdto에 저장한다.

--> BoardDao에 reply table에 댓글의 내용과 날짜 등을 추가할 insertReply 메소드를 만든다.


여기까지 하면 reply 테이블에 댓글을 담을 수 있다.

--> 이렇게 담은 댓글을 BoardViewAction.java 페이지에 나타내도록 만든다.
----> 여기서는 해당 게시글의 boardnum과 일치하는 댓글 list를 긁어오는 selectReply 메소드를 불러온다.
------> BoardDao에서 해당 메소드를 만든다. 해당 메소드에서는 boardnum이 일치하는 댓글들을 긁어 list에 내용들을 저장해서 return한다.
--------> 긁은 내용을 BoardViewAction에서 boardView로 가져간다.
※ 주의!
이 내용은 boardViewWithoutCountAction 에서도 필요하다!
얘도 boardView로 돌아가면서 댓글을 표기하기 위해서!




--------- 화면에 댓글 보이게 하기

- 이제 boardView.jsp 페이지로 돌아가서 화면에 댓글을 나타낼 수 있도록 작업한다.

--> 로그인 유저와 댓글을 단 유저가 같다면 댓글을 삭제할 수 있는 버튼이 노출되도록 만든다.




-------- 댓글 삭제

- BoardView에서 command deleteReply로 DeleteReplyAction 클래스로 넘어가게 한다.

--> DeleteReplyAction 에서는 boardnum값과 replynum 값을 받아 해당하는 데이터를 BoardDao의 deleteReply 메소드로 replynum값을 넘겨 삭제하고 전달받은 게시물 번호 boardnum으로 되돌아간다.






여기까지가 댓글의 내용
-----------------------------------------------------------------------

여기서부터는 day 61로


이번에는 페이징이라는것을 만들 것이다.

페이징은, 한 페이지에 몇개 이상의 게시물이 보이면 나머지를 두번째, 세번째 페이지로 넘기는 뭐 그런거임...

한 페이지에 10개의 게시물만 보이도록 만드는것이 목표이다.


※ 실습을 위해 sql 파일을 이용하여 100개가 넘는 게시물을 만들자!


- util 패키지에 Paging 이라는 클래스를 만든다.
※ 여기에 페이지 표시 예 에 대한 주석이 있다.



우선 필요한 변수들과 getter setter를 만들고 끝!
































































