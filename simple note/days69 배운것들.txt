day 69


※ 에러
- admin 페이지에 게시글 목록이 싹 안 보인다.
-> AdminDao의 listProduct메소드가 문제인듯?
--> 해결! sql 문을 또 잘못 썼다.

- 검색을 누르면 에러가 나온다.
1. 로그인 후 첫 화면에서 검색창 커서 후 엔터를 누르면 에러 발생
Cannot invoke "String.equals(Object)" because "command" is null
검색 버튼을 누르고 나서야 진행된다.
--> 로그인 후에 주소가 shop.do로 command가 없는데 혹시?
----> 해결! 버튼이 '검색', '전체보기', '상품등록' 세개가 있는데, 엔터를 누를 때 어떤 버튼을 실행할지 정하지 않았기 떄문이다.

2. 검색 버튼을 눌러도 검색 기능이 실행되지 않는다
--> 해결! 스크립트 submit에 ()을 넣지 않았었다.



- 상품 상세보기 누르면 에러가 나온다.
For input string: ""
--> 해결! pseq 를 보내는 EL문의 오타



- 상품 수정하기 누르면 안 먹힌다.
Cannot parse null string
--> 숫자가 아닌 녀석을 숫자로 바꾸려고 할 때 생긴다고 하는 에러

productDetail에서 수정 버튼을 눌러서 넘어온 pseq에 문제가 있나?
go_mod 스크립트에 문제가 있나?

----> 그럼 왜 똑같이 상품번호를 보내서 int로 형변환 시키는 ProductList에는 문제가 없었지?

AdminProductUpdateFormAction 이걸 잘못 썼나?

------> 해결! 주석처리하고 AdminProductDetailAction에서 썼던 방식대로 쓰니 잘 된다!
근데 주석대로 쓰면 왜 문제가 생긴걸까? 한번 해당 소스코드 확인해야한다!



※ 확인할거
admin header 부분에 뭐 부실하게 넣었나?

AdminProductListAction 의 session에 page 값을 저장하고 삭제하는 과정이 이해가 잘 안된다.




------------ 리스트 검색하는 기능 만들기

§ 사진 27

 productList.jsp의 <input type="text" name="key" value="${key}">

-> 이걸 보면 처음에 검색란은 빈칸이지만, 검색하고나면 이 안에 쓴 내용이 key라는 이름으로 go_search() 스크립트로 가서 역할을 다 하고 커서에 나타나에 된다.


--> product.js 파일 생성
 go_search 스크립트를 제작. 검색창이 비어있다면 command adminProductList의 1페이지로 보낸다.



---> AdminProductListAction에서! 
검색어는 레코드 갯수를 세는 동작부터 영향을 미친다.
검색어로 검색 결과를 가져와서 이것의 총 갯수를 세고, 이걸 페이징에 totalCount에 셋팅해야한다.

----> AdminDao의 getAllCount 메소드에 key값을 전달인자로 넣는데, key값은 상품리스트, qna리스트 등등 여러 경우가 있기에 "product", "name", key를 전달인자로 만든다.

-----> getAllCount 메소드를 수정한다.
 sql문은 기존의 'select count(*) as cnt from product' 에서
select count(*) as cnt from " + tablename + " where " + fieldname + " like '%'||?||'%'" 로 바꾸어야 한다.



------> listProduct 메소드에도 전달인자로 key를 추가해야한다.
listProduct의 기존의 sql 명령 
... (select * from product order by pseq desc) p) ...
에서 

... (select * from product where name like '%'||?||'%' order by pseq desc) p) ...
이 된다.


------문제 1 - 여기까지 했다면 검색 버튼을 눌렀을때는 검색이 기능하지만, 하단의 페이지 숫자를 누르면 전체 페이지로 넘어가버린다!

--> 원인!
 검색 버튼을 누르면 go_search 스크립트를 실행시켜 submit()을 실행시킨다. submit은 모든 내용을 가지고 가기 때문에 검색어로 사용한 key 를 가져간다.
 하지만 페이지 버튼은 key 값이 같이 넘어가지 않아 검색어가 없는 상태가 된다!

----> 해결방법!
key를 넣어준다!
<c:otherwise>
	<a href="${action}&page=${index}&key=${key}">${index}</a>&nbsp;
</c:otherwise>


------문제 2 - 빈칸에 검색 버튼을 누르면 아무것도 일어나지 않는다! (문제는 아니다..)
--> 원인!
 go_search() 스크립트를 짤때 빈칸이 들어가면 그냥 return 되도록 만들었기 때문이다!

--> alert를 만들어서 빈칸검색시 경고를 하도록 만들었다.




--------------- 전체보기 버튼 기능 만들기

- go_total() 스크립트를 제작한다.
--> 버튼을 누르면 key의 value를 빈칸으로 만들고 command를  adminProductList&page=1로 보낸다.




--------------- 상품등록 버튼 기능 만들기
※ 참고로 무언가 업로드하기 위해서는 library에(WEB-INF 폴더에) cos.jar 파일이 있어야 한다.

- go_wrt() 스크립트를 제작한다. 스크립트는 command를 submit해  AdminProductWriteFormAction 클래스로 이동하게 한다.

AdminProductWriteFormAction 클래스에서는 로그인 체크부터 하고 productWrite.jsp 페이지로 이동
--> 이동할땐 kindList라는 배열에 카테고리 이름들을 가져간다! 드롭다운 박스를 만들 예정!


----> productWrite.jsp	§ 사진 28
※ input에 onkeyup이라는 처음보는 속성이 있다! 무엇일까.

 관리자가 상품을 등록하는 페이지를 만든다. 반복문을 이용하여 드롭다운 박스를 만드는 방법을 보자.
----> 기능은 상품을 등록하는 등록버튼(go_save)과 목록으로 돌아가는 목록버튼(go_move)이 있다. 스크립트를 동작시킨다.

------> go_save 스크립트를 만든다. 안 쓴 내용이 있는지 체크하도록 하고, 전부 통과하면 submit을 통해 command adminProductWrite로 AdminProductWriteAction 클래스로 입력한것들을 가지고 보낸다.

--------> AdminProductWriteAction 클래스
할 일은 보내진 데이터를 DB에 저장하고 adminProductList로 돌아가는 것.

※ 파일 업로드를 위해서는 ServletContext, MultipartRequest가 필요하다!

-> ProductVO 객체에 보내진 데이터를 담는다
--> Dao의 insertProduct(pvo) 메소드를 이용해서 DB에 저장한다. 메소드에는 정보가 담긴 pvo를 전달인자로 보낸다.

----> insertProduct 메소드 제작. insert 명령으로 DB에 레코드를 저장한다.


※ 스크립트에 cal() 함수를 만든다! onkeyup이라는 속성을 사용하여 이 함수가 작동된다!
 원가/판매가의 input 태그에 onkeyup="cal()"을 넣고, cal() 함수에서는 둘 다 쓰였을 경우 작동하도록 조건을 달아둔다.



------------------ 상품 상세내역 보는 기능 만들기

- 메인 페이지(productList.jsp)에서 상품의 이름을 누르면 go_detail() 스크립트가 실행된다.
go_detail 스크립트에서는 command=adminProductDetail AdminProductDetailAction 클래스로 보내는데, 해당 물품의 번호인 pseq 값 또한 같이 가져간다.

--> AdminProductDetailAction 클래스에서는 이미 만들어져있는 메소드를 이용한다. 상품 정보로 해당 상품의 정보를 조회해오는 ProductDao의 getProduct 메소드를 이용한다. 
그리고 pvo에 받은 정보를 가지고 productDetail.jsp로 이동한다.


§ 사진 29
---> 웹 페이지상에 상품 상세 내역을 나타낼 productDetail.jsp 제작
종류, 이름, 사진, 가격, 내용이 나오도록 만든다.
----> 수정 버튼을 누르면 물품 번호 pseq를 가지고 가서 DB에 insert를 하는 동작을 수행하는 클래스로 넘기는 go_mod 스크립트로 이동한다.
----> 목록 버튼을 누르면 목록으로 되돌려보내는 go_mov 스크립트로 이동한다.


-----> go_mod 스크립트에서 command adminProductUpdateForm로 AdminProductUpdateFormAction 클래스로 이동한다.

-----> AdminProductUpdateFormAction 클래스에서는
전달받은 상품번호 pseq를 이용하여 하나의 상품 내역을 조회하고 리퀘스트에 저장해서 보낸다.
-----> productUpdate.jsp로 보낸다.


- productUpdate.jsp 에서는 상품 정보를 변경하는 웹을 만들고, 수정 버튼을 누르면 go_mod_save 스크립트로 이동시킨다.

go_mod_save는 command=adminProductUpdate로 AdminProductUpdateAction 클래스로 이동시킨다.

AdminProductUpdateAction 클래스에서는 productUpdate.jsp에서 전달되는 수정 데이터들을 받아 pvo에 저장한다.(사진의 경우 안 바꿨다면 oldImage로 저장한 데이터를 받는다.)
-> 그리고 AdminDao의 updateProduct() 메소드로 update 동작을 한다.
--> 그리고 제품 상세보기로 돌아가되, 해당 상품의 상세보기로 돌아가도록 url을 작성한다.





---------- 제품 상세보기에서 목록 버튼
 현재 목록 버튼을 누르면 몇페이지의 상품이던간에 1페이지로 가버린다!
 이를 해결할 방법은, AdminProductListAction 클래스에서 page를 받고나서 page 값을 session에 저장한다.
session.setAttribute("page", page);



그런데 위의 방법은 검색어에도 해당된다!
물건을 보고 목록으로 나오면 key 값을 잊어버리는데, 이를 session에 넣고 저장한 다음에 목록 버튼을 눌렀을 때 이를 가져와서 사용하는 방식으로!

