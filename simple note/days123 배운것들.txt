days123 배운것들


오늘도 Node.js에 대해 학습한다.



03_Object.js - js의 객체에 대해 학습중이다. (많다!)
======================================
참고로 console.log() 는 아무것도 안 쓰면 줄바꿈이 된다.


4. 객체와 관련된 키워드
- in : 해당 키(멤버변수)가 객체 안에 있는지 확인한다.
-> 존재 여부를 true, false로 나타낸다.

- with : 복잡하게 사용해야 하는 코드를 짧게 줄여 주는 키워드



5. 객체의 속성 추가와 제거
- 동적으로 속성(메서드 또한)을 추가하고 제거할 수 있다.


6. 생성자 함수 : new 키워드를 사용해 객체를 생성할 수 있는 함수.
- 생성자 함수를 사용한 객체의 생성과 출력.
-> 그냥 함수를 사용해 객체를 리턴하는 방법과 차이가 없어보인다.

--> 함수 안에 this 를 이용한 변수에 값을 넣으면 그 이름의 멤버 변수가 만들어지고, 최종 그 변수들을 멤버로 하는 객체가 만들어지는 생성자 함수로 인식된다.

---> 제작한 Student 함수는 생성자 함수이다. 이를 이용하여 객체를 만들 수 있다.
var std1 = new Student('홍길동', 88, 78, 98, 87);
이런식으로 std2, std3 등, 생성자 함수를 이용해 서로 다른 객체를 만들어낼 수 있다!




7. 프로토타입 (몰라도 크게 문제는 없지만, 개념적으로 중요하고 알아두면 편리함)
- 생성자 함수를 사용해 생성된 객체가 공통으로 가지는 공간.
-> 자바스크립트의 모든 생성자 함수는 내부의 this 변수들의 prototype을 갖는다. 그리고 prototype은 객체이다.


--> 위 말을 쉽게 말하자면...
--> 생성자 함수가 만들어지고, 그 안에 this 를 이용한 멤버변수가 정의되고, 초기화되면, 그 함수로 만들어질 객체를 위한 프로토타입이라고 하는 객체가 생성된다.
--> 프로토타입은 생성될 객체의 원본이 되는 객체이며, 프로토타입 또한 객체 형태로 존재한다.

var std1 = new Student('홍길서', 87, 98, 87, 45);
이렇게 객체가 생성되는 순간, 프로토타입의 사본이 std1에 저장되면서 새로운 객체를 이룬다.

---> 여기서 생성자함수에 추가로 멤버변수, 또는 멤버메서드를 추가하려고 한다면, 이는 프로토타입을 수정하는것과 같다!

Student.prototype.basicLanguage = 100;  // 멤버변수 추가!


☆ 종합!
- 프로토타입은 생성자 안에서 새로 만들어지는 객체에 복사되기 위해 준비되고 있는 공간이다.
- 그 안에 새로 만들어질 객체의 모습을 갖춘 객체이다.
- 생성자에 멤버변수와 멤버메서드를 추가하려면, 반드시 이 프로토타입을 이용하자!


※ 결론
- 객체를 생성후에 멤버메서드를 추가하느냐, 프로토타입에 메서드를 추가하고 객체를 만드느냐는 선택적으로 사용할 수 있다.
- 객체를 쓰다가 추가할건지, 일괄적으로 객체의 표본을 만들어둘것인가 차이다.

-> 일괄적으로 어떤 틀이 필요하면 맨 처음에 다 만들어두는거고
-> 뭐 하다가 필요한 경우에만 쓰이도록 만들것이냐의 차이이다!

// 예시가 있다.
--> A 객체를 먼저 만들고 메서드 X를 만들면 현재 A 객체에만 X 메서드가 추가되는 것이다.
--> 생성자에 prototype 을 이용하여 Y 메서드를 만들면 앞으로 만드는 객체들에 Y 메서드가 추가된다.




9. 상속 (거의 쓰지 않는다고 한다)
자바스크립트의 객체에도 상속 기능이 있다!

생성자함수 자체를 상속하는 예시를 썼다.

- 우선 사각형의 가로 세로 길이를 get, set 하는 Rectangle 함수를 제작한다.
-> 그리고 여기에 프로토타입으로 사각형의 넓이를 계산하여 출력하는 메서드를 추가한다.





10. Object 객체
- Object 객체의 toString() 메서드는 객체를 문자열로 변환할때 자동으로 호출한다.
-> toString 메서드를 재정의하여 사용할 수 있다.






04_Array.js
==========================================
자바스크립트의 배열의 요소는 함수, 객체, 또다른 배열도 넣을 수 있다.


- 배열에 요소를 추가, 제거하는 방법에 대해 학습.

-> 추가, 삭제하는 방법에는 여러가지가 있다.
--> 참고로 삭제에서 delete를 하게 되면 해당 자리의 값은 삭제되지만, 자리는 남는다.


splice, push, unshift 동작을 확인해보자.





05_ObjectArray.js
==============================================
생성자 함수로 배열의 요소를 추가할 수 있다.

- 객체를 생성해서 요소로 배열에 넣을 수 있으나, 바로 배열에 객체를 넣을 수 있다.
students.push(new Student('홍길남', 88, 88, 99, 77));

- 배열이 for 문에 사용되면 객체처럼 멤버변수들이 아니라 인덱스값들이 i에 전달되어 반복실행이 진행된다.



- 객체에 문자열 연선과 함수와 변수를 활용
-> 내용 확인...



- 멤버변수 생성하기
-> 이것도 내용 확인




- 객체의 구조분해 : 객체 내부의 멤버변수 또는 멤버 메서드를 별도의 변수에 따로 저장하여 별도로 사용하기 위한 문법
-> 객체 내의 함수를 별도의 변수에 저장할 수 있다.


- 객체의 구조분해를 하지 말아야 하는 경우
-> this를 사용하는 객체는 구조분해를 하지 않는것이 좋다.




- 객체의 구조분해를 한번에 실행하는 방법
-> 내용 확인





06_ArrowFunction.js - 화살표 함수 (이건 자주 쓰인다!)
============================================
기존에 내가 배운 함수의 표현 방법은
function 함수이름(매개변수){   } 
였다.

함수의 표현 방법 #1, #2 가 내가 배웠던 방식	



화살표 함수는 아래와 같다!
※ 함수의 표현 방법 #3-1
=> (x, y)=>{ }

모습만 변한 것이다.


※ 함수의 표현 방법 #3-2
const add4 = (x,y) => x+y;
함수의 몸체가 단순하게 매개변수들의 연산의 결과들을 return 하는 명령만 있을때 사용한다.



---> 이 후에는 매개변수, 리턴값의 유무 등의 유형별로 화살표함수를 어떻게 만드는지 확인한다.





07_Promise.js (이것도 많이 쓰인다!) <- 이거 진짜 잘 모르겠다... 대표적인 비동기 함수라고 하는데... 여긴 메모장에 거의 정리를 못 했다...
인터넷 검색 필쑤
--> 동기, 비동기란 무엇이며 둘의 차이는?
--> 비동기를 사용하는 이유는? 어떤 이점이 있지?
============================================
- 함수와 비슷한 기능을 갖고 있는 객체
- 객체 내의 익명함수의 내용을 실행하고, 결과를 보관하고 있다가, 결과가 필요할 때 전달받아 사용할수 있게 해주는 구조의 객체이다.


※ 전달인수로 전달되는 익명함수의 내용
- 익명함수에서 실행된 결과의 값이나 상태에 따라 resolve() 함수 또는 reject() 함수를 실행한다.



※ 동기실행, 비동기실행 차이를 알고 가자...
※ promise를 사용하지 않았을 때(동기식으로 무언가를 실행 => 비동기 명령 삽입)
작성한 예시에서...
-> 작성한 코드의 순서에 상관 없이 실행되는걸 비동기라고...하나?


- 동기실행
-> 명령이 무조건 순서대로 진행된다.

- 비동기실행
-> 먼저 끝나는 작업이 먼저 진행된다.



- Promise로 비동기 실행을 하면?
-> 예시 확인...




※ 결론 : 오래 걸리는 작업을 실행해두고 빨리 끝나는 작업을 처리한다고 생각하자...




- 연속 Promise의 사용






02_Internal_Module 폴더를 만든다.

자바스크립트에는 내장된 모듈이 많다. (console 이라던가)
이를 알아보는 시간을 가진다.

01_Console.js (출력값 사진 찍어)
=========================================
 console 에 대해 학습.

- console.log() : 출력

- console.error() : 에러 메세지는 여기에 담자

- console.table() : 안에 있는 객체 모양의 데이터들을 테이블 형태로 출력한다.

- console.dir() : 객체 내의 또다른 객체 등을 표현할때 많이 사용한다.
-> colors : 자료 표현 색 지정 유무, depth : 표현하고자 하는 깊이

- console.time('a'), console.timeEnd('a') : time부터 timeEnd 까지 걸린 시간을 출력한다. 괄호 안에 같은 글자 사이의 작동을 계산한다.

- console.trace() : 에러 추적...이건 뭔 소리야 함 인터넷 검색 ㄱㄱㄱ



02_Timer.js
===========================================
시간 관련 모듈이다.

- setTimeout(내용, 시간) : 지정된 시간 후에 한번 실행

- setInterval(내용, 시간) : 지정된 시간마다 반복 실행

- clearTimeout(a) : 아직 지정된 시간이 지나지 않았다면 a 실행전 종료

- clearInterval(a) : a 반복실행 종료

- setImmediate(a) : a 즉시실행

- clearImmediate(a) : a 즉시실행 종료