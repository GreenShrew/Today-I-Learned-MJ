days100 배운것들

오전에는 G15 게시판 제작을 마무리하였다.
오후에는 SQL문이 모여서 쓰이는 프로시저! 를 배운다! (이클립스 안 쓴다.)



※ 확인할것

1. board.js의 open_win 함수 확인
2. BoardController의 @RequestMapping("/boardEditForm") 확인
3. 2교시에서 @RequestMapping("boardUpdateForm") 에서 이름을 dto로 만든 이유좀 들어봐...
4. G15에 게시글 수정 버튼이 안 먹힌다...
4-1. 4를 수정하고 게시글의 수정이 잘 되는지 확인한다.
5. BoardDao.xml의 getCount 다 못 썼다.





※ 기능 문제발생...
1. 게시글 수정시에 비밀번호 안 쓴 상태에서 이미지 파일을 수정한 뒤 수정 버튼을 누르면 validation으로 인해 레코드의 수정은 이루어지지 않지만, 옛 파일 그림이 나오지 않고 수정하고자 선택한 그림이 미리보기로 나온다!
 이걸 해결하는 방법이 있을까?

--> 힌트... 전달되었던 내용을 다시 돌려주는 과정에서 선택한 파일도 사라지지 않고 다시 돌아가는 것이다!
 이를 imgfilename만 oldfilename으로 바꾸는 방법이 있을까 고민해본다~







댓글 기능 만들기
SpringBoot_G15_Board
=================================
- 댓글을 추가하는 기능인 @RequestMapping("/addReply")를 추가한다.
-> 페이지에서 가져온 정보를 ReplyVO에 담아서 이를 insertReply(); 메소드로 보낸다.

- 그리고 댓글을 추가한 뒤에는 페이지로 다시 돌아오는데, 게시물의 조회수를 증가시키면 안된다.
-> @RequestMapping("/boardViewWithoutCount") 를 만드는데, 기존의 mapping boardView와 비슷하다!
--> Service단도 비슷하지만, 게시글 조회수를 증가시키는 메소드만 빼버리면 된다.


- 댓글 삭제 기능을 추가한다.
-> 댓글 옆 '삭제' 버튼을 누르면 request deleteReply로 댓글 번호와 게시판 번호를 가지고 간다. (게시글 번호는 다시 게시물로 돌아오는 역할이다)

--> @RequestMapping("/deleteReply")을 제작한다.

---> 삭제가 된 뒤에는 다시 게시글로 조회수 증가 없이 돌아온다. boardViewWithoutCount 로 보낸다...







## 게시글 수정 기능
- boardView.jsp에서 게시글 수정, 게시글 삭제 버튼을 누르면 open_win이라는 js 함수로 각각 mapping boardEditForm, boardDeleteForm 과 게시글번호를 가져간다.

-> board.js의 open_win 함수에서는 팝업창 하나를 띄우고 mapping으로 보낸다.


--> @RequestMapping("/boardEditForm") 제작
--> 게시글의 비밀번호를 입력할 수 있는 팝업창으로 정보를 가져가도록 만드는 역할이다.
 여기서는 게시글번호 num값을 받아 model에 저장해주고, 이를 바탕으로 


---> 팝업창에서 비밀번호를 적고 확인을 누르면 request boardEdit 로 보낸다.

---> @RequestMapping("/boardEdit") 추가
 여기서는 해당 게시물 번호를 이용해 게시글의 내용과 비밀번호를 가져와 BoardVO에 저장한다.
 그리고 앞서 입력한 패스워드와 비교하여 틀리면 되돌아가고, 맞다면 boardCheckPass.jsp로 넘어가도록 만든다.


----> boardCheckPass.jsp 제작
 이전에 boardView에서 open_win 함수를 통해 넘어온 name값이 update 인지 delete인지 확인하고 self.close() 하는 스크립트를 만든다.

----> 게시글 수정이라면 mapping boardUpdateForm을 만든다.

-----> @RequestMapping("boardUpdateForm") 추가
여기서는 getBoard() 메소드로 게시글 내용을 긁어서 boardEditForm으로 넘어간다

------> boardEditForm.jsp에서도 역시 사진을 새로 업로드할 수 있다.
 근데 @Valid 도 쓸 거니깐 앞서 만든 팝업창으로 하는 방법을 적용한다!(day 99)
 이미 만들어진걸 그대로 가져다가 쓸 수 있다.

-------> 수정 버튼을 누르면 request boardUpdate 로 간다.

-------> @RequestMapping(value="/boardUpdate", method=RequestMethod.POST)에서는...
validation을 진행하고, 이미지를 교체하지 않았다면 옛 이미지를 쓰도록 만든다.

--------> DB에 레코드를 업데이트 해줄 updateBoard() 메소드를 제작한다.

※ 기능 문제발생...
게시글 수정시에 비밀번호 안 쓴 상태에서 이미지 파일을 수정한 뒤 수정 버튼을 누르면 validation으로 인해 레코드의 수정은 이루어지지 않지만, 옛 파일 그림이 나오지 않고 수정하고자 선택한 그림이 미리보기로 나온다!
 이걸 해결하는 방법이 있을까?

--> 힌트... 전달되었던 내용을 다시 돌려주는 과정에서 선택한 파일도 사라지지 않고 다시 돌아가는 것이다!
 이를 imgfilename만 oldfilename으로 바꾸는 방법이 있을까 고민해본다~



## 게시글 삭제 기능
- boardView에서 open_win 함수를 통해 request boardDeleteForm으로 이동한다.

-> @RequestMapping("boardDeleteForm") 에서는...
게시물 번호 num을 받아서 model에 넣고, boardCheckPassForm으로 넘겨서 게시물 비밀번호가 맞는지 체크하게 한다.

--> 체크 완료되면 request boardDelete로 온다.



## 게시물 목록에서 게시물 댓글 갯수 나타내는 기능
- 이는 Service단에서 해결한다.
-> selectBoardAll 메소드에서 board 내용을 긁어올때 board를 전부 긁어오는것만 하지 말고, 긁어온 








SQL문이 모여서 쓰이는 프로시저! 를 배운다!

===========================
- 이클립스를 사용하지 않는다.
-> 새로운 프로그램을 설치한다.


- 인터넷에 sql developer download 검색
-> Oracle 페이지 링크 들어간다
-> Platform이 Windows 64-bit with JDK 8 included 인 자료를 다운로드한다.
※ 설치해서 사용하는게 아니라 파일을 copy해서 쓰는 내용이다.

-> sqldeveloper 폴더에 접속
-> sqldeveloper.exe 마우스 우클릭으로 바탕화면에 드래그, 바로가기 만들기
※ 실행할때마다 이제 이걸로 실행하자.

-> sqldeveloper.exe 바로가기 실행
-> 이전 SQL 설치에서 환경설정을 임포트하시겠습니까? 에서 아니오 선택

-> 시작 페이지의 '수동으로 접속 생성' 클릭
-> 이름을 정한다 (여기서는 Oracle_DataBase)
-> 사용자 이름, 비밀번호를 넣고 저장 버튼을 누른다.

-> 연결에 성공했다면 좌측 접속 창에 내가 설정한 이름(Oracle_DataBase)이 나오고, + 버튼을 누르면 테이블, 뷰 등 내용이 펼쳐진다.

--> SQL 파일을 새로 만들고자 하면 좌측 상단 새로 만들기 아이콘 클릭 - 데이터베이스 파일 선택 - SQL 파일 선택한다.
--> 저장 위치는 내가 쓰고있는 workspace쪽에 넣는게 좋다.
--> TIL 폴더에 PLSQL 폴더를 만들고 여기에 01_PLSQL_Basic.sql 파일을 만든다.



## 01_PLSQL_Basic.sql

＆&&& 환경설정부터

※ 글자 크기는 상단 도구 - 환경설정 - 코드편집기 - 글꼴 에서 변경할 수 있다.

- 내용을 쓰고 실행하고자 하는 부분을 블록처리 후 좌측 상단 녹색 시작버튼을 누르면 sql이 실행된다.
-> 츄리닝 카페에서 days43의 오라클 예제파일을 받는다. (실습에 사용할 테이블 정보가 담긴 dmp 파일)

--> 다운로드한 압축파일을 Today-I-Learned-MJ의 backup 폴더에 넣는다.
--> backup 폴더에 압축을 푼다.

---> cmd로 접속한다. 위 파일을 다운로드 받은 위치로 이동한다.
명령 : cd C:\Users\Onion\Desktop\TIL\Today-I-Learned-MJ\backup

---> imp scott/tiger file=expall.dmp log=empall.log ignore=t grants=y indexes=t full=y



&&&& 시작
- 앞으로 배울 SQL 은 PL/SQL이다.

## PL/SQL 이란?
-> 다수의 SQL 명령이 모여서 하나의 작업모듈 또는 트랜젝션을 이룰때, 이를 하나의 블럭으로 묶어서 한번에 실행하게 하는 단위실행명령이다.


## 블럭
-> PL/SQL은 여러 블럭으로 구성되어 있는데, 쉽게 짐작할수 있는 실행할 SQL 명령이 모여있는 블럭 등이 있으며, 이는 명령의 실행단위가 된다.

-> 익명 블럭, 이름이 있는 블럭 등도 있다. 

-> 기능별로 이름부, 선언부, 실행부, 예외처리부로도 나누기도 한다.


--> IS(AS) : 이름부, 해당 블럭의 이름을 나타낸다.
--> DECLARE : 선언부, 변수를 선언할 수 있다!
--> BEGIN : 실행부, 실제 SQL 명령이 들어간다.
--> EXCEPTION : 예외처리부, 실행 예외 처리시 어떻게 처리할지 내용이 들어간다.
--> END;

--> 이렇게 PL/SQL 문이 구성된다.

---> 아래에는 익명 블럭 예시가 있다. (주석 확인)
num이라는 변수를 만들고, 여기에 값 100을 넣고, 이를 출력하는 블럭이다.

※ 화면 출력을 하기 위한 기능을 ON 하는 명령(이걸 해놔야 보인다..)
-> SET SERVEROUTPUT ON

※ 목표는 웹 사이트에서 전달받은 전달인수로 연산(SQL)하고, 결과를 웹사이트로 다시 리턴해주는 것
 현재는 그 상황까지 공부하지 못했으므로 내가 값을 넣어주고(num := 100;), 결과를 화면으로 출력한다(DBMS_OUTPUT.PUT_LINE(num);).



## 변수 선언
- 변수명 변수자료타입 := 초기값;
-> SQL 명령내의 '='와 구분하기 위해 ':='으로 사용한다.

※ 활용 예시
 첫번째 SQL에서 Orders 테이블에 레코드를 삽입하고, 가장 큰 oseq를 조회한 다음 그 값을 order_detail의 입력값으로 사용하려면 변수를 선언하고 값을 저장해서 활용한다.



## PL/SQL 의 자료형
- 기존의 SQL 자료형은 모두 포함하며, 자유롭게 사용이 가능하다(NUMBER, VARCHAR2 등...)
-> 추가적인 내용은 주석 확인



## 연산자
- 연산자도 크게 다를것은 없다. 조금 추가되는 내용은 주석으로...



## SQL 명령과 같이 실행되는 PL/SQL 예시
- SQL 명령과 같이 실행되는건 어떻게 만드는지 예시이다.

-> SQL 명령을 그냥 실행하면 '질의 결과' 에 나오는데, 이를 스크립트로 출력하고 싶다면?
--> DECLARE에서 변수를 생성하고, BEGIN 에서의 SQL문에서 사이에 'into 변수명'을 넣어 select 에서 얻은 내용을 변수에 저장한다.

---> 이렇게 저장한 변수는 훗날 다른 SQL에 insert 문구에 쓰이는 등의 방법으로 활용할 수 있다!



## select문으로 도출되는 결과가 두개 이상이라면?
- SQL 실행결과를 담을 변수를 담을 갯수만큼 만들고 INTO 절에 결과 필드의 순서에 맞게 위치시킨다.
-> 예시 있다.



## %Type
- 변수가 많아지면 자료형 맞추기도 번거로워질 수 있다.
-> 매칭할 필드의 이름과 %Type을 이용하여 자동으로 자료형이 맞춰지도록 한다



## 연습문제 1, 2, 3 
- 풀어보자!
-> 3 번 문제가 변수에 select로 값 받아와서 insert에 써먹는 그거야..


※ insert, update, delete 명령을 적용한 뒤에는 반드시 commit; 을 사용하자!