days132 배운것들 영상 있음
- 사진 찍어가면서 해

day131에서는 해시태그를 구현하고, 해시태그를 검색하는 기능을 제작하였다.








npm14
===========================================

- 이번에는 카카오톡 로그인 방법을 제작한다.
-> routers의 auth.js의 /kakao로 요청을 보낸다.

--> 여기 라우터는 그렇게 어렵지 않다.
--> 미들웨어가 따로 없고, 별도의 함수가 따로 호출 될 예정이다.
router.get('/kakao', passport.authenticate('kakao'));

---> passport 폴더에 kakaoStrategy.js 파일을 만든다.
---> 내용은 이전에 썼던 localStrategy.js와 비슷하다!

----> 여기서 clientID이 카카오톡 아이디로 로그인을 시도해서 카카오톡 회사에 내가 동의한 항목(이메일주소, 이름, 닉네임 등)이 전달되어 오는 객체이다.
----> 그리고 이 객체는 하단 익명함수에 profile로 들어간다!


-----> 그럼 카카오톡 로그인 정보를 어떻게 가져올까?
-----> https://developers.kakao.com/ 사이트로 접속한다. (네이버나 뭐 그런곳에도 이런 지원 사이트가 있다.)
-----> 사이트에서 로그인
-----> 상단에 내 애플리케이션 클릭
-----> 내 애플리케이션 추가하기
-----> 앱 이름을 쓰고 저장한다. 사업자명은 이름을 그냥 쓰자.
-----> 생긴 애플리케이션 클릭
-----> 플랫폼 항목의 플랫폼 설정하기 클릭 - 웹 개발중이니 Web 플랫폼 등록을 클릭
-----> 사이트 도메인의 경우 http://localhost:3000 를 넣는다. 내가 지금 사용하고 있는 도메인!
※만약 나중에 도메인을 산다면, 이 도메인 이름을 넣는다.

-----> 좌측에 카카오 로그인 항목 클릭
-----> 활성화 상태를 on으로 변경
-----> Redirect URI 에 http://localhost:3000/auth/kakao/callback 를 쓴다. 로그인 후에 여기 경로로 돌아갈 것이라는 의미이다.
 또한, 이 주소는 내가 kakaoStrategy.js에서 callback이라는 객체로 저장해둔 경로이다!

-----> 좌측에 동의항목 쪽 클릭
-----> 여기서 로그인할때 동의를 받는 항목을 설정한다.

-----> 좌측에 앱키 클릭
-----> REST API 키 앱키를 복사한다!
-----> 그리고 .env 파일 안에 붙여넣는다!
KAKAO_ID=복사한내용
-----> 이 앱 키를 사용하여 내가 만든 카카오 애플리케이션을 이용하여 로그인 정보를 받아오는 동작을 시도한다!

-----> 그리고 index.js에서 하단에 kakao(); 를 넣는다.
-----> 마지막으로 auth.js에 /kakao/callback 요청의 라우터를 추가한다.
-----> 이 라우터는 로그인 후 보내질 페이지이다.


※ 참고로 현재 model에서 user.js 파일을 보면 password가 null이 아니게 만들어놨다. 하지만 카카오톡에서는 비밀번호를 공개해주지 않는다. 따라서 null이 들어오므로, 이를 null값을 허용(true)로 바꾸어주어야 한다.
-> 또한, 테이블이 이미 있다면, 테이블의 컬럼을 Alter로 변경해주어야 한다.

--> 비밀번호 정보를 받아서 내가 비교하는것이 아니라, 내 웹에서 유저가 쓴 비밀번호를 카카오 회사로 보내서 이를 카카오에서 비교해서 결과를 가져오는 형식이다!



- 여기서 로그인이 끝이 아니다!
- 로그인이 되어있는 사람은 회원가입창에 들어가면 안 되고, 로그인이 안 되어있으면 글쓰기 창으로 가면 안 된다!
- 이러한 처리를 해주는 모듈을 제작한다!

-> index.js의 req.isAuthenticated() 함수를 사용한다. true, false로 사용되는 req의 내장 함수!
-> routers 폴더에 middleware.js를 만든다.
--> 여기서는 로그인 여부를 req.isAuthenticated()로 구분하는 모듈을 만든다. isLoggedIn, isNotLoggedIn 모듈 두개를 만들어서 로그인한 상태, 로그인하지 않은 상태일 때 다음 명령(또는 라우터)로 이동하는 익명함수를 두개 만든다.


---> 이 모듈을 어디에 쓸 것인가?
---> auth.js에서 쓴다. auth.js에 isLoggedIn, isNotLoggedIn 두 모듈을 require한다.
---> 그리고 '/join' 라우터의 url과 (req,res,next) 사이에 해당 모듈을 넣는다!
router.post('/join', isNotLoggedIn, async (req, res, next) 

----> auth.js에서만 쓰는게 아니라 page.js와 같은 곳에서도 쓸 수 있다!
----> 메인 페이지로 가는건 회원, 비회원 모두 가능하니 넣지 않지만, 회원가입 페이지를 띄우거나 내 정보를 보는 라우터는 로그인 여부가 필요하다!






- 팔로잉, 팔로워 기능을 만든다. main.html의 닉네임 자리 옆에 버튼을 추가한다.
-> 단, 내 게시물이 아니거나 포스팅한 유저를 아직 팔로잉하고 있자 않다면 버튼이 보이도록 만든다.
{% 이 명령이 좀 길다 %}


--> 글쓴이들을 중심으로 팔로잉 버튼이 여러개 나올 것이다!
--> 하단에 script를 짤때 이 버튼 중 하나를 콕 집어서 반응하도록 만들어야 한다!
--> 주석으로 설명되어있지만, 여기서도 한번 쓴다.
document.querySelectorAll('.twit-follow') <- class 이름이 twit-follow인 셀렉터들을 모두 선택한다.

document.querySelectorAll('.twit-follow').forEach(function(tag){

}; <- 그리고 그 태그들을 하나씩 tag에 전달하며 익명함수를 실행한다!

--> 그리고 전달된 tag를 이용하여 각 버튼들에 모두 클릭시 반응하는 이벤트리스너를 붙여서 사용한다.

--> 그리고 여기서 로그인 되어있는 사람의 정보를 가져오고(#my-id 에 저장된 값 가져온다)
--> 이 값이 있으면(즉, 로그인 되어있다면), 그리고 로그인 유저와 게시글의 작성자가 같지 않다면 '팔로우 하시겠습니까?' 를 한번 confirm으로 물어본다
--> 최종적으로 예 버튼을 누르면 '/user/folllow/${user.id}' url 로 axios를 호출한다.

---> 그럼 user.js에서 '/follow/:id' url의 라우터를 만든다
---> 여기서는 전달된 id값으로 로그인 유저의 user 정보를 조회한다.
---> 그리고 로그인되어있다면, follow 하는 동작을 한다.

----> 여기까지 하면 팔로우 기능이 동작한다.
----> 다만, 로그인유저 자신의 게시물은 팔로우 한 사람도 아직 팔로우버튼이 보인다. 

-----> index.js에서 세션 쿠키로 로그인 된 사람이 req.user에 저장되고 있었는데, 여기에 추가로 팔로워, 팔로잉 정보도 추가한다.



- 이제 req.user에 저장한 팔로워들의 아이디 리스트, 팔로잉 인원수를 체크해서 나타내도록 만든다.
-> page.js로 간다. 이전에는 팔로잉, 팔로워 숫자를 followerCount:0 으로 0이 나오도록 만들었다.
-> followerCount : req.user ? req.user.Follwers.length : 0
-> 이런식으로 팔로워가 있으면 req.user에 저장된 Followers의 길이를, 없으면 0을 출력하도록 만든다.

--> 그리고 followerIdList : [] 로 그냥 팔로워 리스트를 비워놨었다.
--> followerIdList : req.user ? req.user.Followings.map(f->f.id) : [],
--> 이런식으로 팔로워가 있으면 req.user에 저장된 Followings에 담긴 내용들을 반복실행하여 저장한다.

※ 참고로 as:'Followings' 를 사용하면, 이에 따른 메서드가 자동으로 생성된다! addFollowings, removeFollowings 등등...


---> layout.html에 {{followerCount}}, {{followingCount}} 에 위의 값이 들어간다.

---> 또한, 팔로우한 사람들에 대한 리스트가 전달되고있기 때문에, 팔로우한 사람들은 팔로우하기 버튼이 사라진다.




여기까지가 sns 프로젝트였다.
참고로 지금은 팔로잉 취소하기 기능이 없다. 이걸 차후에 만들어봐도 좋긴 하다..







05_Regix
============================================
NODEJS 폴더에 05_Regix 폴더를 만든다.
-> 그리고 그 아래 01_Regix01.js 를 만든다.



01_Regix01.js
========================================
정규표현식에 대하여 공부한다.

- 정규표현식이란 무엇인가? 정규표현식은 문자표현공식, 문자탐색 공식이라고 부르는 연산식과 같은 분류언어이다.
-> 이하 주석 확인

--> 간단하게 a.match(); 로 정규표현식을 사용한다.

- 문자 탐색에 쓰이는 / /
-> /abc/ 이면, abc로 구성된 문자열을 찾는다
--> /ab*/ 이면, ab, abb, abbb, abbb ... 이것들을 모두 찾는다.

---> a.match(/ 슬러시 사이에 문자를 넣어 사용! /);
---> var a = 문자열!
---> var b = a.match(/c/); 하면, a 변수 안에의 String 내용 중, 'c' 글자를 검색 매칭해주세요! 라는 의미이다.

----> var b = a.match(/c/g);  찾은것들을 꺼내보고 싶다면, 슬래쉬 뒤에 g를 넣는다!

var a = "gabbvdrfabgrdsagfrea";
-----> var b = a.match(/ab*/g);  의 의미는, a 변수 안의 String 내용 중 a로 시작하고 b가 몇개든 반복되는 글자를 검색 매칭해준다.
console로 보면, [ 'abb', 'ab', 'a', 'a' ] 가 나온다.

※ 참고로 console로 나오는 값 중에 index는 첫번째로 찾은 위치를 나타낸다.


- 문자 탐색에 쓰이는 [ ]
-> [abc] 이면 a 또는 b 또는 c 를 전부 찾는다.


※ g 명령에 대해 확인하고 가! 주석으로 정리 되어있다.



- 자주 사용하는 문자를 위한 정규형 패턴

- Dot(.) - 줄바꿈 글자인 '\n'을 제외한 모든 글자와 매칭!
a.b : a와 b 사이에 어떤 글자가 들어와도 매칭된다!
※ a.b와 a[.]b의 차이점에 대해 주석 설명 되어있다.


- 반복 * 와 +

- 반복 {m,n}




02_Regix02.js
==========================================
계속해서 정규표현식을 알아본다.

- 메타캐릭터(메타문자) : ^, $, | 등의 글자로 패턴을 표현한 글자들!







































































