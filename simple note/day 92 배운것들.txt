day 92 배운것들

※ 봐야할것들

- 게시물의 댓글 기능이 안된다!
--> 완료! 테이블 고치고 난리를 쳤다!



※ 참고!
- @RequestMapping(" ??? ")의 ??? 부분에 /boardDelete와 같이 쓰는데, / 를 빼고 boardDelete만 써도 무방하다.
 자동으로 / 를 붙여준다!














게시글 삭제하기 기능 만들기
====================================

-> @RequestMapping("/deleteReply") 제작
--> 여기서는 받을 내용이 1개뿐이므로, 이전에 사용했던 HashMap을 사용하지는 않는다.
---> 이것만 작성하면 댓글 삭제 기능은 완료





게시글의 수정기능 만들기 (§ 사진 13)
====================================
- BoardView에서 js의 open_win() 함수를 호출한다.
--> 'update' 가 함께 전달된다.


# 파일 수정하는 페이지를 만든다.
-> @RequestMapping("/boardEditForm")를 제작한다.
-> 번호를 가지고 boardCheckPassForm 로 넘기는 역할을 한다.

--> 게시글의 비밀번호를 확인하는 boardCheckPassForm.jsp 생성

---> @RequestMapping("/boardEdit") 생성.
---> 비밀번호가 맞는지 체크하고, 맞으면 boardCheckPass.jsp로 보낸다.

----> boardCheckPass.jsp 제작
----> 여기서는 이전 페이지에서 넘겨받은 name값이 update라면 RequestMapping이 boardUpdateForm로, delete라면 boardDelete로 넘어간다.

-----> @RequestMapping("/boardUpdateForm") 생성
-----> 게시글을 update하는 Form으로 해당 번호의 게시물 정보와 함께 보내는 역할을 한다.

------> boardEditForm.jsp 생성
------> 완성되면 (§ 사진 13) 이 나온다.



# 파일 수정하기 기능을 만든다.
-> @RequestMapping(value="boardUpdate", method=RequestMethod.POST) 를 만든다.




게시글 삭제기능 만들기
==============================================
- BoardView에서 js의 open_win() 함수를 호출한다.
--> 'delete' 가 함께 전달된다.


- @RequestMapping("boardDeleteForm")을 만든다.
-> 기존에 만들어둔 게시글을 가져오는 메소드같은걸 다시 이용할 수 있다.


--> @RequestMapping("boardDelete") 를 만든다.
---> 이러면 삭제 기능도 완료된다.







==============================================
-
-> 기존의 @RequestMapping("/boardList") 에 내용을 추가한다.
-> 다만, Controller에서 모든것을 하지 않을것이다. 이를 서비스에서 작업을 쪼개서 진행시켜 HashMap으로 받을것이다!


--> @RequestMapping("/boardList") 수정 (기존의 것은 주석처리를 하고 위에 추가로 작성했다.)









































