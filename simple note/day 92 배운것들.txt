day 92 배운것들

※ 봐야할것들

- 게시물의 댓글 기능이 안된다!
--> 완료! 테이블 고치고 난리를 쳤다!

- main.jsp에 페이징이 왜 안 나오지?
-> paging.java 부터 뭔가 잘못되었나?



※ 참고!
- @RequestMapping(" ??? ")의 ??? 부분에 /boardDelete와 같이 쓰는데, / 를 빼고 boardDelete만 써도 무방하다.
 자동으로 / 를 붙여준다!














게시글 삭제하기 기능 만들기
====================================

-> @RequestMapping("/deleteReply") 제작
--> 여기서는 받을 내용이 1개뿐이므로, 이전에 사용했던 HashMap을 사용하지는 않는다.
---> 이것만 작성하면 댓글 삭제 기능은 완료





게시글의 수정기능 만들기 (§ 사진 13)
====================================
- BoardView에서 js의 open_win() 함수를 호출한다.
--> 'update' 가 함께 전달된다.


# 파일 수정하는 페이지를 만든다.
-> @RequestMapping("/boardEditForm")를 제작한다.
-> 번호를 가지고 boardCheckPassForm 로 넘기는 역할을 한다.

--> 게시글의 비밀번호를 확인하는 boardCheckPassForm.jsp 생성

---> @RequestMapping("/boardEdit") 생성.
---> 비밀번호가 맞는지 체크하고, 맞으면 boardCheckPass.jsp로 보낸다.

----> boardCheckPass.jsp 제작
----> 여기서는 이전 페이지에서 넘겨받은 name값이 update라면 RequestMapping이 boardUpdateForm로, delete라면 boardDelete로 넘어간다.

-----> @RequestMapping("/boardUpdateForm") 생성
-----> 게시글을 update하는 Form으로 해당 번호의 게시물 정보와 함께 보내는 역할을 한다.

------> boardEditForm.jsp 생성
------> 완성되면 (§ 사진 13) 이 나온다.



# 파일 수정하기 기능을 만든다.
-> @RequestMapping(value="boardUpdate", method=RequestMethod.POST) 를 만든다.




게시글 삭제기능 만들기
==============================================
- BoardView에서 js의 open_win() 함수를 호출한다.
--> 'delete' 가 함께 전달된다.


- @RequestMapping("boardDeleteForm")을 만든다.
-> 기존에 만들어둔 게시글을 가져오는 메소드같은걸 다시 이용할 수 있다.


--> @RequestMapping("boardDelete") 를 만든다.
---> 이러면 삭제 기능도 완료된다.






메인 페이지에 페이징 추가해주기 (§ 사진 14)
==============================================
- main 페이지로 갈 때, BoardList와 Paging 두가지의 정보를 리턴받아 main으로 보낸다.
-> 기존의 @RequestMapping("/boardList") 에 내용을 추가한다.
-> 다만, Controller에서 모든것을 하지 않을것이다. 이를 서비스에서 작업을 쪼개서 진행시켜 HashMap으로 받을것이다!
-> 이러면 한번에 두가지 이상의 종류의 정보를 보낼 수 있다.

--> @RequestMapping("/boardList") 수정 (기존의 것은 주석처리를 하고 위에 추가로 작성했다.) 페이징 등등...


---> dto 패키지에 Paging 클래스 제작..


----> BoardService의 getBoardsMain을 주석처리한다. 왜냐하면 return값이 HashMap으로 바뀌었기 때문이다!
----> 새로운 getBoardsMain을 만든다!

-----> Controller에서는 HashMap으로 뭉쳐서 받고, Service에서는 페이징처리, 게시물 조회 그리고 댓글 갯수 조회 작업을 쪼개서 뭉친다.


------> 그리고 Dao에서 페이징 처리로 인해 매개변수가 생기는 getBoardsMain 메소드도 바꾸어준다.


-------> (§ 사진 14) 글 옆에 댓글 갯수와 게시글이 한 페이지에 10개만 나오는 것을 확인할 수 있다.





여기까지 하면 게시판 기능의 구현이 완료된것이다.
레거시 프로젝트는 여기까지...

 이 후 스프링부트나 전자정부 프레임워크를 쓸때도 Controller를 쓴다.
 Service쪽만 조금 바뀌겠지만, 어쨌든 이전 model2에서와는 달리 Service를 이용하여 기능을 쪼개는 방식으로 유지보수와 코드 작성을 쉽게 만들었다!

 이후 프로젝트에서는 Dao에서의 DB 연결이 간결해질 예정이다!
ShoppingMall을 다시 만들면서 이를 확인해보자!
---------------------------------------------------------------------



새로운 프로젝트를 시작하기 전에 이전 프로젝트에 우클릭 - close project를 눌러주자.
-> 이러면 파일은 삭제되지 않지만, 이클립스에 걸리는 부하가 적어진다!







새 프로젝트 생성 및 첫 페이지 제작
==========================================
Spring Legacy Project를 만든다.
이름은 SpringWeb03_ShoppingMall, Spring MVC Project를 선택해준다.


- pom.xml 수정
-> properties 의 자바 버전 수정
-> oracle repositories 태그 추가
-> dependencies 에 DataBase와 fileUpload를 위한 dependency 태그 추가
-> plugin 태그의 maven-compiler-plugin의 source와 target 을 1.8로 변경
-> maven update



- 프로젝트를 진행하며 필요한 것들을 만든다.
-> HomeController.java 삭제
-> controller, dao, dto, service 패키지 생성. (이번에는 util 패키지를 만들지 않는다.)
-> ProductController, ProductDao, ProductVO, ProductService 클래스를 각각 패키지에 만들어준다.
-> dao에 @Repository, Service에 @Service, controller에 @Controller 어노테이션을 추가해준다.

--> resources 에 필요한 폴더들을 만든다.
--> css, headerfooter, admin, images, product_images, sub01, sub02, sub03, sub04, script 폴더를 만들어준다. 10개의 폴더!




- 첫 페이지 제작
-> 우선 첫 페이지가 나오도록 만든다.
-> @RequestMapping(value="/", method=RequestMethod.GET) 을 생성.

--> views 폴더에 index.jsp 제작

---> 이전에 했던 WEB12_ShoppingMall에서 css, header, footer, images, product_images, script(member.js, mypage.js) 를 복사 붙여넣기 한다.


----> 복사해온 header에서 링크라던가 경로등을 고친다.











































