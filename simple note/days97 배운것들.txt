days97 배운것들





DB를 사용하기
SpringBoot_G09
==========================================
- 이전에 조별 프로젝트 할때는 preparedStatement, 이전 프로젝트에서는 template을 썼는데, 이번에는 template도 쓰고 mybatis를 쓴다.

- 프로젝트를 만들면서 available에 jdbc를 검색해서 JDBC API를 체크한다!


# DB 환경설정
- build.gradle, application.properties 수정, webapp 및 하위폴더 추가
-> application.properties에 oracle set 을 추가해준다.
--> JSP 사용준비, oracle 사용준비 끝!



# DB 사용
- views 폴더에 sql 파일을 생성한다.
-> id, name으로 이루어진 myuser 테이블을 만들고 5개의 레코드를 추가해주었다.

--> spg09 패키지에 UserDto 클래스를 만든다.
--> UserController, UserDao 클래스를 만들어둔다. (간단한 내용이므로 Service는 만들지 않았다.)

---> controller 에 페이지를 시작하는 @RequestMapping("/") 를 추가
---> DB의 myuser 테이블을 전부 조회(select)하여 데이터를 userlist.jsp로 보낸다.

# JdbcTemplate의 새로운 방법
----> list() 메소드를 Dao에 만든다.
----> template을 쓴다.
=> JdbcTemplate 에서 template을 불러온다.
=> 다만 Legacy 프로젝트에서는 Datasource를 넣고 뭐 어쩌구저쩌구 했으나...
=> JdbcTemplate를 @Autowired 로 가져다 쓰기만 하면 된다!

==> 그리고 template.query를 사용할 때 select 문의 경우,
==> template.query(sql, new BeanPropertyRowMapper<UserDto>(UserDto.class));
==> 이런식으로 사용하기만 하면 된다.
==> (UserDto.class를 쓰면...이게 맞나?) ResultSet 사용없이 검색 결과 레코드의 필드를 Dto 변수에 넣고, list에 add 동작을 실행한다. 결과 레코드 갯수 만큼 실행한다.



※ 드라이버 파일이 없을 경우!
프로젝트 우클릭, properties - java build path - libraries - add external jars 에서 ojdbc6.jar를 추가해야한다!
 원래는 이를 자동추가 시키나 이번에는 수동추가 시켰다. 다만, Refresh build gradle을 하면 사라져버린다!
 따라서 이 방법은 권장하지 않는다.







아주 간단한 게시판 만들기 (§ 사진 01)
SpringBoot_G10
===================================
- 오라클 드라이버 설정하기
-> 프로젝트를 만들며 available에 oracle을 검색해 Oracle Driver를 선택한다!
--> 선택하고 build.gradle을 가면 'ojdbc8' 이 들어왔다.
--> 8 정도면 6과 호환이 되기 때문에 그대로 쓸 수 있다!




- build.gradle, application.properties 수정, webapp 및 하위폴더 추가
-> JSP 사용준비, oracle 사용준비 끝!



# DB 추가
- views 폴더에 sql 파일을 만들고 bbs 테이블을 제작 및 레코드 추가


- bbs 테이블 형태 그대로 dto를 만든다.
-> spg10 패키지에 BbsDto 제작
-> spg10 패키지에 BbsController, 


- Dao 파일을 넣을 Dao 패키지를 만든다
-> 그리고 Dao를 만드는데, Class가 아니라 Interface로 만든다!
-> IBbsDao 인터페이스 제작

--> 공동 프로젝트에서 미리 결정해둔 사항으로 interface를 제작하여, 어떤 메소드를 만들지, 해당 기능에 어떤 매개변수가 쓰일지, 어떤 값으로 리턴할지 정해두는 것이다.

---> mybatis에서 필수!

----> 그리고 dao 패키지에 BbsDao 클래스를 만들고, IBbsDao를 implements 시킨다.
----> 이렇게 하면 어떤 메소드를 만들지, 어떤 변수명을 쓸지 미리 정해져있기 때문에 일이 한결 수월해진다. 내용만 채우면 되니깐!




# 본격 제작
- 리스트를 조회해서 list.jsp로 이동시키는 @RequestMapping("/") 제작
-> dao의 list() 메소드 내용을 채운다.

--> list.jsp 제작 (§ 사진 01) 이 나온다.


---> writeForm.jsp로 보내는 @RequestMapping("writeForm") 추가
---> writeForm.jsp 제작

----> 작성한 글을 DB에 넣는 @RequestMapping("write") 추가, return "redirect:/";를 통해 메인 페이지로 보낸다.
----> write 메소드에서 template.update 이용
----> (§사진 02) 처럼 새로운 글을 작성할 수 있게 된다.
































































































































































