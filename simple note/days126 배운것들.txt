days126 배운것들 - 녹화해둠
- 사진 몇장 찍어놨으니 나중에 복습하면서 확인하자

오늘을 Express 서버를 만들것이다! 중요!


※ exit 지우고 왜 start 쓰는거지?




04_Express - npm01 (사진 찍어둠)
※ app.js 파일 하단에 내용 정리되어있다!
===========================================
express 폴더 아래에 npm01, npm02 폴더 두개를 만든다.


※ 한번 검색해봐
터미널에서 cd 명령을 통해 npm01 폴더에 들어가고, npm init 명령을 쓴다.
-> 초기 명령을 초기화 하고, 필요 파일들이 만들어지는 명령이라고 보면 된다!

--> entry point 는 최초 시작 페이지 설정이다. 여기서는 app.js로 설정한다.

---> 작업을 끝내면 npm01 폴더 아래에 package.json 파일이 생간다. pom.xml, build.gradle 같은 역할을 한다.

----> 근데 이건 역할이 반대이다. dependencies를 여기에 써서 설치하는게 아니라, 설치된 dependence 가 여기 쓰여지는 것이다.

※ 여기서 exit 부분을 아래와 같이 바꾼다
"scripts": {
    "start": "nodemon app"
  }



-> 터미널에 npm install express, 또는 npm i express 를 명령한다. (express 서버를 다운로드 설치 하였다.)
-> 터미널에 npm i -D nodemon 을 명령한다 (D는 Developer mode 를 의미)
--> 뭔가 쓰고 저장하면 서버를 끄고 켜는 동작을 해야한다.
--> nodemon을 이용해서 서버를 시작하면 중요한 저장을 할 때마다 서버가 자동으로 새로고침 된다. 따라서 이러한 번거로움이 사라진다!


---> 여기까지 하면 package.json 의 dependencies 들이 추가되고, package-lock.json, node_modules 가 생긴다.


----> 참고로 node_modules 폴더는 용량이 크다... 배포시에는 지워서 보내는데, 나중에 cmd에 npm i 만 쓰면, package.json에 쓰여진 다운로드 받았던 내용들이 자동으로 다운로드 된다!




- package.json 에서 잘 보면, 내가 npm 초기화를 할 때 첫 페이지를 app.js 파일로 했던걸 알 수 있다.

- app.js 파일 생성
-> 여기에 서버를 만든다. get 방식으로 url이 '/' 인 페이지로 간다...
--> 제작 후에 cmd에 npm start 를 작성한다.

....

※ app.js 파일 하단에...
1. 서버 구동에 핵심이 되는 파일 app.js에서 사용한 중요 메서드
2. express 서버 구동 순서
3. nodemon을 사용하면 좋은점!
에 대해 정리했다! 이거 봐!






npm02
파일 웹에 나타내기
=========================================
- 이제 npm01에서 했던것처럼 터미널에 명령하여 기본 셋팅(첫 시작을 app.js 파일로)을 하고, express 서버에 필요한 자료와 개발을 편하게 하기 위한 nodemon을 설치한다.

-> 그리고 첫 시작을 할 app.js 파일을 만든다.



- 이전에는 파일의 내용을 읽어서 웹에 출력했다면, Express 서버는 파일을 그대로 가져와서 이걸 웹에 표시할 수 있다!

-> 웹 페이지에 나타낼 index.html 제작

--> http 에서는 상대경로를 사용했다면, Express 에서는 절대경로를 이용한다.


※ 02_Internal_Module의 04_Path 에서 공부한 경로와 관련된 내용을 쓸 것이다.
console.log(__filename); : 현재 사용중인 파일의 이름
console.log(__dirname); : 현재 파일이 위치한 경로
path 모듈!


-이번에는 파일을 열고, 내용을 꺼내서 클라이언트에 보내는게 아니다. 파일 자체를 보낸다.
-> 사용되는 메서드는 res.sendFile();
path.join()

res.sendFile(path.join(__dirname,'/index.html'));
--> path.join() 메서드와 __dirname으로 해당 이름의 html 파일을 선택, 이를 sendFile로 파일을 보낸다.



npm03
===========================================
- 라우터가 무엇인지 주석 썼다.
-> 그리고 미들웨어에 대한 내용도 있다.


※ listen으로 대기하는건 http에서도 썼다. 여기서 중요한건 url을 이전처럼 if문으로 분리하느냐, get, post 등의 객체의 라우터로 나누느냐의 차이이다.


- 미들웨어만을 위한 멤버함수(라우터) 설명
-> 주석으로 되어있다.

※ app.js에는 순서가 뒤죽박죽인데, 번호 순서대로 공부하면 된다.
1. 모든 라우터들이 실행되기 전 실행되는 라우터 (next()를 붙여줘야 한다.)

2. 특정 request 키워드에서만 실행할 미들웨어
-> app.use('/about', ~~~) 처럼, 안에 실행될 특정 url을 써두면 된다. 그럼 /about 에 대한 라우터가 실행되기 전 해당 미들웨어가 실행된다. 

4. 에러발생 및 에러 처리 라우터

5. 에러 처리의 또다른 형태


※ next(error); 처럼 next에 error가 인수로 들어가면 에러처리 라우터로 이동한다.
 next(router) 처럼 next에 router가 인수로 들어가면 다음 미들웨어로 이동하라는 뜻


6. 404 에러 처리 - 404 에러 처리를 따로 만들어주어야 한다!

7. 리퀘스트 키워드의 와일드카드 문자
-> http://localhost:3000/category/sandal 와 같이 정의되지 않은 url으로 가면 와일드카드가 발동된다.

8. 미들웨어의 특성







npm04
============================================
- 이번에는 개발하는데에 필요한 모듈들을 추가로 설치하고 require 하여 진행한다.
-> morgan, cookie-parser, express-session, body-parser
-> npm i morgan cookie-parser express-session body-parser 필요한 모듈의 설치는 이렇게...
-> npm i 쓰고 뒤에 이름을 띄어쓰기와 함께 쓰면 모두 설치된다.

--> 모듈들의 설명은 주석에 있다.

---> 필요에 의해서 추가적으로 설치하는 쓰는 모듈이다!



- 공통 미들웨어 설정
-> 설치하고 require 한다고 바로 쓸 수 있는게 아니다!





























































































































































































