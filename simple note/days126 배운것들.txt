days126 배운것들 - 녹화해둠
- 사진 몇장 찍어놨으니 나중에 복습하면서 확인하자

오늘을 Express 서버를 만들것이다! 중요!


※ 의문!
- exit 지우고 왜 start 쓰는거지?

※ 04의 app 내가 만든거 post인지 get인지 확인좀

※ 05에서 index.html axios 부분 한번 다시 확인해... 로그인이 안 된다. 동일하게 index.html을 끌어다 쓴 06도 안 된다!
-> app.js 상단에 const exp 이건 뭐야....?

※ 07 의 html 못 썼다!


04_Express - npm01 (사진 찍어둠)
※ app.js 파일 하단에 내용 정리되어있다!
===========================================
express 폴더 아래에 npm01, npm02 폴더 두개를 만든다.


※ 한번 검색해봐
터미널에서 cd 명령을 통해 npm01 폴더에 들어가고, npm init 명령을 쓴다.
-> 초기 명령을 초기화 하고, 필요 파일들이 만들어지는 명령이라고 보면 된다!

--> entry point 는 최초 시작 페이지 설정이다. 여기서는 app.js로 설정한다.

---> 작업을 끝내면 npm01 폴더 아래에 package.json 파일이 생간다. pom.xml, build.gradle 같은 역할을 한다.

----> 근데 이건 역할이 반대이다. dependencies를 여기에 써서 설치하는게 아니라, 설치된 dependence 가 여기 쓰여지는 것이다.

※ 여기서 exit 부분을 아래와 같이 바꾼다
"scripts": {
    "start": "nodemon app"
  }



-> 터미널에 npm install express, 또는 npm i express 를 명령한다. (express 서버를 다운로드 설치 하였다.)
-> 터미널에 npm i -D nodemon 을 명령한다 (D는 Developer mode 를 의미)
--> 뭔가 쓰고 저장하면 서버를 끄고 켜는 동작을 해야한다.
--> nodemon을 이용해서 서버를 시작하면 중요한 저장을 할 때마다 서버가 자동으로 새로고침 된다. 따라서 이러한 번거로움이 사라진다!


---> 여기까지 하면 package.json 의 dependencies 들이 추가되고, package-lock.json, node_modules 가 생긴다.


----> 참고로 node_modules 폴더는 용량이 크다... 배포시에는 지워서 보내는데, 나중에 cmd에 npm i 만 쓰면, package.json에 쓰여진 다운로드 받았던 내용들이 자동으로 다운로드 된다!




- package.json 에서 잘 보면, 내가 npm 초기화를 할 때 첫 페이지를 app.js 파일로 했던걸 알 수 있다.

- app.js 파일 생성
-> 여기에 서버를 만든다. get 방식으로 url이 '/' 인 페이지로 간다...
--> 제작 후에 cmd에 npm start 를 작성한다.

....

※ app.js 파일 하단에...
1. 서버 구동에 핵심이 되는 파일 app.js에서 사용한 중요 메서드
2. express 서버 구동 순서
3. nodemon을 사용하면 좋은점!
에 대해 정리했다! 이거 봐!






npm02
파일 웹에 나타내기
=========================================
- 이제 npm01에서 했던것처럼 터미널에 명령하여 기본 셋팅(첫 시작을 app.js 파일로)을 하고, express 서버에 필요한 자료와 개발을 편하게 하기 위한 nodemon을 설치한다.

-> 그리고 첫 시작을 할 app.js 파일을 만든다.



- 이전에는 파일의 내용을 읽어서 웹에 출력했다면, Express 서버는 파일을 그대로 가져와서 이걸 웹에 표시할 수 있다!

-> 웹 페이지에 나타낼 index.html 제작

--> http 에서는 상대경로를 사용했다면, Express 에서는 절대경로를 이용한다.


※ 02_Internal_Module의 04_Path 에서 공부한 경로와 관련된 내용을 쓸 것이다.
console.log(__filename); : 현재 사용중인 파일의 이름
console.log(__dirname); : 현재 파일이 위치한 경로
path 모듈!


-이번에는 파일을 열고, 내용을 꺼내서 클라이언트에 보내는게 아니다. 파일 자체를 보낸다.
-> 사용되는 메서드는 res.sendFile();
path.join()

res.sendFile(path.join(__dirname,'/index.html'));
--> path.join() 메서드와 __dirname으로 해당 이름의 html 파일을 선택, 이를 sendFile로 파일을 보낸다.



npm03
===========================================
- 라우터가 무엇인지 주석 썼다.
-> 그리고 미들웨어에 대한 내용도 있다.


※ listen으로 대기하는건 http에서도 썼다. 여기서 중요한건 url을 이전처럼 if문으로 분리하느냐, get, post 등의 객체의 라우터로 나누느냐의 차이이다.


- 미들웨어만을 위한 멤버함수(라우터) 설명
-> 주석으로 되어있다.

※ app.js에는 순서가 뒤죽박죽인데, 번호 순서대로 공부하면 된다.
1. 모든 라우터들이 실행되기 전 실행되는 라우터 (next()를 붙여줘야 한다.)

2. 특정 request 키워드에서만 실행할 미들웨어
-> app.use('/about', ~~~) 처럼, 안에 실행될 특정 url을 써두면 된다. 그럼 /about 에 대한 라우터가 실행되기 전 해당 미들웨어가 실행된다. 

4. 에러발생 및 에러 처리 라우터

5. 에러 처리의 또다른 형태


※ next(error); 처럼 next에 error가 인수로 들어가면 에러처리 라우터로 이동한다.
 next(router) 처럼 next에 router가 인수로 들어가면 다음 미들웨어로 이동하라는 뜻


6. 404 에러 처리 - 404 에러 처리를 따로 만들어주어야 한다!

7. 리퀘스트 키워드의 와일드카드 문자
-> http://localhost:3000/category/sandal 와 같이 정의되지 않은 url으로 가면 와일드카드가 발동된다.

8. 미들웨어의 특성







npm04
============================================
- 이번에는 개발하는데에 필요한 모듈들을 추가로 설치하고 require 하여 진행한다.
-> morgan, cookie-parser, express-session, body-parser
-> npm i morgan cookie-parser express-session body-parser 필요한 모듈의 설치는 이렇게...
-> npm i 쓰고 뒤에 이름을 띄어쓰기와 함께 쓰면 모두 설치된다.

※ 참고로 express를 require 할 수 있는 이유는, 내가 npm i express 로 설치했기 때문이다!

--> 모듈들의 설명은 주석에 있다.

---> 필요에 의해서 추가적으로 설치하는 쓰는 모듈이다!



- 공통 미들웨어 설정
-> 설치하고 require 한다고 바로 쓸 수 있는게 아니다!



※ http서버에서의 쿠키를 불러오고 저장하는 방식과 express 서버에서의 쿠키를 불러오고 저장하는 방식
-> express로 쿠키를 다루는게 더 간단함을 알 수 있다.



※ '/login' - Express 서버에서 전달 파라미터를 분해하는 방법
-> http 서버에서는 parse 로 분리해서 복잡하게 했는데, Express 서버에서는 req.body.name 으로 끝난다!
--> 그리고 분해한 파라미터를 이용하여 쿠키를 새롭게 저장하고, 이를 redirect를 이용해 특정 리퀘스트로 이동한다.

※ '/logout'
-> 주석에 써둔 쿠키를 삭제하는 방법을 토대로 로그아웃 하고, / 요청으로 리다이렉트 하는 라우터를 내가 만들어보았다.
--> express 서버에서 전달 파라미터를 활용하는 과정 이걸 활용해야한다!

---> 이러면 로그아웃도 가능해진다!










npm05
=============================================
이번에는 아이디, 비밀번호를 가지고 로그인 페이지를 만들것이다.

- 셋팅 하면서 express morgan cookie-parser와 nodemon을 설치한다.

-> 로그인 페이지로 쓸 index.html도 만들자.
--> axios를 이용하여, 로그인 실패시 화면전환 없이 다시 index.html로 되돌아오도록 만든다.
---> 이를 위해 body 태그 내에 script 태그를 제작한다.

----> script 에서는 로그인 확인 요청, 로그인 성공시 확인 페이지로 보내는 요청을 app.js로 보내는 역할과, 로그인 실패시 axios를 이용하여 페이지 전환 없이 다시 돌아오는 동작을 한다.



- app.js를 본다.
-> 기본적으로 require 해야할 것들(express, path, cookie-parser, morgan)을 추가한뒤, 이를 사용하기 위한 공통 미들웨어 설정을 하고, express 설정을 한다.
--> url '/' 요청을 작성한다. cookies에 id가 있으면 반갑습니다, 아니면 index.html을 띄운다.



- 다시 index.html

-> id, pw 값을 가지고 method가 post인 url '/login'을 요청한다. 다만, 페이지 변환 없이!
--> axios 가 비동기 방식이므로 await - try~catch - async 를 사용한다.

---> '/login' 요청에서 돌아온 응답에서 msg 내용이 'ok'라면 '/' 로 요청을 보낸다.
---> 아니라면 message라는 id를 가진 태그에 넘어온 res.data.msg 내용을 출력하게 만든다. 그리고 적었던 id, pw 내용을 지운다. index.html에 그대로 담게 된다.



- 다시 app.js
-> post 방식의 '/login'을 제작한다.








npm06
============================================
이번에는 express session 도 사용할것이다.

- index.html는 05의 것을 그대로 쓴다.

- app.js에서
-> express-session 를 require 하고 나면 이를 설정을 해줘야한다. 설정한다.

--> 하단에 세션에 값을 저장하는 방법에 대해 주석으로 정리했다.
 엄청 간단하다!


---> 로그인, 로그아웃을 세션에 저장하고 삭제하는 방식으로 만들었다.
---> 세션만 쓸때는 엄청 간단하다!






npm07 (day 127에서 npm08로 연습을 한다. 주석으로 설명 달아뒀으니 잘 이용하자.)
(day 127로 넘겨도 된다.)
=================================================
이번에는 파일을 업로드하는 기능까지 추가한다.
쿠키랑 세션은 싹 빼고 파일 업로드 방법만 다룬다.

- 초기 셋팅을 할때 multer와 express만 install 하도록 한다. + nodemon도 추가

- multer.html 생성
-> 파일을 업로드 하는 form 을 만든다.
--> 참고로 여기에서도 multipart/form-data 를 사용하고 있음을 확인하자


- app.js에서 '/'는 업로드하는 페이지로 이동


- Spring에서 파일 업로드할때 파일을 업로드 시킬 폴더를 미리 만들어놨었다...
-> 근데 Express 서버는 내가 만드는게 아니라 코드로 폴더가 없으면 만들라고 시킨다!
--> 코드 작성 후 서버 실행시 폴더를 찾고, 없으면 생성




- 이제 파일 업로드를 위한 multer 객체를 만든다.
-> 주석과 코드 확인...들어가는게 많다! 목적지, 파일 이름, 파일 크기 한계를 정한다!
--> 그리고 여기에는 같은 파일 이름을 바꿔주는 defaultNamePolicy 가 없다! 이걸 내가 처리해줘야한다..



- 이제 url 요청이 /upload 인 라우터를 만든다.
-> upload.single('image') 에서 파일은 이미 업로드 되고, 그 다음 따라오는 익명함수에서 필요한 동작을 만든다.
--> 전달받은 파일 title과 이름을 return 해준다.



- 다시 multer.html로 가서
- 리턴받은 title, filename을 이용해서 파일 이미지와 메세지를 표시할것이다.

-> 업로드는 되는데 업로드한 사진이 나오지 않는다....?
--> Spring 프로젝트에서 정적 파일들을 보관하는 static처럼, 여기도 그러한 폴더를 지정할 필요가 있다!
app.js에 아래 코드 추가
app.use('/', express.static(path.join(__dirname, 'uploads')));

---> 그러면 사진이 나온다!

