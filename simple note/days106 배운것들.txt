days106 배운것들

==> 오늘도 M17 프로젝트를 만들었다.





## 진행중인 주문내역 기능(§ 사진 10)
- @RequestMapping(value="/myPage") 추가 <-- 좀 길다
-> 로그인 조회
-> 현재 로그인 중인 유저의 진행중인 주문번호 리스트 조회
-> 현재 로그인 유저의 진행중인 주문들의 "주문번호들" 조회
-> 주문번호별 주문내역을 조회
-> 조회한 내용을 바탕으로 첫번째 상품의 상품명을 "XX 포함 X건" 이라고 수정
->추출한 첫번째 상품의 가격을 총 가격으로 수정
-> 주문 번호별 대표 상품(첫번째 상품)을 별도의 ArrayList의 객체 finalList로 모아서 modelandview에 저장한다!


--> listOrderByIdIng() 메소드 추가 <-- 현재 로그인 유저의 진행중인 주문들의 "주문번호들" 조회

※ 조회는 @Transactional(rollbackFor = Exception.class) 안 붙인다!

---> OrderDao.xml 에 id가 listOrderByIdIng인 select 태그 생성

----> 여기까지 하면 (§ 사진 12) 화면이 나온다



## 총 주문내역 확인 기능 (§ 사진 11)
- @RequestMapping(value="/orderAll") 추가
-> 근데 이건 @RequestMapping(value="/mypage")와 비슷하다!
-> listOrderByIdIng() 이 메소드만 변한다!
--> listOrderByIdAll() 메소드 제작 <-- 진행중인 주문만이 아니라 모든 주문을 가져온다!

---> 여기까지 하면 (§ 사진 11) 화면이 나온다




## 주문내역 상세보기 (§ 사진 12)
- 'XX 포함 X건' 옆에 있는 '조회' 버튼을 누르면 실행된다.
-> @RequestMapping(value="/orderDetail") 추가
--> 메소드들은 기존에 만들었던 메소드를 사용한다!

---> mypage 폴더에 orderDetail.jsp 추가

----> 여기까지 하면 (§ 사진 12) 화면이 나온다




## 상품 즉시 구매 기능 (§ 사진 13)
- 상품 상세보기 페이지에서 '즉시구매' 버튼을 누르면 실행된다.
-> mypage.js 의 go_order() 함수에서 orderInsertOne request로 보낸다!
-> 주문 수량과 상품 번호를 controller로 가져와서 주문을 추가한다.
(카트에서 주문하는게 아니기 때문에 이를 가져와서 만들어야 한다.)

--> @RequestMapping(value="/orderInsert")와 비슷하다!
--> @RequestMapping(value="/orderInsertOne") 추가

---> insertOrderOne() 메소드 생성
---> OrderDao.xml에 id가 insertOrderOne인 insert 태그 제작
---> insertOrderOne 프로시져 제작 후 컴파일!



----> 여기까지 하면 즉시 구매 기능이 작동한다. (§ 사진 13)





## qna 리스트 페이지 (§ 사진 14)
- QnaDao.xml, IQnaDao 인터페이스, QnaService 클래스, QnaController 클래스를 만든다.
-> include 파일에 sub04 폴더 및 파일을 넣는다.
--> views 폴더 아래에 qna 폴더를 생성한다.
---> qna 폴더에 qnaList.jsp, qnaView.jsp, qnaWrite.jsp를 먼저 넣어둔다.


- @RequestMapping(value="/qnaList") 추가
-> listQna() 메소드 작성
-> QnaDao.xml에 id가 listQna인 select 태그 추가
-> listQna 프로시져 생성 후 컴파일

--> (§ 사진 14) 가 나온다.




## qna 내용 확인하기 (§ 사진 15)
- @RequestMapping("/qnaView") 추가
-> getQna() 메소드 제작
-> QnaDao.xml에 id가 getQna인 select 태그 추가
-> getQna 프로시져 생성 후 컴파일

--> (§ 사진 15) 가 나온다.



## qna 작성하기 기능 (§ 사진 16)
- QnaVo를 제작한다.

-> @RequestMapping(value="/qnaWrite") 제작
--> 작성한 qna 내용을 insert 해주는 insertQna() 메소드 제작

※ insert 하는 내용은 DB의 레코드를 추가하는 행위... DB를 조작하므로 중간에 에러가 났을 시 이를 취소시키기 위해 Service 클래스에서 @Transactional(rollbackFor = Exception.class) 를 추가해주어야 한다!

---> qnaWrite.jsp 수정

----> 그러면 (§ 사진 16)이 나온다.






※ 이번 파일 업로드는 Ajax를 써서 올릴 예정이다!

## 관리자 페이지 만들기 (§ 사진 17)
- AdminDao.xml, IAdminDao 인터페이스, AdminService 클래스, AdminController 클래스를 제작한다.
-> AdminController 에는 AdminService 뿐만 아니라 ProductService 클래스를 쓸 예정이며, 파일 업로드를 위한 ServletContext를 쓸 예정이므로 어노테이션 @Autowired가 더 추가된다!


- adminLoginForm.jsp로 이동시켜주는 @RequestMapping("/admin") 추가
※ header.jsp 에 admin으로 가기 위한 버튼을 추가한다.

-> 예전 ShoppingMall 프로젝트에서 쓰던 admin 폴더를 통째로 views 폴더 아래에 넣는다.

--> 그러면 (§ 사진 17)이 나온다.




## 관리자 로그인 기능 (§ 사진 18)
- 버튼을 누르면 worker_check() 함수로 간다.
-> @RequestMapping("/adminLogin") 추가
--> getAdmin() 메소드 제작, 로그인 체크!


## 로그인 후 메인 페이지로 이동
- productList가 request인 요청으로 가는데, 할게 엄청 많다!

-> 우선 페이징이 필요하다. dto 패키지에 Paging.java 를 넣는다.

--> 다시 Controller로 돌아와서, 전달되는 페이지, 검색어 설정을 한다.

---> 이제 페이징 처리를 한다.

#1. 전체 게시물 갯수를 조회해서 cnt 에 저장한다.
----> getAllCountProduct() 메소드 생성
----> xml에서는, cnt 로 전달받는 값이 정수 하나이다!
----> getAllCountProduct 프로시져 생성 후 컴파일

#2. 전체 게시물 갯수를 설정해서 setTotalCount에 저장했다면, paging() 메소드를 호출해서 startNum, endNum을 계산하도록 만든다.

#3. startNum, endNum이 계산되면, 이를 이용하여 페이지에 나타낼 10개의 게시물을 조회한다.
----> productList() 메소드 제작
----> productList 프로시져 생성 후 컴파일

-----> 그렇게 담아온 10개의 product 리스트를 ArrayList형의 객체 list에 담는다.

------> 그리고 list, paging, key를 ModelAndView 형태의 객체 mav에 담고 보낸다.


-----> admin 메인 페이지 (§ 사진 18)가 출력된다.




## 상품 등록 (§ 사진 19) (Ajax 사용...퍼블리셔(프론트 엔드) 부분이지만, 알고 있어도 나쁠것은 없을 것이다.
- 상품 등록할 때 사진을 올린다. 이전에는 팝업창 하나를 띄워서 했는데, 이번에는 Ajax를 이용해서 등록할 것이다.

- productWriteForm.jsp에서 name이 fromm인 form 태그를 만든다!

-> admin 의 header 파일에 스크립트를 제작한다.
-> ajax를 사용하기 위해서는 
<script src="https://ajax.googleapis.com/ajax/libs/jqiery/3.4.1/jquery.min.js"></script>
 이 태그가 필요하다!

--> ajax에 대해서는...개인적으로 공부해야하면 공부한다...

---> 어쨌든 ajax에서 fileup로 request한다.


----> 사진 업로드를 위해서는 static 폴더에도 product_images 폴더가 있어야 하지만, webapp 폴더에도 product_images 폴더가 있어야 한다!


-----> 그러면 (§ 사진 19) 화면이 나온다...
-----> 사진 추가 버튼이 아래있는 이유는 form 태그 안에 form 태그를 넣으니 작동을 안 해서 form 태그 바깥으로 빼내었기 때문이다.
-----> 따라서 position을 잘 이동시켜서 이를 고쳐줄 수 있다.

------> 어쨌든, file을 업로드할때 별도의 form을 ajax와 연동해서 사용한다.























