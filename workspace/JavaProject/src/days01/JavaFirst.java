package days01;		// (단순하게 풀어쓰자면) package는 우리가 알고 있는 폴더와 의미가 크게 다르지 않습니다.
// 지금 현재 폴더가 days01 이라는 뜻이며, 외부에서 바라보는 이름입니다.

// 주석문
// 현재 파일에 쓰여진 모든 단어들은 프로그램 실행에 관여하는 예약어(실행명령 등) 입니다.
// 다만, '//' 로 시작하거나, '/* */' 사이에 있는 구문들은 실행되지 않고, 개발자 및 다른 사람의 이해를 돕기 위한 설명문으로 사용되며, '주석문'이라고 부릅니다.

// 컴파일러는 주석문을 제외한 다른 명령어들만 컴파일 합니다.

//	// : 한줄 주석
// /* ~여러줄~*/ : 여러줄에 걸쳐 쓰는 주석

// 자바 프로그래밍은 클래스 단위로 구성되고, 실행됩니다. 아래는 구성의 경계를 생성한 예입니다.
public class JavaFirst {

	// 구성은 class 단위이지만, 프로그램의 시작과 끝은 main 영역에서 담당합니다.
	// class 안에는 main 이외에 다른 구성요소들이 들어올 수 있습니다.
	// JavaFirst 클래스의 내용이 실행된다면, 아래 main의 내용이 실행될 것 입니다.
	public static void main(String[] args) {
		System.out.printf("겁나 쉬운 자바 프로그래밍!\n");
		// System.out.printf();
		// 괄호 안의 큰따옴표 안 쪽의 문자들을 화면에 그대로 출력하는 명령어입니다.
		
		// 자바 프로그램은 하나의 명령어가 끝날떄마다 ';'를 표시하여 문장(명령)의 끝을 표시합니다.
		
		// 위 문장을 세번 화면에 출력하고 싶다면 명령을 두 번 더 쓰면 됩니다.
		System.out.printf("겁나 쉬운 자바 프로그래밍!  ");
		System.out.printf("겁나 쉬운 자바 프로그래밍?  ");
		System.out.printf("겁나 쉬운 자바 프로그래밍!\n겁나 쉬운 자바 프로그래밍!");
		// 별도의 표시 없이 System.out.printf를 명령하면, 두 번이던 세 번이던 모든 명령을 한 줄에 출력하려고 합니다.
		// 앞에서 언급한 줄바꿈 표시 : '\n'
	}

	//클래스 이름 생성 규칙!
	// 1. 첫 글자는 반드시 대문자로 합니다.
	// 2. 여러 단어가 조합된 경우, 두번째 단어의 시작 문자도 대문자로 합니다.(카멜표기법)
	// 3. 클래스의 이름은 그를 저장하고 있는 파일 이름과 반드시 일치해야 합니다.
	// 4. 파일에 저장된 클래스는 여러개일 수 있고 그들 중 하나는 반드시 public 을 붙이고 있어야 합니다.
}

/*
1. 저장은 보조기억장치(HDD), 더블클릭해서 실행시키는건 주기억장치(RAM), 실제 실행되는 곳은 중앙처리장치(CPU) 이다.

2. 프로그램은 "입력 -> 연산 -> 출력" 을 반복하는 구조를 가지고 있다.
   어렵게 생각하지 말고 단순하게 생각해서 만들자!
   
3. 자바는 시킨건 빠르게 처리하지만, 안 시킨건 안 한다.
*/