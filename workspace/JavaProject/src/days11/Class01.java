package days11;
// 클래스 (class)
// -> 프로그램으로 처리하고자 하는 대상을 자료화하여 하나의 자료형으로 '새롭게' 정의(속성/기능)한 사용자 정의 자료형
// 쉽게 말해, 개발자가 필요에 의해 정의한 자료형이다.

// 만드는 법 : class라는 키워드를 이용하여 만든다.
class 클래스이름{	// 보조 클래스
	// 멤버 필드
	int 변수1;
	double 변수2;
	String 변수3;
	int [] 배열1=new int[5];
	
	// 멤버 메소드
	public void 메소드1() { }
	public static void 메소드2() { }		// static 유무의 차이는 차후에 배운다.
}	
// 기존에 학생 성적표를 만들 때, 이름은 이름으로, 국어점수는 국어점수로 묶는 그런 배열을 이용했다.
// Class를 이용하면 학생 하나의 이름, 국어점수, 총점, 평균에 대한 데이터를 저장할 수 있다.


// 클래스 First 생성
class First{
	int n1;
	int n2;
	// 속성(멤버필드, 멤버변수, 필드... 전부 같은 의미이다.) : 클래스에 속한 정보(변수)들.
	// 속성은 변수로 생성하며, 클래스의 '멤버필드'라고도 호칭한다.
}

public class Class01 {	// 메인 클래스

	public static void main(String[] args) {
		// 클래스의 변수 선언
		First a1;	// a1은 참조변수
		// 새로 만들어진 클래스의 변수는 위와 같이 생성한다.
		// 생성된 변수는 레퍼런스(참조)변수이다.
		// 배열때와 마찬가지로, new 명령을 이용하여 Heap 영역에 적정 공간(클래스가 정의된 크기만큼)을 확보한 후,
		// 그 주소를 a1 변수에 저장하여 사용한다.
		// 레퍼런스 변수와 new에 의해 만들어진 공간이 합쳐지면 이를 '객체'라고 부른다.
		a1 = new First();	// 객체, 뉴인스턴스
		// 위와 같이 공간이 할당되면 이제부터 n1, n2 변수의 사용이 가능하다.
		// new First() 로 생성된 새로운 공간을 '뉴인스턴스'라고 부를 것이다.
		
		First a2 = new First();
		// 객체가 두개가 만들어지면, a1에도 n1, n2가 생성되고 a2에도 n1,n2가 생성된다.
		// 이 둘을 구분하기 위해 a1.n1, a1.n2, a2.n1, a2.a2로 사용한다.
		System.out.println(a1.n1);
		System.out.println(a1.n2);
		a2.n1 = 30;
		a2.n2 = 40;
		System.out.println(a2.n1);
		System.out.println(a2.n2);
		// System.out.println 는 '객체.객체.메서드' 이다!
	}

}
