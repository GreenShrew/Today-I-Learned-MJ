package days10;

public class Method02 {
	// 매개변수 :
	// 메서드 호출시 메서드가 필요로하는 데이터를 전달해줄 수 있는 매개 역할의 변수
	// 메서드 호출시 괄호안에 넣어주는 데이터 <- 전달인수
	// 메서드의 몸체에서 괄호안에 위치하면 전달된 값을 받아주는 변수 <- 매개변수
	
	// 매개 변수의 선언
	// public static void 메서드이름(자료형 매개변수, 자료형 매개변수 ...){
	//}	매개변수 또한 필요한 갯수 만큼 선언해서 사용할 수 있다.
	
	// String[] args : main 메서드의 매개변수
	public static void main(String[] args) {
		myPrint(100);	// 괄호 안에 입력한 숫자 100은 전달인수
		// 100 : 전달인자 -> 괄호 안에 전달된 인수는 메서드가 실행될 때
		// 메서드의 정의 영역 괄호안에 선언된 n변수에 저장된다.
		myPrint(200);
		myPrintWith2Int(300, 400);
	}

	public static void myPrint(int n) {	// 이번에는 괄호 안에 int n을 넣어 매개변수를 필요로 한다고 정의했다.
		System.out.println("전달받은 매개변수 값 n -> "+n);
	}
	public static void myPrintWith2Int(int n1, int n2) {	// 매개변수를 넣는 부분에는 int n1, n2 이런식으로 한꺼번에 정의하면 안된다.
		System.out.println("전달받은 매개변수의 값 n1 -> "+n1+", n2 -> "+n2);
	}
	// 전달인수는 반드시 매개변수의 자료형과 일치하는 자료를 전달해주어야 한다.
	// 다수개의 값을 전달할떄는 자료형과 순서도 일치하게 전달해줘야 한다.
	// ex) 매개변수 abc(int x, double y)	전달인수 abc(300.0, 500)	이렇게는 안된다!
}
// public : 공용 이라는 의미로 누구나 사용할 수 있는 메서드의 앞에 표기.
// static : 정적(처음부터 만들어지는) 이라는 의미로 추후 객체지향 프로그래밍의 단원에서 자세히 공부한다.
// void : 리턴값이 없다는 의미이며, 메서드 관련 다음 예제에서 자세히 공부한다.