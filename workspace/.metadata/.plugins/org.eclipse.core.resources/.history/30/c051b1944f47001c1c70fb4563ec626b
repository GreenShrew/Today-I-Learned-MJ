package days22;

// 프로그램의 수행 중 동시에 처리하고자 하는 작업이 생겼을때는 
// 원래 갖고 있는 메인 Thread 외에 Thread 클래스를 추가 사용하여 실행시킬 수 있다.
// Thread Class : 프로그램 실행의 흐름은 분기할 수 있는 방법을 제공하는 클래스.

// 구현방법
// 1. Thread 클래스를 상속받는 방법.
//		1-1.	Thread 클래스를 상속받아 public void run() 메소드를 오버라이딩한다.
//				public void run() : 쓰레드가 생성되어 수행할 작업을 정의하는 메소드
//		1-2.	해당 클래스의 객체를 생성하고, start 메소드를 호출(실행)한다.
//				만약 오버라이딩된 run 메소드를 호출하면, 쓰레드 생성실행이 아니라, 일반 메소드 호출이 되므로
//				반드시 strat 메소드를 통해 run 으로 이어지게 호출한다.
//				start 메소드 : Thread 클래스(부모 클래스)에 있는 메소드로, 자체적으로 쓰레드 추가 생성 후
//								run 메소드를 재호출하는 역할을 한다.
//								(상속된 메소드로 메소다가 표면에 보여지지는 않은채 사용된다)
// 2. Runnable 인터페이스를 implements(구현)하는 방법.
//		2-1. Thread 클래스를 상속하는 방법과 같고, 효과도 거의 같다.

class ThreadB1 extends Thread{
	public void run() {
		for(int i=1;i<=10;i++) {
			System.out.printf("ThreadB1 : i -> %d\n",i);
		}
	}
}
public class Thread02 {

	public static void main(String[] args) {

	}

}
